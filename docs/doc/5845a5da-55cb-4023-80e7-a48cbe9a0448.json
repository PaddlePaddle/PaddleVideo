{
    "summary": "The MetricsCalculator class calculates accuracy, average loss, and mean loss for multimodal video tagging models with various top-k values. It compares predictions to actual labels in a multilabel classification and logs the metrics using a logger.",
    "details": [
        {
            "comment": "This code imports necessary libraries and defines a class for calculating metrics. The MetricsCalculator class initializes with name, mode ('train', 'val', or 'test'), and metrics_args.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/accuracy_metrics.py\":0-34",
            "content": "#  Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\nfrom __future__ import division\nimport numpy as np\nimport logging\nlogger = logging.getLogger(__name__)\nclass MetricsCalculator():\n    \"\"\"\n    MetricsCalculator\n    \"\"\"\n    def __init__(self, name, mode, metrics_args):\n        \"\"\"\n        init\n        \"\"\"\n        self.name = name\n        self.mode = mode  # 'train', 'val', 'test'"
        },
        {
            "comment": "This code initializes an AccuracyMetrics class with metrics arguments, resets the metrics values, finalizes and calculates the accuracy and average loss for each top-n value, and returns the computed metrics. The purpose is to measure the performance of a multimodal video tagging model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/accuracy_metrics.py\":35-67",
            "content": "        self.acc_dict = {}\n        self.top_n_list = metrics_args.MODEL.top_n\n        self.num_classes = metrics_args.MODEL.num_classes\n        self.reset()\n    def reset(self):\n        \"\"\"\n        reset\n        \"\"\"\n        logger.info('Resetting {} metrics...'.format(self.mode))\n        for topk in self.top_n_list:\n            self.acc_dict['avg_acc%d' % (topk)] = 0.0\n        self.aggr_loss = 0.0\n        self.aggr_batch_size = 0\n    def finalize_metrics(self):\n        \"\"\"finalize_metrics\n        \"\"\"\n        for key, value in self.acc_dict.items():\n            self.acc_dict[key] = value / self.aggr_batch_size\n        self.aggr_loss = self.aggr_loss / self.aggr_batch_size\n    def get_computed_metrics(self):\n        \"\"\"get_computed_metrics\n        \"\"\"\n        acc_dict = {}\n        for key, value in self.acc_dict.items():\n            acc_dict[key] = value / self.aggr_batch_size\n        aggr_loss = self.aggr_loss / self.aggr_batch_size\n        return acc_dict, aggr_loss\n    def accumulate(self, loss, softmax, labels):"
        },
        {
            "comment": "This code snippet is part of a class that accumulates metrics for video tagging. It computes the mean loss, average accuracy for different top k values, and then logs these metrics in an informative format using a logger.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/accuracy_metrics.py\":68-94",
            "content": "        \"\"\"accumulate\n        \"\"\"\n        cur_batch_size = softmax.shape[0]\n        # if returned loss is None for e.g. test, just set loss to be 0.\n        if loss is None:\n            cur_loss = 0.\n        else:\n            cur_loss = np.mean(np.array(loss))  #\n        self.aggr_batch_size += cur_batch_size\n        self.aggr_loss += cur_loss * cur_batch_size\n        for top_k in self.top_n_list:\n            self.acc_dict['avg_acc%d' %\n                          (top_k)] += cur_batch_size * compute_topk_accuracy(\n                              softmax, labels, top_k=top_k) * 100.\n        return\n    def finalize_and_log_out(self, info=''):\n        \"\"\"finalize_and_log_out\n        \"\"\"\n        metrics_dict, loss = self.get_computed_metrics()\n        acc_str = []\n        for name, value in metrics_dict.items():\n            acc_str.append('{}:{},'.format('%s' % name, '%.2f' % value))\n        acc_str = '\\t'.join(acc_str)\n        logger.info(info +\n                    '\\tLoss: {},\\t{}'.format('%.6f' % loss, '%s' % acc_str))"
        },
        {
            "comment": "This code computes the number of correct hits for a given top_k in multilabel classification, where it calculates the top_k predictions and checks if any of them match with the actual labels. It returns the total number of correct hits across all samples in the batch.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/accuracy_metrics.py\":95-124",
            "content": "        return\ndef compute_topk_correct_hits_multilabel(top_k, preds, labels):\n    '''Compute the number of corret hits'''\n    batch_size = preds.shape[0]\n    top_k_preds = np.zeros((batch_size, 10), dtype=np.float32)\n    for i in range(batch_size):\n        top_k_preds[i, :] = np.argsort(-preds[i, :])[:10]\n    correctness = np.zeros(batch_size, dtype=np.float32)\n    for i in range(batch_size):\n        correc_sum = 0\n        for label_id in range(len(labels[i])):\n            label_hit = labels[i][label_id]\n            if label_hit == 0 or label_hit < 0.1:\n                continue\n            if label_id in top_k_preds[i, :top_k].astype(np.int32).tolist():\n                # correc_sum += 1\n                correc_sum = 1\n                break\n        correctness[i] = correc_sum\n    correct_hits = sum(correctness)\n    return correct_hits\ndef compute_topk_correct_hits(top_k, preds, labels):\n    '''Compute the number of corret hits'''\n    batch_size = preds.shape[0]\n    top_k_preds = np.zeros((batch_size, top_k), dtype=np.float32)"
        },
        {
            "comment": "This code calculates the top-k accuracy for a batch of predictions and labels. It first computes the top-k predictions and then checks if the ground truth label is within the top-k predictions. The function returns the number of correct hits divided by the batch size to obtain the accuracy. The main section demonstrates usage with example data.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/accuracy_metrics.py\":125-157",
            "content": "    for i in range(batch_size):\n        top_k_preds[i, :] = np.argsort(-preds[i, :])[:top_k]\n    correctness = np.zeros(batch_size, dtype=np.int32)\n    for i in range(batch_size):\n        if labels[i] in top_k_preds[i, :].astype(np.int32).tolist():\n            correctness[i] = 1\n    correct_hits = sum(correctness)\n    return correct_hits\ndef compute_topk_accuracy(softmax, labels, top_k):\n    \"\"\"compute_topk_accuracy\n    \"\"\"\n    computed_metrics = {}\n    assert labels.shape[0] == softmax.shape[0], \"Batch size mismatch.\"\n    aggr_batch_size = labels.shape[0]\n    # aggr_top_k_correct_hits = compute_topk_correct_hits(top_k, softmax, labels)\n    aggr_top_k_correct_hits = compute_topk_correct_hits_multilabel(\n        top_k, softmax, labels)\n    # normalize results\n    computed_metrics = \\\n        float(aggr_top_k_correct_hits) / aggr_batch_size\n    return computed_metrics\nif __name__ == \"__main__\":\n    pred = np.array([[0.5, 0.2, 0.3, 0, 0]])\n    label = np.array([[0.5, 0.5, 0, 0, 0]])\n    print('pred:  ', pred)\n    print('label:  ', label)"
        },
        {
            "comment": "Computing top-1 and top-5 hits for multilabel prediction using compute_topk_correct_hits_multilabel function.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/accuracy_metrics.py\":158-159",
            "content": "    print('Top 1 hits', compute_topk_correct_hits_multilabel(1, pred, label))\n    print('Top 5 hits', compute_topk_correct_hits_multilabel(5, pred, label))"
        }
    ]
}