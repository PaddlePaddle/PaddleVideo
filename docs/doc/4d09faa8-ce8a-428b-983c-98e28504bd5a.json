{
    "summary": "The PaintBoard class, derived from QWidget, handles data initialization and view size, provides methods for clearing board, changing pen attributes, painting events, and retrieving content. The code implements a mouse event handler for drawing on the board in PaintBoard mode or eraser mode based on user selection.",
    "details": [
        {
            "comment": "The code defines a class `PaintBoard` which inherits from `QWidget`. It initializes data such as the size of the board, an empty QPixmap, a boolean for EraserMode, and variables to store the position and pen attributes. Then it sets the view's fixed size based on the initialized data.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/widget/PaintBoard.py\":0-39",
            "content": "from PyQt5.QtWidgets import QWidget\nfrom PyQt5.Qt import QPixmap, QPainter, QPoint, QPaintEvent, QMouseEvent, QPen, \\\n    QColor, QSize\nfrom PyQt5.QtCore import Qt\nclass PaintBoard(QWidget):\n    def __init__(self, parent=None):\n        '''\n        Constructor\n        '''\n        super().__init__(parent)\n        self.__init_data()  # \u5148\u521d\u59cb\u5316\u6570\u636e\uff0c\u518d\u521d\u59cb\u5316\u754c\u9762\n        self.__init_view()\n    def __init_data(self):\n        self.__size = QSize(810, 458)\n        # \u65b0\u5efaQPixmap\u4f5c\u4e3a\u753b\u677f\uff0c\u5c3a\u5bf8\u4e3a__size\n        self.__board = QPixmap(self.__size)\n        self.__board.fill(Qt.transparent)  # \u7528\u900f\u660e\u586b\u5145\u753b\u677f\n        self.__IsEmpty = True  # \u9ed8\u8ba4\u4e3a\u7a7a\u753b\u677f\n        self.EraserMode = False  # \u9ed8\u8ba4\u4e3a\u7981\u7528\u6a61\u76ae\u64e6\u6a21\u5f0f\n        self.__lastPos = QPoint(0, 0)  # \u4e0a\u4e00\u6b21\u9f20\u6807\u4f4d\u7f6e\n        self.__currentPos = QPoint(0, 0)  # \u5f53\u524d\u7684\u9f20\u6807\u4f4d\u7f6e\n        self.__painter = QPainter()  # \u65b0\u5efa\u7ed8\u56fe\u5de5\u5177\n        self.__thickness = 15  # \u9ed8\u8ba4\u753b\u7b14\u7c97\u7ec6\u4e3a10px\n        self.__penColor = QColor(\"black\")  # \u8bbe\u7f6e\u9ed8\u8ba4\u753b\u7b14\u989c\u8272\u4e3a\u9ed1\u8272\n        self.__colorList = QColor.colorNames()  # \u83b7\u53d6\u989c\u8272\u5217\u8868\n    def __init_view(self):\n        # \u8bbe\u7f6e\u754c\u9762\u7684\u5c3a\u5bf8\u4e3a__size\n        self.setFixedSize(self.__size)"
        },
        {
            "comment": "This code defines a class with methods to clear the paint board, change pen color and thickness, check if the board is empty, retrieve content as QImage, and handle painting events. The paintEvent method utilizes QPainter to draw the pixmap on the board in the correct location.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/widget/PaintBoard.py\":41-77",
            "content": "    def clear(self):\n        # \u6e05\u7a7a\u753b\u677f\n        # self.__board.fill(Qt.white)\n        self.__board = QPixmap(self.__size)\n        self.__board.fill(Qt.transparent)  # \u7528\u900f\u660e\u586b\u5145\u753b\u677f\n        self.update()\n        self.__IsEmpty = True\n    def change_pen_color(self, color=\"black\"):\n        # \u6539\u53d8\u753b\u7b14\u989c\u8272\n        # rgbaColor = QColor(255, 255, 0, 100)\n        self.__penColor = QColor(color)\n    def change_pen_thickness(self, thickness=10):\n        # \u6539\u53d8\u753b\u7b14\u7c97\u7ec6\n        self.__thickness = thickness\n    def is_empty(self):\n        # \u8fd4\u56de\u753b\u677f\u662f\u5426\u4e3a\u7a7a\n        return self.__IsEmpty\n    def get_content_as_q_image(self):\n        # \u83b7\u53d6\u753b\u677f\u5185\u5bb9\uff08\u8fd4\u56deQImage\uff09\n        image = self.__board.toImage()\n        return image\n    def paintEvent(self, paint_event):\n        # \u7ed8\u56fe\u4e8b\u4ef6\n        # \u7ed8\u56fe\u65f6\u5fc5\u987b\u4f7f\u7528QPainter\u7684\u5b9e\u4f8b\uff0c\u6b64\u5904\u4e3a__painter\n        # \u7ed8\u56fe\u5728begin()\u51fd\u6570\u4e0eend()\u51fd\u6570\u95f4\u8fdb\u884c\n        # begin(param)\u7684\u53c2\u6570\u8981\u6307\u5b9a\u7ed8\u56fe\u8bbe\u5907\uff0c\u5373\u628a\u56fe\u753b\u5728\u54ea\u91cc\n        # drawPixmap\u7528\u4e8e\u7ed8\u5236QPixmap\u7c7b\u578b\u7684\u5bf9\u8c61\n        self.__painter.begin(self)\n        # 0,0\u4e3a\u7ed8\u56fe\u7684\u5de6\u4e0a\u89d2\u8d77\u70b9\u7684\u5750\u6807\uff0c__board\u5373\u8981\u7ed8\u5236\u7684\u56fe\n        self.__painter.drawPixmap(0, 0, self.__board)\n        self.__painter.end()"
        },
        {
            "comment": "This code implements a mouse event handler for drawing on a PaintBoard. When the mouse is pressed, the current position is saved as the previous position. As the mouse moves, it draws lines between the last and current positions based on whether eraser mode is enabled or not. Upon mouse release, the board is marked as not empty. The drawing is updated to reflect the changes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/widget/PaintBoard.py\":79-105",
            "content": "    def mousePressEvent(self, mouse_event):\n        # \u9f20\u6807\u6309\u4e0b\u65f6\uff0c\u83b7\u53d6\u9f20\u6807\u7684\u5f53\u524d\u4f4d\u7f6e\u4fdd\u5b58\u4e3a\u4e0a\u4e00\u6b21\u4f4d\u7f6e\n        self.__currentPos = mouse_event.pos()\n        self.__lastPos = self.__currentPos\n    def mouseMoveEvent(self, mouse_event):\n        # \u9f20\u6807\u79fb\u52a8\u65f6\uff0c\u66f4\u65b0\u5f53\u524d\u4f4d\u7f6e\uff0c\u5e76\u5728\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u548c\u5f53\u524d\u4f4d\u7f6e\u95f4\u753b\u7ebf\n        self.__currentPos = mouse_event.pos()\n        self.__painter.begin(self.__board)\n        if self.EraserMode == False:\n            # \u975e\u6a61\u76ae\u64e6\u6a21\u5f0f\n            self.__painter.setPen(QPen(self.__penColor, self.__thickness))  # \u8bbe\u7f6e\u753b\u7b14\u989c\u8272\uff0c\u7c97\u7ec6\n        else:\n            # \u6a61\u76ae\u64e6\u6a21\u5f0f\u4e0b\u753b\u7b14\u4e3a\u7eaf\u767d\u8272\uff0c\u7c97\u7ec6\u4e3a10\n            self.__painter.setPen(QPen(Qt.transparent, 10))\n        # \u753b\u7ebf\n        # print(self.__lastPos + self.__currentPos)\n        self.__painter.drawLine(self.__lastPos, self.__currentPos)\n        self.__painter.end()\n        self.__lastPos = self.__currentPos\n        self.update()  # \u66f4\u65b0\u663e\u793a\n    def mouseReleaseEvent(self, mouseEvent):\n        self.__IsEmpty = False  # \u753b\u677f\u4e0d\u518d\u4e3a\u7a7a"
        }
    ]
}