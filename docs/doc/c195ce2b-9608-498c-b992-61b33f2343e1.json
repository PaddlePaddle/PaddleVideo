{
    "summary": "This PaddleVideo library code initializes a dataset class for action segmentation videos, includes methods to load data for training/validation, and loads video features, labels, and boundaries using a pipeline.",
    "details": [
        {
            "comment": "The code imports necessary libraries and defines the ASRFDataset class for action segmentation video datasets. It registers this dataset with the DATASETS registry and initializes the dataset with specified file paths and pipeline parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/asrf_dataset.py\":0-37",
            "content": "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport copy\nimport os\nimport numpy as np\nfrom ..registry import DATASETS\nfrom .base import BaseDataset\nfrom ...utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@DATASETS.register()\nclass ASRFDataset(BaseDataset):\n    \"\"\"Video dataset for action segmentation.\n    \"\"\"\n    def __init__(\n        self,\n        file_path,\n        pipeline,\n        feature_path,\n        label_path,\n        boundary_path,\n        **kwargs,"
        },
        {
            "comment": "The code initializes an instance of a dataset class with file paths for labels, boundaries, and features. It defines methods to load index files containing video information and prepare data for training/validation, including loading video features, labels, and boundaries based on the given index.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/asrf_dataset.py\":38-67",
            "content": "    ):\n        super().__init__(file_path, pipeline, **kwargs)\n        self.label_path = label_path\n        self.boundary_path = boundary_path\n        self.feature_path = feature_path\n    def load_file(self):\n        \"\"\"Load index file to get video information.\"\"\"\n        file_ptr = open(self.file_path, 'r')\n        info = file_ptr.read().split('\\n')[:-1]\n        file_ptr.close()\n        return info\n    def prepare_train(self, idx):\n        \"\"\"TRAIN & VALID: Prepare data for training/valid given the index.\"\"\"\n        results = {}\n        video_name = self.info[idx]\n        # load video feature\n        file_name = video_name.split('.')[0] + \".npy\"\n        feat_file_path = os.path.join(self.feature_path, file_name)\n        #TODO: check path\n        video_feat = np.load(feat_file_path)\n        # load label\n        file_name = video_name.split('.')[0] + \".npy\"\n        label_file_path = os.path.join(self.label_path, file_name)\n        label = np.load(label_file_path).astype(np.int64)\n        # load boundary\n        file_name = video_name.split('.')[0] + \".npy\""
        },
        {
            "comment": "The code above is from a dataset loader class in the PaddleVideo library. It loads video features, labels, and boundaries for either training or testing data. The prepare_test function loads video features and labels given an index. The code uses numpy to load data from specified file paths and deepcopy the results for further processing by the pipeline function.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/asrf_dataset.py\":68-91",
            "content": "        boundary_file_path = os.path.join(self.boundary_path, file_name)\n        boundary = np.expand_dims(np.load(boundary_file_path),axis=0).astype(np.float32)\n        results['video_feat'] = copy.deepcopy(video_feat)\n        results['video_label'] = copy.deepcopy(label)\n        results['video_boundary'] = copy.deepcopy(boundary)\n        results = self.pipeline(results)\n        return results['video_feat'], results['video_label'], results['video_boundary']\n    def prepare_test(self, idx):\n        \"\"\"TEST: Prepare the data for test given the index.\"\"\"\n        results = {}\n        video_name = self.info[idx]\n        # load video feature\n        file_name = video_name.split('.')[0] + \".npy\"\n        feat_file_path = os.path.join(self.feature_path, file_name)\n        #TODO: check path\n        video_feat = np.load(feat_file_path)\n        # load label\n        file_name = video_name.split('.')[0] + \".npy\"\n        label_file_path = os.path.join(self.label_path, file_name)\n        label = np.load(label_file_path).astype(np.int64)"
        },
        {
            "comment": "This code snippet loads the boundary data for a video, reads it from a file using numpy's load function, and assigns it to a variable named 'boundary'. The code then creates a results dictionary, copies video features, labels, and boundaries into their respective keys in the results dictionary. Finally, it passes this dictionary through a pipeline and returns the video features, labels, and boundaries.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/asrf_dataset.py\":93-103",
            "content": "        # load boundary\n        file_name = video_name.split('.')[0] + \".npy\"\n        boundary_file_path = os.path.join(self.boundary_path, file_name)\n        boundary = np.expand_dims(np.load(boundary_file_path),axis=0).astype(np.float32)\n        results['video_feat'] = copy.deepcopy(video_feat)\n        results['video_label'] = copy.deepcopy(label)\n        results['video_boundary'] = copy.deepcopy(boundary)\n        results = self.pipeline(results)\n        return results['video_feat'], results['video_label'], results['video_boundary']"
        }
    ]
}