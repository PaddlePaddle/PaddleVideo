{
    "summary": "The code creates a base class for model recognizers in PaddleVideo. It initializes the backbone and head modules' weights, extracts features using the backbone, and performs optional classification. The class provides abstract methods for training, validating, and testing steps to be implemented by subclasses.",
    "details": [
        {
            "comment": "Base class for recognizers, subclass for train_step, valid_step, test_step. Initializes backbone and head modules with weights.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py\":0-37",
            "content": "\"\"\"\nstart\n\"\"\"\nfrom abc import abstractmethod\nfrom ... import builder\nimport paddle\nimport paddle.nn as nn\nimport paddle.nn.functional as F\nclass BaseRecognizer(nn.Layer):\n    \"\"\"Base class for recognizers.\n    All recognizers should subclass it.\n    All subclass should overwrite:\n    - Methods:``train_step``, supporting to forward when training.\n    - Methods:``valid_step``, supporting to forward when validating.\n    - Methods:``test_step``, supporting to forward when testing.\n    Args:\n        backbone (dict): Backbone modules to extract feature.\n        head (dict): Classification head to process feature.\n    \"\"\"\n    def __init__(self, backbone=None, head=None):\n        super().__init__()\n        if backbone is not None:\n            self.backbone = builder.build_backbone(backbone)\n            self.backbone.init_weights()\n        else:\n            self.backbone = None\n        if head is not None:\n            self.head_name = head.name\n            self.head = builder.build_head(head)\n            self.head.init_weights()"
        },
        {
            "comment": "The code defines a base class for model recognizers. It initializes the weights of both backbone and head, extracts features using the backbone, and optionally performs classification using the head if it exists. The method also handles reshaping inputs when necessary.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py\":38-74",
            "content": "        else:\n           self.head = None\n    def init_weights(self):\n        \"\"\"Initialize the model network weights. \"\"\"\n        self.backbone.init_weights(\n        )  #TODO: required? while backbone without base class\n        self.head.init_weights()\n    def extract_feature(self, imgs):\n        \"\"\"Extract features through a backbone.\n    Args:\n        imgs (paddle.Tensor) : The input images.\n        Returns:\n            feature (paddle.Tensor) : The extracted features.\n        \"\"\"\n        feature = self.backbone(imgs)\n        return feature\n    def forward(self, imgs, **kwargs):\n        \"\"\"Define how the model is going to run, from input to output.\n        \"\"\"\n        batches = imgs.shape[0]\n        num_segs = imgs.shape[1]\n        imgs = paddle.reshape(imgs, [-1] + list(imgs.shape[2:]))\n        if self.backbone is not None:\n            feature = self.extract_feature(imgs)\n        else:\n            feature = imgs\n        if self.head is not None:\n            cls_score = self.head(feature, num_segs)\n        else:"
        },
        {
            "comment": "This code defines a base class for recognizer models in PaddleVideo. It provides abstract methods for training, validating, and testing steps, which must be implemented by any subclasses that inherit from this base class.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py\":75-96",
            "content": "            cls_score = None\n        return cls_score\n    @abstractmethod\n    def train_step(self, data_batch, **kwargs):\n        \"\"\"Training step.\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def val_step(self, data_batch, **kwargs):\n        \"\"\"Validating step.\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def test_step(self, data_batch, **kwargs):\n        \"\"\"Test step.\n        \"\"\"\n        raise NotImplementedError"
        }
    ]
}