{
    "summary": "PaddleVideo's SFVideoDataset is a video dataset for action recognition, which extends BaseDataset with index file information and optional parameters. It prepares data for training by setting random seeds, loading index files, and appending entries before handling corrupted videos through retry mechanisms and calculating dataset size.",
    "details": [
        {
            "comment": "This code snippet is from the PaddleVideo module and defines a class called SFVideoDataset. It is a video dataset for action recognition, loading raw videos and applying specified transforms on them. The index file contains multiple lines with information about each video. The class extends BaseDataset and registers it in the DATASETS registry. The code also includes license and copyright information.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/slowfast_video.py\":0-30",
            "content": "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os.path as osp\nimport copy\nimport random\nimport numpy as np\nfrom ..registry import DATASETS\nfrom .base import BaseDataset\nfrom ...utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@DATASETS.register()\nclass SFVideoDataset(BaseDataset):\n    \"\"\"Video dataset for action recognition\n       The dataset loads raw videos and apply specified transforms on them.\n       The index file is a file with multiple lines, and each line indicates"
        },
        {
            "comment": "The code defines a class that represents an index file containing paths to video files and their corresponding labels. It takes arguments such as the path to the index file, data transforms pipeline, and optional parameters for ensemble views and spatial crops. It also includes keyword arguments for the BaseDataset class. The super() function is used to call the parent class's constructor.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/slowfast_video.py\":31-63",
            "content": "       a sample video with the filepath and label, which are split with a whitesapce.\n       Example of a inde file:\n       .. code-block:: txt\n           path/000.mp4 1\n           path/001.mp4 1\n           path/002.mp4 2\n           path/003.mp4 2\n       Args:\n           file_path(str): Path to the index file.\n           pipeline(XXX): A sequence of data transforms.\n           num_ensemble_views(int): temporal segment when multi-crop test\n           num_spatial_crops(int): spatial crop number when multi-crop test\n           **kwargs: Keyword arguments for ```BaseDataset```.\n    \"\"\"\n    def __init__(\n        self,\n        file_path,\n        pipeline,\n        num_ensemble_views=1,\n        num_spatial_crops=1,\n        num_retries=5,\n        num_samples_precise_bn=None,\n        **kwargs,\n    ):\n        self.num_ensemble_views = num_ensemble_views\n        self.num_spatial_crops = num_spatial_crops\n        self.num_retries = num_retries\n        self.num_samples_precise_bn = num_samples_precise_bn\n        super().__init__(file_path, pipeline, **kwargs)"
        },
        {
            "comment": "Sets random seed for reproducibility, loads index file to get video information, and appends dictionary entries containing filename, labels, temporal, and spatial sample indices.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/slowfast_video.py\":64-86",
            "content": "        #set random seed\n        random.seed(0)\n        np.random.seed(0)\n    def load_file(self):\n        \"\"\"Load index file to get video information.\"\"\"\n        info = []\n        with open(self.file_path, 'r') as fin:\n            for line in fin:\n                line_split = line.strip().split()\n                filename, labels = line_split\n                if self.data_prefix is not None:\n                    filename = osp.join(self.data_prefix, filename)\n                for tidx in range(self.num_ensemble_views):\n                    for sidx in range(self.num_spatial_crops):\n                        info.append(\n                            dict(\n                                filename=filename,\n                                labels=int(labels),\n                                temporal_sample_index=tidx,\n                                spatial_sample_index=sidx,\n                                temporal_num_clips=self.num_ensemble_views,\n                                spatial_num_clips=self.num_spatial_crops,"
        },
        {
            "comment": "The code is responsible for preparing data for training in the context of a video dataset. It handles potential exceptions caused by reading corrupted video files and allows retries to avoid failures. The function takes an index as input, checks if it's a tuple or not, iterates over a specified number of retries, performs data processing using a pipeline, and handles any exceptions that occur during the process. If there are no exceptions, the results are returned; otherwise, the code logs an error message and tries again.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/slowfast_video.py\":87-111",
            "content": "                            ))\n        return info\n    def prepare_train(self, idx):\n        \"\"\"TRAIN & VALID. Prepare the data for training given the index.\"\"\"\n        #Try to catch Exception caused by reading corrupted video file\n        short_cycle = False\n        if isinstance(idx, tuple):\n            idx, short_cycle_idx = idx\n            short_cycle = True\n        for ir in range(self.num_retries):\n            try:\n                #Multi-grid short cycle\n                if short_cycle:\n                    results = copy.deepcopy(self.info[idx])\n                    results['short_cycle_idx'] = short_cycle_idx\n                else:\n                    results = copy.deepcopy(self.info[idx])\n                results = self.pipeline(results)\n            except Exception as e:\n                #logger.info(e)\n                if ir < self.num_retries - 1:\n                    logger.info(\n                        \"Error when loading {}, have {} trys, will try again\".\n                        format(results['filename'], ir))"
        },
        {
            "comment": "The code is implementing a retry mechanism for loading video files. If a corrupted file is encountered, it will attempt to load another random file up to the specified number of retries. If still unsuccessful, it will return an error. The function also includes a logging system to report exceptions and progress in retry attempts.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/slowfast_video.py\":112-136",
            "content": "                idx = random.randint(0, len(self.info) - 1)\n                continue\n            return results['imgs'][0], results['imgs'][1], np.array(\n                [results['labels']])\n    def prepare_test(self, idx):\n        \"\"\"TEST. Prepare the data for test given the index.\"\"\"\n        #Try to catch Exception caused by reading corrupted video file\n        for ir in range(self.num_retries):\n            try:\n                results = copy.deepcopy(self.info[idx])\n                results = self.pipeline(results)\n            except Exception as e:\n                logger.info(e)\n                if ir < self.num_retries - 1:\n                    logger.info(\n                        \"Error when loading {}, have {} trys, will try again\".\n                        format(results['filename'], ir))\n                idx = random.randint(0, len(self.info) - 1)\n                continue\n            return results['imgs'][0], results['imgs'][1], np.array(\n                [results['labels']]), np.array([idx])\n    def __len__(self):"
        },
        {
            "comment": "This code calculates the size of the dataset. If num_samples_precise_bn is None, it returns the length of self.info. Otherwise, shuffles self.info and returns the minimum value between num_samples_precise_bn and the length of self.info.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/slowfast_video.py\":137-142",
            "content": "        \"\"\"get the size of the dataset.\"\"\"\n        if self.num_samples_precise_bn is None:\n            return len(self.info)\n        else:\n            random.shuffle(self.info)\n            return min(self.num_samples_precise_bn, len(self.info))"
        }
    ]
}