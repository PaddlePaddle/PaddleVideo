{
    "summary": "The code defines a SkeletonDataset class for action recognition, loading skeleton features and applying normalization operations. It imports libraries, registers the dataset, includes a logger, and has a class for loading skeleton data with optional label path and test mode parameter. The class loads and returns data for training or testing, preparing features based on training/testing needs and considering labels if available.",
    "details": [
        {
            "comment": "This code defines a SkeletonDataset class for action recognition. It loads skeleton features and applies normalization operations. It also imports necessary libraries, registers the dataset with DATASETS, and includes a logger for logging purposes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/skeleton.py\":0-33",
            "content": "# copyright (c) 2021 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os.path as osp\nimport copy\nimport random\nimport numpy as np\nimport pickle\nfrom ..registry import DATASETS\nfrom .base import BaseDataset\nfrom ...utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@DATASETS.register()\nclass SkeletonDataset(BaseDataset):\n    \"\"\"\n    Skeleton dataset for action recognition.\n    The dataset loads skeleton feature, and apply norm operatations.\n    Args:\n        file_path (str): Path to the index file."
        },
        {
            "comment": "This code defines a class for loading skeleton data. It takes file path, pipeline, and label path (optional) as input parameters. It also has an optional test mode parameter. The `__init__` method initializes the class with provided parameters. The `load_file` method loads feature files to get skeleton information and handles different file types for labels. If a label path is given and it ends with 'npy' or 'pkl', it will load the label; otherwise, it just outputs predictions.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/skeleton.py\":34-54",
            "content": "        pipeline(obj): Define the pipeline of data preprocessing.\n        data_prefix (str): directory path of the data. Default: None.\n        test_mode (bool): Whether to bulid the test dataset. Default: False.\n    \"\"\"\n    def __init__(self, file_path, pipeline, label_path=None, test_mode=False):\n        self.label_path = label_path\n        super().__init__(file_path, pipeline, test_mode=test_mode)\n    def load_file(self):\n        \"\"\"Load feature file to get skeleton information.\"\"\"\n        logger.info(\"Loading data, it will take some moment...\")\n        self.data = np.load(self.file_path)\n        if self.label_path:\n            if self.label_path.endswith('npy'):\n                self.label = np.load(self.label_path)\n            elif self.label_path.endswith('pkl'):\n                with open(self.label_path, 'rb') as f:\n                    sample_name, self.label = pickle.load(f)\n        else:\n            logger.info(\n                \"Label path not provided when test_mode={}, here just output predictions.\""
        },
        {
            "comment": "The code defines a class for loading, preparing, and returning data for training or testing. The `__getitem__` method loads the data and returns it when accessed by index. The `prepare_train` method prepares the feature for training/validation given an index. The `prepare_test` method prepares the feature for testing given an index, considering label if available.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/skeleton.py\":55-77",
            "content": "                .format(self.test_mode))\n        logger.info(\"Data Loaded!\")\n        return self.data  # used for __len__\n    def prepare_train(self, idx):\n        \"\"\"Prepare the feature for training/valid given index. \"\"\"\n        results = dict()\n        results['data'] = copy.deepcopy(self.data[idx])\n        results['label'] = copy.deepcopy(self.label[idx])\n        results = self.pipeline(results)\n        return results['data'], results['label']\n    def prepare_test(self, idx):\n        \"\"\"Prepare the feature for test given index. \"\"\"\n        results = dict()\n        results['data'] = copy.deepcopy(self.data[idx])\n        if self.label_path:\n            results['label'] = copy.deepcopy(self.label[idx])\n            results = self.pipeline(results)\n            return results['data'], results['label']\n        else:\n            results = self.pipeline(results)\n            return [results['data']]"
        }
    ]
}