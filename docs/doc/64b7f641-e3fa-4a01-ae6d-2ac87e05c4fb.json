{
    "summary": "This code initializes a Table Tennis action detection model using LSTM, loads configurations, and processes proposals for multiple datasets. It applies inference, predicts actions on video features, sorts predictions, and saves results in JSON format.",
    "details": [
        {
            "comment": "This code defines a class named InferModel that implements an LSTM model for action detection. The model is initialized with configuration parameters, including the path to the model and parameter files, GPU memory usage, and device ID. Additional configuration settings include topk, frame_offset, nms_thread, classify_score_thread, iou_score_thread, label_dic, fps, and nms_id. These parameters control various aspects of the action detection process. The code imports necessary libraries and modules for preprocessing, config utilities, result processing, and model loading from PaddlePaddle.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/models/lstm_infer.py\":0-37",
            "content": "\"\"\"\nppTSM InferModel\n\"\"\"\nimport sys\nimport numpy as np\nimport json\nimport pickle\nimport time\nsys.path.append('../')\nfrom utils.preprocess import get_images\nfrom utils.config_utils import parse_config\nfrom utils.process_result import get_action_result\nimport reader\nfrom paddle.inference import Config\nfrom paddle.inference import create_predictor\nclass InferModel(object):\n    \"\"\"lstm infer\"\"\"\n    def __init__(self, cfg, name='ACTION'):\n        name = name.upper()\n        self.name = name\n        model_file = cfg[name]['model_file']\n        params_file = cfg[name]['params_file']\n        gpu_mem = cfg[name]['gpu_mem']\n        device_id = cfg[name]['device_id']\n        self.topk = cfg[name]['topk']\n        self.frame_offset = cfg[name]['nms_offset']\n        self.nms_thread = cfg[name]['nms_thread']\n        self.cls_thread = cfg[name]['classify_score_thread']\n        self.iou_thread = cfg[name]['iou_score_thread']\n        self.label_map_file = cfg['COMMON']['label_dic']\n        self.fps = cfg['COMMON']['fps']\n        self.nms_id = 5"
        },
        {
            "comment": "Initializes model and sets up input/output tensors for inferencing.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/models/lstm_infer.py\":39-61",
            "content": "        # model init\n        config = Config(model_file, params_file)\n        config.enable_use_gpu(gpu_mem, device_id)\n        config.switch_ir_optim(True)  # default true\n        config.enable_memory_optim()\n        # use zero copy\n        config.switch_use_feed_fetch_ops(False)\n        self.predictor = create_predictor(config)\n        input_names = self.predictor.get_input_names()\n        self.input1_tensor = self.predictor.get_input_handle(input_names[0])\n        self.input2_tensor = self.predictor.get_input_handle(input_names[1])\n        output_names = self.predictor.get_output_names()\n        self.output1_tensor = self.predictor.get_output_handle(output_names[0])\n        self.output2_tensor = self.predictor.get_output_handle(output_names[1])\n    def infer(self, input1_arr, input1_lod, input2_arr=None, input2_lod=None):\n        \"\"\"infer\"\"\"\n        self.input1_tensor.copy_from_cpu(input1_arr)\n        self.input1_tensor.set_lod(input1_lod)\n        if not input2_arr is None:\n            self.input2_tensor.copy_from_cpu(input2_arr)"
        },
        {
            "comment": "The code is part of a model for action detection in Table Tennis. It sets the input's layout of dimension (LOD) and performs preprocessing, prediction, and returns output results. The LOD defines the shape of data along the spatial dimensions.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/models/lstm_infer.py\":62-91",
            "content": "            self.input2_tensor.set_lod(input2_lod)\n        self.predictor.run()\n        output1 = self.output1_tensor.copy_to_cpu()\n        output2 = self.output2_tensor.copy_to_cpu()\n        # print(output.shape)\n        return output1, output2\n    def pre_process(self, input):\n        \"\"\"pre process\"\"\"\n        input_arr = []\n        input_lod = [0]\n        start_lod = 0\n        end_lod = 0\n        for sub_item in input:\n            end_lod = start_lod + len(sub_item)\n            input_lod.append(end_lod)\n            input_arr.extend(sub_item)\n            start_lod = end_lod\n        input_arr = np.array(input_arr)\n        # print(input_arr.shape)\n        # print([input_lod])\n        return input_arr, [input_lod]\n    def predict(self, infer_config, material):\n        \"\"\"predict\"\"\"\n        infer_reader = reader.get_reader(self.name,\n                                         'infer',\n                                         infer_config,\n                                         material=material)\n        results = []"
        },
        {
            "comment": "This code iterates through a data source, preprocesses the input, and performs inference on it using a model. The resulting outputs are then sorted to obtain the top k predictions for each input. The video ID, predicted action IDs, sorted indices, and IOU scores are stored in a results list.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/models/lstm_infer.py\":92-110",
            "content": "        for infer_iter, data in enumerate(infer_reader()):\n            video_id = [[items[-2], items[-1]] for items in data]\n            input1 = [items[0] for items in data]\n            input2 = [items[1] for items in data]\n            input1_arr, input1_lod = self.pre_process(input1)\n            input2_arr, input2_lod = self.pre_process(input2)\n            output1, output2 = self.infer(input1_arr, input1_lod, input2_arr,\n                                          input2_lod)\n            # output1, output2 = self.infer(input1_arr, input1_lod)\n            predictions_id = output1\n            predictions_iou = output2\n            for i in range(len(predictions_id)):\n                topk_inds = predictions_id[i].argsort()[0 - self.topk:]\n                topk_inds = topk_inds[::-1]\n                preds_id = predictions_id[i][topk_inds]\n                preds_iou = predictions_iou[i][0]\n                results.append((video_id[i], preds_id.tolist(),\n                                topk_inds.tolist(), preds_iou.tolist()))"
        },
        {
            "comment": "The code is a part of a Table Tennis action detection model implemented using LSTM (Long Short-Term Memory). It loads configurations from a YAML file, initializes the model, and processes proposals for multiple datasets. The model takes results from previous processing steps, applies inference based on labels, frame rate, and other parameters, and returns the final prediction result.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/models/lstm_infer.py\":112-135",
            "content": "        predict_result = get_action_result(results, self.label_map_file,\n                                           self.fps, self.cls_thread,\n                                           self.iou_thread, self.nms_id,\n                                           self.nms_thread, self.frame_offset)\n        return predict_result\nif __name__ == \"__main__\":\n    cfg_file = '/home/work/inference/configs/configs.yaml'\n    cfg = parse_config(cfg_file)\n    model = InferModel(cfg)\n    # proposal total\n    prop_dict = {}\n    for dataset in ['EuroCup2016', 'WorldCup2018']:\n        prop_json = '/home/work/datasets/{}/feature_bmn/prop.json'.format(\n            dataset)\n        json_data = json.load(open(prop_json, 'r'))\n        for item in json_data:\n            basename = prop_json.replace('feature_bmn/prop.json', 'mp4')\n            basename = basename + '/' + item['video_name'] + '.mp4'\n            prop_dict[basename] = item['bmn_results']\n    imgs_path = '/home/work/datasets/WorldCup2018/frames/6e577252c4004961ac7caa738a52c238'"
        },
        {
            "comment": "This code loads video features and proposals, then predicts action using the LSTM model. The results are saved in a JSON file and the time taken is printed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/models/lstm_infer.py\":137-157",
            "content": "    # feature\n    feature_path = imgs_path.replace(\"frames\", \"features\") + '.pkl'\n    video_features = pickle.load(open(feature_path, 'rb'))\n    # proposal\n    basename = imgs_path.replace('frames', 'mp4') + '.mp4'\n    bmn_results = prop_dict[basename]\n    material = {'feature': video_features, 'proposal': bmn_results}\n    t0 = time.time()\n    outputs = model.predict(cfg, material)\n    # outputs = model.infer(np.random.rand(32, 8, 3, 224, 224).astype(np.float32))\n    # print(outputs.shape)\n    t1 = time.time()\n    results = {'actions': outputs}\n    with open('results.json', 'w', encoding='utf-8') as f:\n        data = json.dumps(results, indent=4, ensure_ascii=False)\n        f.write(data)\n    print('cost time = {} min'.format((t1 - t0) / 60.0))"
        }
    ]
}