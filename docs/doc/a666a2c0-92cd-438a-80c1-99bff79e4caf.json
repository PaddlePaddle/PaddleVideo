{
    "summary": "This code defines the Normalize class for image normalization, along with several preprocessing operation classes like Permute, Scale, CenterCrop, and TenCrop, which can be used in PaddleVideo library for preparing images before inference.",
    "details": [
        {
            "comment": "This code defines a class called Normalize with a Run method that takes in an input image and a vector of means for normalization. It is part of the PaddleVideo library, which likely uses OpenCV for image processing tasks.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/cpp_infer/include/preprocess_op.h\":0-38",
            "content": "// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n#pragma once\n#include \"opencv2/core.hpp\"\n#include \"opencv2/imgcodecs.hpp\"\n#include \"opencv2/imgproc.hpp\"\n#include <chrono>\n#include <iomanip>\n#include <iostream>\n#include <ostream>\n#include <vector>\n#include <cstring>\n#include <fstream>\n#include <numeric>\nusing namespace std;\nusing namespace paddle;\nnamespace PaddleVideo\n{\n    class Normalize\n    {\n    public:\n        virtual void Run(cv::Mat *im, const std::vector<float> &mean,"
        },
        {
            "comment": "The code defines several classes representing image preprocessing operations, including Permute for changing RGB to CHW format, Scale for resizing images, CenterCrop for cropping images to a specific size, and TenCrop for splitting an image into multiple crops. These classes can be used in the PaddleVideo library for preparing images before running inference with deep learning models.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/cpp_infer/include/preprocess_op.h\":39-73",
            "content": "                         const std::vector<float> &scale, const bool is_scale = true);\n    };\n    // RGB -> CHW\n    class Permute\n    {\n    public:\n        virtual void Run(const cv::Mat *img, float *data);\n    };\n    class Scale\n    {\n    public:\n        virtual void Run(const cv::Mat &img, cv::Mat &resize_img,\n                         bool use_tensorrt = false,\n                         const int &short_size = 256);\n    };\n    class CenterCrop\n    {\n    public:\n        virtual void Run(const cv::Mat &img, cv::Mat &crop_img,\n                         bool use_tensorrt = false,\n                         const int &target_size = 224);\n    };\n    class TenCrop\n    {\n    public:\n        virtual void Run(const cv::Mat &img, std::vector<cv::Mat> &crop_frames,\n                         const int &begin_index,\n                         bool use_tensorrt = false,\n                         const int &target_size = 224);\n    };\n} // namespace PaddleVideo"
        }
    ]
}