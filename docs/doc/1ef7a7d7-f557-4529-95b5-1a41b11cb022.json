{
    "summary": "The code defines ResNetSlowFast and SlowFast models for video recognition and computer vision tasks, respectively, with separate pathways for slow and fast processing using 3D convolutional layers and multi-pathway models.",
    "details": [
        {
            "comment": "Copyright notice and license information for the code. Imports necessary modules, defines function to get convolutional layer initialization parameters, and a function to set batch normalization layer parameters. No actual model or functionality defined yet.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":0-32",
            "content": "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport paddle\nimport paddle.nn.functional as F\nfrom paddle.nn.initializer import KaimingNormal\nfrom ..registry import BACKBONES\nfrom paddlevideo.utils.multigrid import get_norm\nimport sys\nimport numpy as np\nimport paddle.distributed as dist\n# seed random seed\npaddle.framework.seed(0)\n# get init parameters for conv layer\ndef get_conv_init(fan_out):\n    return KaimingNormal(fan_in=fan_out)\ndef get_bn_param_attr(bn_weight=1.0, coeff=0.0):"
        },
        {
            "comment": "This code defines a BottleneckTransform class in PaddleVideo for video models. It performs Tx1x1, 1x3x3, 1x1x1 transformations with variable temporal kernel sizes. The constructor takes in arguments like dim_in, dim_out, temp_kernel_size, stride, and more to configure the transformation layer.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":33-65",
            "content": "    param_attr = paddle.ParamAttr(\n        initializer=paddle.nn.initializer.Constant(bn_weight),\n        regularizer=paddle.regularizer.L2Decay(coeff))\n    return param_attr\n\"\"\"Video models.\"\"\"\nclass BottleneckTransform(paddle.nn.Layer):\n    \"\"\"\n    Bottleneck transformation: Tx1x1, 1x3x3, 1x1x1, where T is the size of\n        temporal kernel.\n    \"\"\"\n    def __init__(self,\n                 dim_in,\n                 dim_out,\n                 temp_kernel_size,\n                 stride,\n                 dim_inner,\n                 num_groups,\n                 stride_1x1=False,\n                 inplace_relu=True,\n                 eps=1e-5,\n                 dilation=1,\n                 norm_module=paddle.nn.BatchNorm3D):\n        \"\"\"\n        Args:\n            dim_in (int): the channel dimensions of the input.\n            dim_out (int): the channel dimension of the output.\n            temp_kernel_size (int): the temporal kernel sizes of the middle\n                convolution in the bottleneck.\n            stride (int): the stride of the bottleneck."
        },
        {
            "comment": "This code defines a class called BottleneckTransform with parameters such as dim_in, dim_out, stride, dim_inner, num_groups, and dilation. It also has attributes like _inplace_relu, _eps, and norm_module for various operations and settings. The _construct method is used to initialize the class with these parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":66-86",
            "content": "            dim_inner (int): the inner dimension of the block.\n            num_groups (int): number of groups for the convolution. num_groups=1\n                is for standard ResNet like networks, and num_groups>1 is for\n                ResNeXt like networks.\n            stride_1x1 (bool): if True, apply stride to 1x1 conv, otherwise\n                apply stride to the 3x3 conv.\n            inplace_relu (bool): if True, calculate the relu on the original\n                input without allocating new memory.\n            eps (float): epsilon for batch norm.\n            dilation (int): size of dilation.\n        \"\"\"\n        super(BottleneckTransform, self).__init__()\n        self.temp_kernel_size = temp_kernel_size\n        self._inplace_relu = inplace_relu\n        self._eps = eps\n        self._stride_1x1 = stride_1x1\n        self.norm_module = norm_module\n        self._construct(dim_in, dim_out, stride, dim_inner, num_groups,\n                        dilation)\n    def _construct(self, dim_in, dim_out, stride, dim_inner, num_groups,"
        },
        {
            "comment": "Defines a Conv3D layer for the ResNet_SlowFast backbone, with specified dimensions and stride. Initializes Conv3D weights using get_conv_init function and includes batch normalization (BN) and ReLU activation layers.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":87-112",
            "content": "                   dilation):\n        str1x1, str3x3 = (stride, 1) if self._stride_1x1 else (1, stride)\n        fan = (dim_inner) * (self.temp_kernel_size * 1 * 1)\n        initializer_tmp = get_conv_init(fan)\n        self.a = paddle.nn.Conv3D(\n            in_channels=dim_in,\n            out_channels=dim_inner,\n            kernel_size=[self.temp_kernel_size, 1, 1],\n            stride=[1, str1x1, str1x1],\n            padding=[int(self.temp_kernel_size // 2), 0, 0],\n            weight_attr=paddle.ParamAttr(initializer=initializer_tmp),\n            bias_attr=False)\n        self.a_bn = self.norm_module(num_features=dim_inner,\n                                     epsilon=self._eps,\n                                     weight_attr=get_bn_param_attr(),\n                                     bias_attr=get_bn_param_attr(bn_weight=0.0))\n        # 1x3x3, BN, ReLU.\n        fan = (dim_inner) * (1 * 3 * 3)\n        initializer_tmp = get_conv_init(fan)\n        self.b = paddle.nn.Conv3D(\n            in_channels=dim_inner,\n            out_channels=dim_inner,"
        },
        {
            "comment": "This code defines a 3D convolutional layer with specific kernel sizes, strides, padding, and grouping. It also includes batch normalization layers for the intermediate and output features. The initializer functions are used to set the weights of each layer, with different initializers for different layers.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":113-138",
            "content": "            kernel_size=[1, 3, 3],\n            stride=[1, str3x3, str3x3],\n            padding=[0, dilation, dilation],\n            groups=num_groups,\n            dilation=[1, dilation, dilation],\n            weight_attr=paddle.ParamAttr(initializer=initializer_tmp),\n            bias_attr=False)\n        self.b_bn = self.norm_module(num_features=dim_inner,\n                                     epsilon=self._eps,\n                                     weight_attr=get_bn_param_attr(),\n                                     bias_attr=get_bn_param_attr(bn_weight=0.0))\n        # 1x1x1, BN.\n        fan = (dim_out) * (1 * 1 * 1)\n        initializer_tmp = get_conv_init(fan)\n        self.c = paddle.nn.Conv3D(\n            in_channels=dim_inner,\n            out_channels=dim_out,\n            kernel_size=[1, 1, 1],\n            stride=[1, 1, 1],\n            padding=[0, 0, 0],\n            weight_attr=paddle.ParamAttr(initializer=initializer_tmp),\n            bias_attr=False)\n        self.c_bn = self.norm_module(\n            num_features=dim_out,"
        },
        {
            "comment": "ResNetSlowFast forward function performs convolutions and Batch Normalization for each branch (2a, 2b, 2c), then applies ReLU activation. ResBlock is a layer implementing residual blocks with specified dimensions, stride, inner dimension, groups, dilation, and normalization method.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":139-179",
            "content": "            epsilon=self._eps,\n            weight_attr=get_bn_param_attr(bn_weight=0.0),\n            bias_attr=get_bn_param_attr(bn_weight=0.0))\n    def forward(self, x):\n        # Branch2a.\n        x = self.a(x)\n        x = self.a_bn(x)\n        x = F.relu(x)\n        # Branch2b.\n        x = self.b(x)\n        x = self.b_bn(x)\n        x = F.relu(x)\n        # Branch2c\n        x = self.c(x)\n        x = self.c_bn(x)\n        return x\nclass ResBlock(paddle.nn.Layer):\n    \"\"\"\n    Residual block.\n    \"\"\"\n    def __init__(self,\n                 dim_in,\n                 dim_out,\n                 temp_kernel_size,\n                 stride,\n                 dim_inner,\n                 num_groups=1,\n                 stride_1x1=False,\n                 inplace_relu=True,\n                 eps=1e-5,\n                 dilation=1,\n                 norm_module=paddle.nn.BatchNorm3D):\n        \"\"\"\n        ResBlock class constructs redisual blocks. More details can be found in:\n            Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.\n            \"Deep residual learning for image recognition.\""
        },
        {
            "comment": "This code defines the arguments for constructing a ResNet bottleneck. It includes parameters for input and output channel dimensions, temporal kernel size, stride, transform function, inner dimension, number of groups for convolution, whether to apply stride to 1x1 or 3x3 conv, inplace_relu flag, and epsilon for batch normalization.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":180-197",
            "content": "            https://arxiv.org/abs/1512.03385\n        Args:\n            dim_in (int): the channel dimensions of the input.\n            dim_out (int): the channel dimension of the output.\n            temp_kernel_size (int): the temporal kernel sizes of the middle\n                convolution in the bottleneck.\n            stride (int): the stride of the bottleneck.\n            trans_func (string): transform function to be used to construct the\n                bottleneck.\n            dim_inner (int): the inner dimension of the block.\n            num_groups (int): number of groups for the convolution. num_groups=1\n                is for standard ResNet like networks, and num_groups>1 is for\n                ResNeXt like networks.\n            stride_1x1 (bool): if True, apply stride to 1x1 conv, otherwise\n                apply stride to the 3x3 conv.\n            inplace_relu (bool): calculate the relu on the original input\n                without allocating new memory.\n            eps (float): epsilon for batch norm."
        },
        {
            "comment": "The code defines a ResBlock class, which is a residual block used in deep neural networks. It initializes the block with input and output dimensions, kernel size, stride, inner dimension, number of groups, and skip connection settings. The constructor method _construct creates a 3D convolution layer for the skip connection if there is a change in dimensions or stride.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":198-236",
            "content": "            dilation (int): size of dilation.\n        \"\"\"\n        super(ResBlock, self).__init__()\n        self._inplace_relu = inplace_relu\n        self._eps = eps\n        self.norm_module = norm_module\n        self._construct(\n            dim_in,\n            dim_out,\n            temp_kernel_size,\n            stride,\n            dim_inner,\n            num_groups,\n            stride_1x1,\n            inplace_relu,\n            dilation,\n        )\n    def _construct(\n        self,\n        dim_in,\n        dim_out,\n        temp_kernel_size,\n        stride,\n        dim_inner,\n        num_groups,\n        stride_1x1,\n        inplace_relu,\n        dilation,\n    ):\n        # Use skip connection with projection if dim or res change.\n        if (dim_in != dim_out) or (stride != 1):\n            fan = (dim_out) * (1 * 1 * 1)\n            initializer_tmp = get_conv_init(fan)\n            self.branch1 = paddle.nn.Conv3D(\n                in_channels=dim_in,\n                out_channels=dim_out,\n                kernel_size=1,\n                stride=[1, stride, stride],"
        },
        {
            "comment": "This code defines a ResNet SlowFast backbone model. It includes convolution layers, batch normalization layers, and BottleneckTransform modules. The forward function checks if the \"branch1\" attribute exists to handle different stages of the network.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":237-259",
            "content": "                padding=0,\n                weight_attr=paddle.ParamAttr(initializer=initializer_tmp),\n                bias_attr=False,\n                dilation=1)\n            self.branch1_bn = self.norm_module(\n                num_features=dim_out,\n                epsilon=self._eps,\n                weight_attr=get_bn_param_attr(),\n                bias_attr=get_bn_param_attr(bn_weight=0.0))\n        self.branch2 = BottleneckTransform(dim_in,\n                                           dim_out,\n                                           temp_kernel_size,\n                                           stride,\n                                           dim_inner,\n                                           num_groups,\n                                           stride_1x1=stride_1x1,\n                                           inplace_relu=inplace_relu,\n                                           dilation=dilation,\n                                           norm_module=self.norm_module)\n    def forward(self, x):\n        if hasattr(self, \"branch1\"):"
        },
        {
            "comment": "The code defines a ResNet stage for multi-pathway (SlowFast) cases in video recognition. It takes one or more tensors as input and applies branching to separate paths with different kernel sizes. The output is added together, passed through ReLU activation, and returned. This stage supports 1x1 stride option and uses BatchNorm3D for normalization.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":260-293",
            "content": "            x1 = self.branch1(x)\n            x1 = self.branch1_bn(x1)\n            x2 = self.branch2(x)\n            x = paddle.add(x=x1, y=x2)\n        else:\n            x2 = self.branch2(x)\n            x = paddle.add(x=x, y=x2)\n        x = F.relu(x)\n        return x\nclass ResStage(paddle.nn.Layer):\n    \"\"\"\n    Stage of 3D ResNet. It expects to have one or more tensors as input for\n        multi-pathway (SlowFast) cases.  More details can be found here:\n        Christoph Feichtenhofer, Haoqi Fan, Jitendra Malik, and Kaiming He.\n        \"Slowfast networks for video recognition.\"\n        https://arxiv.org/pdf/1812.03982.pdf\n    \"\"\"\n    def __init__(self,\n                 dim_in,\n                 dim_out,\n                 stride,\n                 temp_kernel_sizes,\n                 num_blocks,\n                 dim_inner,\n                 num_groups,\n                 num_block_temp_kernel,\n                 dilation,\n                 stride_1x1=False,\n                 inplace_relu=True,\n                 norm_module=paddle.nn.BatchNorm3D):"
        },
        {
            "comment": "The ResStage class constructor takes several lists as arguments to build p streams of pathways, controlling input and output dimensions, temporal kernel sizes, strides, and block numbers for each pathway.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":294-311",
            "content": "        \"\"\"\n        The `__init__` method of any subclass should also contain these arguments.\n        ResStage builds p streams, where p can be greater or equal to one.\n        Args:\n            dim_in (list): list of p the channel dimensions of the input.\n                Different channel dimensions control the input dimension of\n                different pathways.\n            dim_out (list): list of p the channel dimensions of the output.\n                Different channel dimensions control the input dimension of\n                different pathways.\n            temp_kernel_sizes (list): list of the p temporal kernel sizes of the\n                convolution in the bottleneck. Different temp_kernel_sizes\n                control different pathway.\n            stride (list): list of the p strides of the bottleneck. Different\n                stride control different pathway.\n            num_blocks (list): list of p numbers of blocks for each of the\n                pathway.\n            dim_inner (list): list of the p inner channel dimensions of the"
        },
        {
            "comment": "This code defines a ResStage class for a residual block. It takes input dimensions and channel dimensions as parameters, and initializes the number of blocks and temporal kernel sizes based on these inputs. The code also ensures that the provided number of block temporary kernel sizes does not exceed the specified number of blocks.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":312-329",
            "content": "                input. Different channel dimensions control the input dimension\n                of different pathways.\n            num_groups (list): list of number of p groups for the convolution.\n                num_groups=1 is for standard ResNet like networks, and\n                num_groups>1 is for ResNeXt like networks.\n            num_block_temp_kernel (list): extent the temp_kernel_sizes to\n                num_block_temp_kernel blocks, then fill temporal kernel size\n                of 1 for the rest of the layers.\n            dilation (list): size of dilation for each pathway.\n        \"\"\"\n        super(ResStage, self).__init__()\n        assert all((num_block_temp_kernel[i] <= num_blocks[i]\n                    for i in range(len(temp_kernel_sizes))))\n        self.num_blocks = num_blocks\n        self.temp_kernel_sizes = [\n            (temp_kernel_sizes[i] * num_blocks[i])[:num_block_temp_kernel[i]] +\n            [1] * (num_blocks[i] - num_block_temp_kernel[i])\n            for i in range(len(temp_kernel_sizes))"
        },
        {
            "comment": "The code initializes a ResNet SlowFast model by creating instances of blocks based on given parameters. It ensures that the input and output dimensions are correctly set, creates the desired number of pathways, and applies the specified norm module. The constructor then iterates over each pathway and block, creating ResBlock instances with appropriate sizes and configurations.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":330-371",
            "content": "        ]\n        assert (len({\n            len(dim_in),\n            len(dim_out),\n            len(temp_kernel_sizes),\n            len(stride),\n            len(num_blocks),\n            len(dim_inner),\n            len(num_groups),\n            len(num_block_temp_kernel),\n        }) == 1)\n        self.num_pathways = len(self.num_blocks)\n        self.norm_module = norm_module\n        self._construct(\n            dim_in,\n            dim_out,\n            stride,\n            dim_inner,\n            num_groups,\n            stride_1x1,\n            inplace_relu,\n            dilation,\n        )\n    def _construct(\n        self,\n        dim_in,\n        dim_out,\n        stride,\n        dim_inner,\n        num_groups,\n        stride_1x1,\n        inplace_relu,\n        dilation,\n    ):\n        for pathway in range(self.num_pathways):\n            for i in range(self.num_blocks[pathway]):\n                res_block = ResBlock(\n                    dim_in[pathway] if i == 0 else dim_out[pathway],\n                    dim_out[pathway],\n                    self.temp_kernel_sizes[pathway][i],"
        },
        {
            "comment": "This code defines a ResNet backbone with slow-fast pathways, which includes residual blocks and basic stem modules. The `forward` method processes inputs from each pathway and returns the outputs as a list. It uses getattr to access the correct residual block module for each iteration in each pathway.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":372-403",
            "content": "                    stride[pathway] if i == 0 else 1,\n                    dim_inner[pathway],\n                    num_groups[pathway],\n                    stride_1x1=stride_1x1,\n                    inplace_relu=inplace_relu,\n                    dilation=dilation[pathway],\n                    norm_module=self.norm_module)\n                self.add_sublayer(\"pathway{}_res{}\".format(pathway, i),\n                                  res_block)\n    def forward(self, inputs):\n        output = []\n        for pathway in range(self.num_pathways):\n            x = inputs[pathway]\n            for i in range(self.num_blocks[pathway]):\n                m = getattr(self, \"pathway{}_res{}\".format(pathway, i))\n                x = m(x)\n            output.append(x)\n        return output\nclass ResNetBasicStem(paddle.nn.Layer):\n    \"\"\"\n    ResNe(X)t 3D stem module.\n    Performs spatiotemporal Convolution, BN, and Relu following by a\n        spatiotemporal pooling.\n    \"\"\"\n    def __init__(self,\n                 dim_in,\n                 dim_out,"
        },
        {
            "comment": "This code defines a class for ResNet basic stem module with options to specify kernel, stride, padding, and batch normalization. It initializes the Conv3D layer and BatchNorm3D module based on the specified parameters. The constructor also calls the _construct_stem method to further initialize the Conv3D layer and BatchNorm3D module.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":404-431",
            "content": "                 kernel,\n                 stride,\n                 padding,\n                 eps=1e-5,\n                 norm_module=paddle.nn.BatchNorm3D):\n        super(ResNetBasicStem, self).__init__()\n        self.kernel = kernel\n        self.stride = stride\n        self.padding = padding\n        self.eps = eps\n        self.norm_module = norm_module\n        self._construct_stem(dim_in, dim_out)\n    def _construct_stem(self, dim_in, dim_out):\n        fan = (dim_out) * (self.kernel[0] * self.kernel[1] * self.kernel[2])\n        initializer_tmp = get_conv_init(fan)\n        self._conv = paddle.nn.Conv3D(\n            in_channels=dim_in,\n            out_channels=dim_out,\n            kernel_size=self.kernel,\n            stride=self.stride,\n            padding=self.padding,\n            weight_attr=paddle.ParamAttr(initializer=initializer_tmp),\n            bias_attr=False)\n        self._bn = self.norm_module(num_features=dim_out,\n                                    epsilon=self.eps,\n                                    weight_attr=get_bn_param_attr(),"
        },
        {
            "comment": "This code defines a 3D stem module for video input. It consists of convolutional, batch normalization, ReLU, and max pooling operations applied to both slow and fast pathways. The dim_in, dim_out, kernel, stride, padding parameters are used to configure the specifics of these operations. Epsilon (eps) is a small value for numerical stability, and norm_module is the batch normalization module being used.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":432-465",
            "content": "                                    bias_attr=get_bn_param_attr(bn_weight=0.0))\n    def forward(self, x):\n        x = self._conv(x)\n        x = self._bn(x)\n        x = F.relu(x)\n        x = F.max_pool3d(x=x,\n                         kernel_size=[1, 3, 3],\n                         stride=[1, 2, 2],\n                         padding=[0, 1, 1],\n                         data_format=\"NCDHW\")\n        return x\nclass VideoModelStem(paddle.nn.Layer):\n    \"\"\"\n    Video 3D stem module. Provides stem operations of Conv, BN, ReLU, MaxPool\n    on input data tensor for slow and fast pathways.\n    \"\"\"\n    def __init__(self,\n                 dim_in,\n                 dim_out,\n                 kernel,\n                 stride,\n                 padding,\n                 eps=1e-5,\n                 norm_module=paddle.nn.BatchNorm3D):\n        \"\"\"\n        Args:\n            dim_in (list): the list of channel dimensions of the inputs.\n            dim_out (list): the output dimension of the convolution in the stem\n                layer.\n            kernel (list): the kernels' size of the convolutions in the stem"
        },
        {
            "comment": "The code defines a VideoModelStem class with parameters for input and output dimensions, temporal kernel size, stride, padding, epsilon for batch norm, and the normalization module. It checks for consistent dimensions and initializes instance variables before calling a constructor method.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":466-491",
            "content": "                layers. Temporal kernel size, height kernel size, width kernel\n                size in order.\n            stride (list): the stride sizes of the convolutions in the stem\n                layer. Temporal kernel stride, height kernel size, width kernel\n                size in order.\n            padding (list): the paddings' sizes of the convolutions in the stem\n                layer. Temporal padding size, height padding size, width padding\n                size in order.\n            eps (float): epsilon for batch norm.\n        \"\"\"\n        super(VideoModelStem, self).__init__()\n        assert (len({\n            len(dim_in),\n            len(dim_out),\n            len(kernel),\n            len(stride),\n            len(padding),\n        }) == 1), \"Input pathway dimensions are not consistent.\"\n        self.num_pathways = len(dim_in)\n        self.kernel = kernel\n        self.stride = stride\n        self.padding = padding\n        self.eps = eps\n        self.norm_module = norm_module\n        self._construct_stem(dim_in, dim_out)"
        },
        {
            "comment": "This code defines a class that constructs a stem for each pathway in ResNet, then applies it to the input tensors. The FuseFastToSlow class fuses information from the Fast pathway to the Slow pathway and returns the fused tensors in order.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":493-517",
            "content": "    def _construct_stem(self, dim_in, dim_out):\n        for pathway in range(len(dim_in)):\n            stem = ResNetBasicStem(dim_in[pathway], dim_out[pathway],\n                                   self.kernel[pathway], self.stride[pathway],\n                                   self.padding[pathway], self.eps,\n                                   self.norm_module)\n            self.add_sublayer(\"pathway{}_stem\".format(pathway), stem)\n    def forward(self, x):\n        assert (len(x) == self.num_pathways\n                ), \"Input tensor does not contain {} pathway\".format(\n                    self.num_pathways)\n        for pathway in range(len(x)):\n            m = getattr(self, \"pathway{}_stem\".format(pathway))\n            x[pathway] = m(x[pathway])\n        return x\nclass FuseFastToSlow(paddle.nn.Layer):\n    \"\"\"\n    Fuses the information from the Fast pathway to the Slow pathway. Given the\n    tensors from Slow pathway and Fast pathway, fuse information from Fast to\n    Slow, then return the fused tensors from Slow and Fast pathway in order."
        },
        {
            "comment": "This function initializes the FuseFastToSlow class, which takes in dimensions, fusion parameters, and other options. It sets up a convolutional layer to fuse information from the Fast pathway to the Slow pathway. It uses a specified channel ratio and kernel size for the convolution operation. The epsilon parameter is used for batch normalization.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":518-543",
            "content": "    \"\"\"\n    def __init__(self,\n                 dim_in,\n                 fusion_conv_channel_ratio,\n                 fusion_kernel,\n                 alpha,\n                 fuse_bn_relu=1,\n                 eps=1e-5,\n                 norm_module=paddle.nn.BatchNorm3D):\n        \"\"\"\n        Args:\n            dim_in (int): the channel dimension of the input.\n            fusion_conv_channel_ratio (int): channel ratio for the convolution\n                used to fuse from Fast pathway to Slow pathway.\n            fusion_kernel (int): kernel size of the convolution used to fuse\n                from Fast pathway to Slow pathway.\n            alpha (int): the frame rate ratio between the Fast and Slow pathway.\n            eps (float): epsilon for batch norm.\n        \"\"\"\n        super(FuseFastToSlow, self).__init__()\n        self.fuse_bn_relu = fuse_bn_relu\n        fan = (dim_in * fusion_conv_channel_ratio) * (fusion_kernel * 1 * 1)\n        initializer_tmp = get_conv_init(fan)\n        self._conv_f2s = paddle.nn.Conv3D(\n            in_channels=dim_in,"
        },
        {
            "comment": "This code defines a ResNetSlowFast model in PaddlePaddle, which is a variation of the SlowFast network. It includes a fusion convolution layer followed by batch normalization and ReLU activation if the fuse_bn_relu flag is set to True. The forward function performs concatenation of the input features and returns the result. This model is registered under BACKBONES for future use.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":544-571",
            "content": "            out_channels=dim_in * fusion_conv_channel_ratio,\n            kernel_size=[fusion_kernel, 1, 1],\n            stride=[alpha, 1, 1],\n            padding=[fusion_kernel // 2, 0, 0],\n            weight_attr=paddle.ParamAttr(initializer=initializer_tmp),\n            bias_attr=False)\n        self._bn = norm_module(num_features=dim_in * fusion_conv_channel_ratio,\n                               epsilon=eps,\n                               weight_attr=get_bn_param_attr(),\n                               bias_attr=get_bn_param_attr(bn_weight=0.0))\n    def forward(self, x):\n        x_s = x[0]\n        x_f = x[1]\n        fuse = self._conv_f2s(x_f)\n        #  TODO: For AVA, set fuse_bn_relu=1, check mAP's improve.\n        if self.fuse_bn_relu:\n            fuse = self._bn(fuse)\n            fuse = F.relu(fuse)\n        x_s_fuse = paddle.concat(x=[x_s, fuse], axis=1, name=None)\n        return [x_s_fuse, x_f]\n@BACKBONES.register()\nclass ResNetSlowFast(paddle.nn.Layer):\n    \"\"\"\n    SlowFast model builder for SlowFast network."
        },
        {
            "comment": "This code defines a class ResNetSlowFast, which is a variant of the ResNet architecture with slow and fast paths for video recognition. It takes various parameters such as alpha, beta, bn_norm_type, etc., to build the network. The class also includes methods for initializing the model with the given parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":573-606",
            "content": "    Christoph Feichtenhofer, Haoqi Fan, Jitendra Malik, and Kaiming He.\n    \"Slowfast networks for video recognition.\"\n    https://arxiv.org/pdf/1812.03982.pdf\n    \"\"\"\n    def __init__(\n        self,\n        alpha,\n        beta,\n        bn_norm_type=\"batchnorm\",\n        bn_num_splits=1,\n        num_pathways=2,\n        depth=50,\n        num_groups=1,\n        input_channel_num=[3, 3],\n        width_per_group=64,\n        fusion_conv_channel_ratio=2,\n        fusion_kernel_sz=7,  #5?\n        pool_size_ratio=[[1, 1, 1], [1, 1, 1]],\n        fuse_bn_relu = 1,\n        spatial_strides = [[1, 1], [2, 2], [2, 2], [2, 2]],\n        use_pool_af_s2 = 1,\n    ):\n        \"\"\"\n        Args:\n            cfg (CfgNode): model building configs, details are in the\n                comments of the config file.\n        \"\"\"\n        super(ResNetSlowFast, self).__init__()\n        self.alpha = alpha  #8\n        self.beta = beta  #8\n        self.norm_module = get_norm(bn_norm_type, bn_num_splits)\n        self.num_pathways = num_pathways\n        self.depth = depth"
        },
        {
            "comment": "This code defines a SlowFast model for computer vision tasks. It takes in several parameters including the number of groups, input channel number, and others. The construct_network function builds the SlowFast model with separate pathways for Slow and Fast pathways using different temporal kernels.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":607-631",
            "content": "        self.num_groups = num_groups\n        self.input_channel_num = input_channel_num\n        self.width_per_group = width_per_group\n        self.fusion_conv_channel_ratio = fusion_conv_channel_ratio\n        self.fusion_kernel_sz = fusion_kernel_sz  # NOTE: modify to 7 in 8*8, 5 in old implement\n        self.pool_size_ratio = pool_size_ratio\n        self.fuse_bn_relu = fuse_bn_relu\n        self.spatial_strides = spatial_strides\n        self.use_pool_af_s2 = use_pool_af_s2\n        self._construct_network()\n    def _construct_network(self):\n        \"\"\"\n        Builds a SlowFast model.\n        The first pathway is the Slow pathway\n        and the second pathway is the Fast pathway.\n        Args:\n            cfg (CfgNode): model building configs, details are in the\n                comments of the config file.\n        \"\"\"\n        temp_kernel = [\n            [[1], [5]],  # conv1 temporal kernel for slow and fast pathway.\n            [[1], [3]],  # res2 temporal kernel for slow and fast pathway.\n            [[1], [3]],  # res3 temporal kernel for slow and fast pathway."
        },
        {
            "comment": "The code initializes a SlowFast ResNet backbone model. It defines temporal kernels for res4 and res5 pathways, creates a VideoModelStem layer with specific dimensions and parameters, and a FuseFastToSlow layer for fusion. The code also sets the model stage depth according to the chosen depth (50, 101, or 152).",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":632-656",
            "content": "            [[3], [3]],  # res4 temporal kernel for slow and fast pathway.\n            [[3], [3]],\n        ]  # res5 temporal kernel for slow and fast pathway.\n        self.s1 = VideoModelStem(\n            dim_in=self.input_channel_num,\n            dim_out=[self.width_per_group, self.width_per_group // self.beta],\n            kernel=[temp_kernel[0][0] + [7, 7], temp_kernel[0][1] + [7, 7]],\n            stride=[[1, 2, 2]] * 2,\n            padding=[\n                [temp_kernel[0][0][0] // 2, 3, 3],\n                [temp_kernel[0][1][0] // 2, 3, 3],\n            ],\n            norm_module=self.norm_module)\n        self.s1_fuse = FuseFastToSlow(\n            dim_in=self.width_per_group // self.beta,\n            fusion_conv_channel_ratio=self.fusion_conv_channel_ratio,\n            fusion_kernel=self.fusion_kernel_sz,\n            alpha=self.alpha,\n            norm_module=self.norm_module,\n            fuse_bn_relu=self.fuse_bn_relu)\n        # ResNet backbone\n        MODEL_STAGE_DEPTH = {50: (3, 4, 6, 3)}\n        (d2, d3, d4, d5) = MODEL_STAGE_DEPTH[self.depth]"
        },
        {
            "comment": "This code defines a ResStage, which is a stage in the ResNet SlowFast model. It sets the dimensions and parameters for this stage including input and output widths, kernel sizes, and strides. The code also specifies temporary kernel sizes and spatial strides for this particular stage of the model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":658-677",
            "content": "        num_block_temp_kernel = [[3, 3], [4, 4], [6, 6], [3, 3]]\n        spatial_dilations = [[1, 1], [1, 1], [1, 1], [1, 1]]\n        spatial_strides = self.spatial_strides\n        #spatial_strides = [[1, 1], [2, 2], [2, 2], [2, 2]]\n        #spatial_strides = [[1, 1], [2, 2], [2, 2], [1, 1]] #TODO:check which value is FAIR's impliment\n        out_dim_ratio = self.beta // self.fusion_conv_channel_ratio  #4\n        dim_inner = self.width_per_group * self.num_groups  #64\n        self.s2 = ResStage(dim_in=[\n            self.width_per_group + self.width_per_group // out_dim_ratio,\n            self.width_per_group // self.beta,\n        ],\n                           dim_out=[\n                               self.width_per_group * 4,\n                               self.width_per_group * 4 // self.beta,\n                           ],\n                           dim_inner=[dim_inner, dim_inner // self.beta],\n                           temp_kernel_sizes=temp_kernel[1],\n                           stride=spatial_strides[0],"
        },
        {
            "comment": "The code defines a resnet_slowfast model with two main components: s1 and s3. The s1 component consists of three branches, with the first two having 2x repeat_num_body blocks each, while the third has (2*repeat_num_body + 1) blocks. It also includes norm_module and spatial_dilations for the first branch. The s3 component contains a ResStage layer. The model uses parameters such as width_per_group, out_dim_ratio, dim_inner, repeat_num_body, alpha, beta, fusion_conv_channel_ratio, fusion_kernel_sz, norm_module, and fuse_bn_relu.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":678-703",
            "content": "                           num_blocks=[d2] * 2,\n                           num_groups=[self.num_groups] * 2,\n                           num_block_temp_kernel=num_block_temp_kernel[0],\n                           dilation=spatial_dilations[0],\n                           norm_module=self.norm_module)\n        self.s2_fuse = FuseFastToSlow(\n            dim_in=self.width_per_group * 4 // self.beta,\n            fusion_conv_channel_ratio=self.fusion_conv_channel_ratio,\n            fusion_kernel=self.fusion_kernel_sz,\n            alpha=self.alpha,\n            norm_module=self.norm_module,\n            fuse_bn_relu=self.fuse_bn_relu,\n        )\n        self.s3 = ResStage(\n            dim_in=[\n                self.width_per_group * 4 +\n                self.width_per_group * 4 // out_dim_ratio,\n                self.width_per_group * 4 // self.beta,\n            ],\n            dim_out=[\n                self.width_per_group * 8,\n                self.width_per_group * 8 // self.beta,\n            ],\n            dim_inner=[dim_inner * 2, dim_inner * 2 // self.beta],"
        },
        {
            "comment": "The code initializes and defines different layers for the ResNet SlowFast model. It includes operations such as creating convolutional layers, fusing fast to slow features, and defining a stage layer with specified input and output dimensions. The alpha, fusion_kernel_sz, out_dim_ratio, beta, dim_inner values are used to control the specifics of these operations.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":704-732",
            "content": "            temp_kernel_sizes=temp_kernel[2],\n            stride=spatial_strides[1],\n            num_blocks=[d3] * 2,\n            num_groups=[self.num_groups] * 2,\n            num_block_temp_kernel=num_block_temp_kernel[1],\n            dilation=spatial_dilations[1],\n            norm_module=self.norm_module,\n        )\n        self.s3_fuse = FuseFastToSlow(\n            dim_in=self.width_per_group * 8 // self.beta,\n            fusion_conv_channel_ratio=self.fusion_conv_channel_ratio,\n            fusion_kernel=self.fusion_kernel_sz,\n            alpha=self.alpha,\n            norm_module=self.norm_module,\n            fuse_bn_relu=self.fuse_bn_relu,\n        )\n        self.s4 = ResStage(\n            dim_in=[\n                self.width_per_group * 8 +\n                self.width_per_group * 8 // out_dim_ratio,\n                self.width_per_group * 8 // self.beta,\n            ],\n            dim_out=[\n                self.width_per_group * 16,\n                self.width_per_group * 16 // self.beta,\n            ],\n            dim_inner=[dim_inner * 4, dim_inner * 4 // self.beta],"
        },
        {
            "comment": "The code defines the ResStage and FuseFastToSlow modules for a ResNet SlowFast model. It initializes these modules with specific dimensions and parameters, such as number of channels, fusion kernel size, alpha value, and dilation rates. These modules are used to extract features from the input and fuse them together for further processing in the network.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":733-761",
            "content": "            temp_kernel_sizes=temp_kernel[3],\n            stride=spatial_strides[2],\n            num_blocks=[d4] * 2,\n            num_groups=[self.num_groups] * 2,\n            num_block_temp_kernel=num_block_temp_kernel[2],\n            dilation=spatial_dilations[2],\n            norm_module=self.norm_module,\n        )\n        self.s4_fuse = FuseFastToSlow(\n            dim_in=self.width_per_group * 16 // self.beta,\n            fusion_conv_channel_ratio=self.fusion_conv_channel_ratio,\n            fusion_kernel=self.fusion_kernel_sz,\n            alpha=self.alpha,\n            norm_module=self.norm_module,\n            fuse_bn_relu=self.fuse_bn_relu,\n        )\n        self.s5 = ResStage(\n            dim_in=[\n                self.width_per_group * 16 +\n                self.width_per_group * 16 // out_dim_ratio,\n                self.width_per_group * 16 // self.beta,\n            ],\n            dim_out=[\n                self.width_per_group * 32,\n                self.width_per_group * 32 // self.beta,\n            ],\n            dim_inner=[dim_inner * 8, dim_inner * 8 // self.beta],"
        },
        {
            "comment": "This code defines a ResNet slowfast model with specified parameters, initializes the weights, and forwards the input data. It also includes an optional max-pooling operation for one of its stages (s2) depending on a flag value.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":762-787",
            "content": "            temp_kernel_sizes=temp_kernel[4],\n            stride=spatial_strides[3],\n            num_blocks=[d5] * 2,\n            num_groups=[self.num_groups] * 2,\n            num_block_temp_kernel=num_block_temp_kernel[3],\n            dilation=spatial_dilations[3],\n            norm_module=self.norm_module,\n        )\n    def init_weights(self):\n        pass\n    def forward(self, x):\n        x = self.s1(x)  #VideoModelStem\n        x = self.s1_fuse(x)  #FuseFastToSlow\n        x = self.s2(x)  #ResStage\n        x = self.s2_fuse(x)\n        #  TODO: For AVA, set use_pool_af_s2=1, check mAP's improve.\n        if self.use_pool_af_s2:\n            for pathway in range(self.num_pathways):\n                x[pathway] = F.max_pool3d(x=x[pathway],\n                                          kernel_size=self.pool_size_ratio[pathway],\n                                          stride=self.pool_size_ratio[pathway],\n                                          padding=[0, 0, 0],\n                                          data_format=\"NCDHW\")"
        },
        {
            "comment": "This code snippet represents the final segment of a neural network model. It processes input data (x) through four sequential layers (s3, s4, and s5), then fuses their outputs before returning the result as output. Each layer is likely responsible for feature extraction or transformation at different levels of the network's architecture.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet_slowfast.py\":789-794",
            "content": "        x = self.s3(x)\n        x = self.s3_fuse(x)\n        x = self.s4(x)\n        x = self.s4_fuse(x)\n        x = self.s5(x)\n        return x"
        }
    ]
}