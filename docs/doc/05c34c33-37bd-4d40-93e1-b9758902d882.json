{
    "summary": "This code defines functions for setting up imports, parsing command line arguments, and exporting PaddleVideo models. It includes model building, loading pretrained parameters, evaluating the model, providing input specifications, converting to static, saving, and printing saved model location.",
    "details": [
        {
            "comment": "This code snippet is the first 31 lines of the \"export_model.py\" file in PaddleVideo's tools directory. It sets up imports and defines a function parse_args(). This function uses argparse to create an argument parser for the script. The script seems to be part of a model exporting tool designed for PaddleVideo, possibly used for command line arguments.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":0-31",
            "content": "# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport argparse\nimport os\nimport os.path as osp\nimport sys\nimport paddle\nfrom paddle.jit import to_static\nfrom paddle.static import InputSpec\n__dir__ = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(os.path.abspath(os.path.join(__dir__, '../')))\nfrom paddlevideo.modeling.builder import build_model\nfrom paddlevideo.utils import get_config\ndef parse_args():\n    parser = argparse.ArgumentParser(\"PaddleVideo export model script\")"
        },
        {
            "comment": "This code block is parsing command line arguments to specify the config file path, pre-trained parameters path, override options, and output path for exporting a model. The exported files will include pdiparams and pdmodel.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":32-56",
            "content": "    parser.add_argument('-c',\n                        '--config',\n                        type=str,\n                        default='configs/example.yaml',\n                        help='config file path')\n    parser.add_argument('--override',\n                        action='append',\n                        default=[],\n                        help='config options to be overridden')\n    parser.add_argument(\"-p\",\n                        \"--pretrained_params\",\n                        default='./best.pdparams',\n                        type=str,\n                        help='params path')\n    parser.add_argument(\"-o\",\n                        \"--output_path\",\n                        type=str,\n                        default=\"./inference\",\n                        help='output path')\n    parser.add_argument('--save_name',\n                        type=str,\n                        default=None,\n                        help='specify the exported inference \\\n                             files(pdiparams and pdmodel) name,\\"
        },
        {
            "comment": "This code appears to be involved in model exporting and configuration trimming. It defines three functions: \"export_model\" parses command line arguments, \"trim_config\" removes unused or unnecessary attributes from the configuration, and \"get_input_spec\" sets the input specification based on the given model name. The code seems to be a part of PaddleVideo library and involves several specific models such as TSM, MoViNet, ppTSM, and ppTSMv2.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":57-86",
            "content": "                             only used in TIPC')\n    return parser.parse_args()\ndef trim_config(cfg):\n    \"\"\"\n    Reuse the trainging config will bring useless attributes, such as: backbone.pretrained model.\n    and some build phase attributes should be overrided, such as: backbone.num_seg.\n    Trim it here.\n    \"\"\"\n    model_name = cfg.model_name\n    if cfg.MODEL.get('backbone') and cfg.MODEL.backbone.get('pretrained'):\n        cfg.MODEL.backbone.pretrained = \"\"  # not ued when inference\n    # for distillation\n    if cfg.MODEL.get('models'):\n        if cfg.MODEL.models[0]['Teacher']['backbone'].get('pretrained'):\n            cfg.MODEL.models[0]['Teacher']['backbone']['pretrained'] = \"\"\n        if cfg.MODEL.models[1]['Student']['backbone'].get('pretrained'):\n            cfg.MODEL.models[1]['Student']['backbone']['pretrained'] = \"\"\n    return cfg, model_name\ndef get_input_spec(cfg, model_name):\n    if model_name in ['ppTSM', 'TSM', 'MoViNet', 'ppTSMv2']:\n        input_spec = [[\n            InputSpec(\n                shape=[None, cfg.num_seg, 3, cfg.target_size, cfg.target_size],"
        },
        {
            "comment": "The code snippet defines different input specifications based on the model name. It checks the model name and sets the shape and dtype of the input accordingly, handling various models such as 'PaddleVideo', 'TokenShiftVisionTransformer', 'TSN', 'ppTSN', 'BMN', 'TimeSformer', and 'ppTimeSformer'. The input specifications define the dimensions for inputs like number of frames, number of segments, channels, and target size.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":87-116",
            "content": "                dtype='float32'),\n        ]]\n    elif model_name in ['TokenShiftVisionTransformer']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, 3, cfg.num_seg * 3, cfg.target_size, cfg.target_size\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['TSN', 'ppTSN']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, cfg.num_seg * 10, 3, cfg.target_size, cfg.target_size\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['BMN']:\n        input_spec = [[\n            InputSpec(shape=[None, cfg.feat_dim, cfg.tscale],\n                      dtype='float32',\n                      name='feat_input'),\n        ]]\n    elif model_name in ['TimeSformer', 'ppTimeSformer']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, 3, cfg.num_seg * 3, cfg.target_size, cfg.target_size\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['VideoSwin']:"
        },
        {
            "comment": "The code is defining input specifications for different model names in the PaddleVideo tool. It uses InputSpec to specify the shape and data type of inputs for each model, with varying numbers of inputs based on the model's requirements (e.g., RGB data, audio data, etc.). This allows the export_model function to handle various models appropriately.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":117-142",
            "content": "        input_spec = [[\n            InputSpec(shape=[\n                None, 3, cfg.num_seg * cfg.seg_len * 1, cfg.target_size,\n                cfg.target_size\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['VideoSwin_TableTennis']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, 3, cfg.num_seg * cfg.seg_len * 3, cfg.target_size,\n                cfg.target_size\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['AttentionLSTM']:\n        input_spec = [[\n            InputSpec(shape=[None, cfg.embedding_size, cfg.feature_dims[0]],\n                      dtype='float32'),  # for rgb_data\n            InputSpec(shape=[\n                None,\n            ], dtype='int64'),  # for rgb_len\n            InputSpec(shape=[None, cfg.embedding_size, cfg.feature_dims[0]],\n                      dtype='float32'),  # for rgb_mask\n            InputSpec(shape=[None, cfg.embedding_size, cfg.feature_dims[1]],\n                      dtype='float32'),  # for audio_data"
        },
        {
            "comment": "This code snippet defines input specifications for different models used in the PaddleVideo framework. It determines the shape and data type of inputs based on the model name provided, such as audio data for models like ResNet50, SlowFast, and temporal graph convolutional networks (TGCN) models like STGCN, AGCN, and CTRGCN. The shapes account for variables like number of frames, window size, and feature dimensions specific to each model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":143-171",
            "content": "            InputSpec(shape=[\n                None,\n            ], dtype='int64'),  # for audio_len\n            InputSpec(shape=[None, cfg.embedding_size, cfg.feature_dims[1]],\n                      dtype='float32'),  # for audio_mask\n        ]]\n    elif model_name in ['SlowFast']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, 3, cfg.num_frames // cfg.alpha, cfg.target_size,\n                cfg.target_size\n            ],\n                      dtype='float32',\n                      name='slow_input'),\n            InputSpec(shape=[\n                None, 3, cfg.num_frames, cfg.target_size, cfg.target_size\n            ],\n                      dtype='float32',\n                      name='fast_input'),\n        ]]\n    elif model_name in ['STGCN', 'AGCN', 'CTRGCN']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, cfg.num_channels, cfg.window_size, cfg.vertex_nums,\n                cfg.person_nums\n            ],\n                      dtype='float32'),\n        ]]\n    # \u7531\u4e8e\u5728\u6a21\u578b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u5230\u7b2c\u4e00\u7ef4\u4e58human\u4e2a\u6570(N*M), \u6240\u4ee5\u8fd9\u91cc\u75281\u4f5c\u4e3ashape"
        },
        {
            "comment": "The code defines different input specifications for various model names. It handles models like AGCN2s, TransNetV2, MSTCN, ASRF, ADDs, and AVA_SlowFast_FastRcnn by specifying the shape of the input data and its data type ('float32'). The shapes are defined according to the specific model's input requirements.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":172-203",
            "content": "    elif model_name in ['AGCN2s']:\n        input_spec = [[\n            InputSpec(shape=[\n                1, cfg.num_channels, cfg.window_size, cfg.vertex_nums,\n                cfg.person_nums\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['TransNetV2']:\n        input_spec = [[\n            InputSpec(shape=[\n                None,\n                cfg.num_frames,\n                cfg.height,\n                cfg.width,\n                cfg.num_channels,\n            ],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['MSTCN', 'ASRF']:\n        input_spec = [[\n            InputSpec(shape=[None, cfg.num_channels, None], dtype='float32'),\n        ]]\n    elif model_name in ['ADDS']:\n        input_spec = [[\n            InputSpec(shape=[None, cfg.num_channels, cfg.height, cfg.width],\n                      dtype='float32'),\n        ]]\n    elif model_name in ['AVA_SlowFast_FastRcnn']:\n        input_spec = [[\n            InputSpec(shape=[\n                None, 3, cfg.num_frames // cfg.alpha, cfg.target_size,"
        },
        {
            "comment": "This code defines a function that takes in a model name and returns the input specification for different models. The input specification determines the shape, dtype, and name of the input tensors for each model. Different models have different input specifications based on their architecture and requirements. The returned input specification is used to build the model correctly.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":204-235",
            "content": "                cfg.target_size\n            ],\n                      dtype='float32',\n                      name='slow_input'),\n            InputSpec(shape=[\n                None, 3, cfg.num_frames, cfg.target_size, cfg.target_size\n            ],\n                      dtype='float32',\n                      name='fast_input'),\n            InputSpec(shape=[None, None, 4], dtype='float32', name='proposals'),\n            InputSpec(shape=[None, 2], dtype='float32', name='img_shape')\n        ]]\n    elif model_name in ['PoseC3D']:\n        input_spec = [[\n            InputSpec(shape=[None, 1, 17, 48, 56, 56], dtype='float32'),\n        ]]\n    elif model_name in ['YOWO']:\n        input_spec = [[\n            InputSpec(shape=[\n                1, 3, cfg.num_seg, cfg.target_size, cfg.target_size\n            ],\n                      dtype='float32'),\n        ]]\n    return input_spec\ndef main():\n    args = parse_args()\n    cfg, model_name = trim_config(\n        get_config(args.config, overrides=args.override, show=False))\n    print(f\"Building model({model_name})...\")"
        },
        {
            "comment": "Building the model, checking pretrained params are a file path, creating output directory if necessary, loading pretrained params, setting parameters to the model, evaluating the model, reppping layers if required, getting input specification, converting model to static, saving model with a specified name, and printing saved model location.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/tools/export_model.py\":236-266",
            "content": "    model = build_model(cfg.MODEL)\n    assert osp.isfile(\n        args.pretrained_params\n    ), f\"pretrained params ({args.pretrained_params} is not a file path.)\"\n    if not os.path.isdir(args.output_path):\n        os.makedirs(args.output_path)\n    print(f\"Loading params from ({args.pretrained_params})...\")\n    params = paddle.load(args.pretrained_params)\n    model.set_dict(params)\n    model.eval()\n    # for rep nets\n    for layer in model.sublayers():\n        if hasattr(layer, \"rep\") and not getattr(layer, \"is_repped\"):\n            layer.rep()\n    input_spec = get_input_spec(cfg.INFERENCE, model_name)\n    model = to_static(model, input_spec=input_spec)\n    paddle.jit.save(\n        model,\n        osp.join(args.output_path,\n                 model_name if args.save_name is None else args.save_name))\n    print(\n        f\"model ({model_name}) has been already saved in ({args.output_path}).\")\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}