{
    "summary": "This Python file imports necessary modules, defines AttrDict class, checks PaddlePaddle version compatibility, and handles GPU usage based on CUDA availability. It uses paddle.utils.require_version to ensure required version '1.6.0' is installed, logging errors and exiting with status code 1 if not.",
    "details": [
        {
            "comment": "Code is a Python file with license information, importing necessary modules such as os, sys, signal and logging. It defines the AttrDict class which extends the dictionary functionality and includes signals for handling SIGTERM and SIGINT for process termination.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoTag/utils/utility.py\":0-36",
            "content": "#  Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n#Licensed under the Apache License, Version 2.0 (the \"License\");\n#you may not use this file except in compliance with the License.\n#You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n#Unless required by applicable law or agreed to in writing, software\n#distributed under the License is distributed on an \"AS IS\" BASIS,\n#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#See the License for the specific language governing permissions and\n#limitations under the License.\nimport os\nimport sys\nimport signal\nimport logging\nimport paddle\n__all__ = ['AttrDict']\nlogger = logging.getLogger(__name__)\ndef _term(sig_num, addition):\n    print('current pid is %s, group id is %s' % (os.getpid(), os.getpgrp()))\n    os.killpg(os.getpgid(os.getpid()), signal.SIGKILL)\nsignal.signal(signal.SIGTERM, _term)\nsignal.signal(signal.SIGINT, _term)\nclass AttrDict(dict):\n    def __getattr__(self, key):\n        return self[key]"
        },
        {
            "comment": "This code checks if the installed PaddlePaddle version is 1.6 or higher and ensures that the user's code is compatible with the installed version. It also handles GPU usage by checking if the code should run on GPU or CPU based on the availability of CUDA in the system.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoTag/utils/utility.py\":38-65",
            "content": "    def __setattr__(self, key, value):\n        if key in self.__dict__:\n            self.__dict__[key] = value\n        else:\n            self[key] = value\ndef check_cuda(use_cuda, err = \\\n    \"\\nYou can not set use_gpu = True in the model because you are using paddlepaddle-cpu.\\n \\\n    Please: 1. Install paddlepaddle-gpu to run your models on GPU or 2. Set use_gpu = False to run models on CPU.\\n\"\n                                                                                                                     ):\n    try:\n        if use_cuda == True and paddle.is_compiled_with_cuda() == False:\n            print(err)\n            sys.exit(1)\n    except Exception as e:\n        pass\ndef check_version():\n    \"\"\"\n     Log error and exit when the installed version of paddlepaddle is\n     not satisfied.\n     \"\"\"\n    err = \"PaddlePaddle version 1.6 or higher is required, \" \\\n          \"or a suitable develop version is satisfied as well. \\n\" \\\n          \"Please make sure the version is good with your code.\" \\\n    try:"
        },
        {
            "comment": "This code is using the paddle.utils.require_version function to check if the required version '1.6.0' is installed. If there is an exception, it logs the error and exits the program with a status code of 1.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoTag/utils/utility.py\":66-69",
            "content": "        paddle.utils.require_version('1.6.0')\n    except Exception as e:\n        logger.error(err)\n        sys.exit(1)"
        }
    ]
}