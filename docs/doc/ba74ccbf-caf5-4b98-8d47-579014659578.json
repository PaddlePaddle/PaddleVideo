{
    "summary": "This code defines a ConvBNLayer class and Darknet backbone, performing convolutions, pooling, and reorganization in a neural network. It concatenates results from two branches, applies more convolutions, and returns final output.",
    "details": [
        {
            "comment": "This code defines a ConvBNLayer class that inherits from nn.Layer and includes a Conv2D layer, Batch Normalization, and other parameters like input_channels, output_channels, filter_size, stride, padding, and name.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":0-31",
            "content": "# Copyright (c) 2021  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport paddle\nfrom paddle import ParamAttr\nimport paddle.nn as nn\nimport paddle.nn.functional as F\nimport numpy as np\nclass ConvBNLayer(nn.Layer):\n    def __init__(self,\n                 input_channels,\n                 output_channels,\n                 filter_size,\n                 stride,\n                 padding,\n                 name=None):\n        super(ConvBNLayer, self).__init__()\n        self._conv = nn.Conv2D("
        },
        {
            "comment": "This code defines a convolutional neural network block with batch normalization and leaky ReLU activation. The forward function applies the convolution followed by batch normalization, and BasicBlock is a subclass of nn.Layer representing a single block in the model architecture.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":32-60",
            "content": "            in_channels=input_channels,\n            out_channels=output_channels,\n            kernel_size=filter_size,\n            stride=stride,\n            padding=padding,\n            weight_attr=ParamAttr(name=name + \".conv.weights\"),\n            bias_attr=False)\n        bn_name = name + \".bn\"\n        self._bn = nn.BatchNorm(\n            num_channels=output_channels,\n            act=\"leaky_relu\",\n            param_attr=ParamAttr(name=bn_name + \".scale\"),\n            bias_attr=ParamAttr(name=bn_name + \".offset\"),\n            moving_mean_name=bn_name + \".mean\",\n            moving_variance_name=bn_name + \".var\")\n    def forward(self, inputs):\n        x = self._conv(inputs)\n        x = self._bn(x)\n        return x\nclass BasicBlock(nn.Layer):\n    def __init__(self, input_channels, output_channels, name=None):\n        super(BasicBlock, self).__init__()\n        self._conv1 = ConvBNLayer(input_channels=input_channels, output_channels=output_channels, filter_size=[\n                                  3, 3], stride=1, padding=1,  name=name+'.0')"
        },
        {
            "comment": "Code defines a Darknet backbone with ConvBNLayer and MaxPooling layers, followed by Reorg layer for spatial downsampling.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":61-91",
            "content": "        self._max_pool = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n        self._conv2 = ConvBNLayer(input_channels=output_channels, output_channels=output_channels *\n                                  2, filter_size=[3, 3], stride=1, padding=1, name=name+'.1')\n        self._conv3 = ConvBNLayer(input_channels=output_channels*2, output_channels=output_channels,\n                                  filter_size=[1, 1], stride=1, padding=0, name=name+'.2')\n    def forward(self, x):\n        x = self._conv1(x)\n        x = self._max_pool(x)\n        x = self._conv2(x)\n        x = self._conv3(x)\n        return x\nclass Reorg(nn.Layer):\n    def __init__(self, stride=2):\n        super(Reorg, self).__init__()\n        self.stride = stride\n    def forward(self, x):\n        stride = self.stride\n        assert (x.dim() == 4)\n        B = x.shape[0]\n        C = x.shape[1]\n        H = x.shape[2]\n        W = x.shape[3]\n        assert (H % stride == 0)\n        assert (W % stride == 0)\n        ws = stride\n        hs = stride\n        x = x.reshape([B, C, H // hs, hs, W // ws, ws]"
        },
        {
            "comment": "This code reshapes the input tensor and performs a sequence of transpose operations to rearrange dimensions. The code is part of a Darknet class, which inherits from nn.Layer and contains various ConvBNLayer and BasicBlock instances for building a convolutional neural network.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":92-114",
            "content": "                      ).transpose([0, 1, 2, 4, 3, 5])\n        x = x.reshape([B, C, H // hs * W // ws, hs * ws]\n                      ).transpose([0, 1, 3, 2])\n        x = x.reshape([B, C, hs * ws, H // hs, W // ws]\n                      ).transpose([0, 2, 1, 3, 4])\n        x = x.reshape([B, hs * ws * C, H // hs, W // ws])\n        return x\nclass Darknet(nn.Layer):\n    def __init__(self, pretrained=None):\n        super(Darknet, self).__init__()\n        self.pretrained = pretrained\n        self._conv1 = ConvBNLayer(\n            input_channels=3, output_channels=32, filter_size=3, stride=1, padding=1, name='input')\n        self._max_pool1 = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n        self._basic_block_11 = BasicBlock(\n            input_channels=32, output_channels=64, name='1.1')\n        self._basic_block_12 = BasicBlock(\n            input_channels=64, output_channels=128, name='1.2')\n        self._basic_block_13 = BasicBlock(\n            input_channels=128, output_channels=256, name='1.3')\n        self._conv2 = ConvBNLayer("
        },
        {
            "comment": "The code defines a series of ConvBNLayer objects for the Darknet backbone. These layers include upsampling, downsampling, and convolution operations with different filter sizes and strides. The ConvBNLayer class is used to perform convolutions followed by batch normalization.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":115-128",
            "content": "            input_channels=256, output_channels=512, filter_size=3, stride=1, padding=1, name='up1')\n        self._conv3 = ConvBNLayer(\n            input_channels=512, output_channels=256, filter_size=1, stride=1, padding=0, name='down1')\n        self._conv4 = ConvBNLayer(\n            input_channels=256, output_channels=512, filter_size=3, stride=1, padding=1, name='2.1')\n        self._max_pool2 = nn.MaxPool2D(kernel_size=2, stride=2, padding=0)\n        self._conv5 = ConvBNLayer(\n            input_channels=512, output_channels=1024, filter_size=3, stride=1, padding=1, name='2.2')\n        self._conv6 = ConvBNLayer(input_channels=1024, output_channels=512,\n                                  filter_size=1, stride=1, padding=0, name='2.3')  # ori\n        self._conv7 = ConvBNLayer(\n            input_channels=512, output_channels=1024, filter_size=3, stride=1, padding=1, name='up2')\n        self._conv8 = ConvBNLayer(input_channels=1024, output_channels=512,\n                                  filter_size=1, stride=1, padding=0, name='down2')"
        },
        {
            "comment": "This code defines a neural network backbone with multiple convolutional layers, batch normalization, and pooling operations. The forward method implements the network's processing flow for input images.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":129-149",
            "content": "        self._conv9 = ConvBNLayer(\n            input_channels=512, output_channels=1024, filter_size=3, stride=1, padding=1, name='3.1')\n        self._conv10 = ConvBNLayer(\n            input_channels=1024, output_channels=1024, filter_size=3, stride=1, padding=1, name='3.2')\n        self._conv11 = ConvBNLayer(\n            input_channels=1024, output_channels=1024, filter_size=3, stride=1, padding=1, name='3.3')\n        self._conv12 = ConvBNLayer(\n            input_channels=512, output_channels=64, filter_size=1, stride=1, padding=0, name='4.1')\n        self._reorg = Reorg()\n        self._conv13 = ConvBNLayer(\n            input_channels=1280, output_channels=1024, filter_size=3, stride=1, padding=1, name='5.1')\n        self._conv14 = nn.Conv2D(1024, 425, kernel_size=1)\n    def forward(self, inputs):\n        x = self._conv1(inputs)\n        x = self._max_pool1(x)\n        x = self._basic_block_11(x)\n        x = self._basic_block_12(x)\n        x = self._basic_block_13(x)\n        x = self._conv2(x)\n        x = self._conv3(x)"
        },
        {
            "comment": "The code performs multiple convolutional operations, followed by pooling and reorganization. It concatenates the results of two separate branches, then applies further convolutions before returning the final output.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/darknet.py\":150-164",
            "content": "        ori = self._conv4(x)\n        x = self._max_pool2(ori)\n        x = self._conv5(x)\n        x = self._conv6(x)\n        x = self._conv7(x)\n        x = self._conv8(x)\n        x = self._conv9(x)\n        x = self._conv10(x)\n        x1 = self._conv11(x)\n        x2 = self._conv12(ori)\n        x2 = self._reorg(x2)\n        x = paddle.concat([x2, x1], 1)\n        x = self._conv13(x)\n        x = self._conv14(x)\n        return x"
        }
    ]
}