{
    "summary": "The code processes video data, extracts action instances, creates frames and stores them as pickle files for a dataset, with potential data splitting for training and validation.",
    "details": [
        {
            "comment": "This code is processing video data by extracting positive and negative action instances. Positive action instances are frames corresponding to annotated action intervals, while negative action instances are randomly selected frames from non-action intervals. The code reads JSON files containing labels and frame information, then processes each item by appending the start and end times of the action intervals. The length of positive action intervals is used to determine the start time for negative action intervals, with a minimum duration constraint between them.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_pptsm.py\":0-37",
            "content": "\"\"\"\nget instance for tsn\npositive: \u6807\u6ce8\u540e\u7684\u52a8\u4f5c\u533a\u95f4\uff0c\u4e00\u4e2a\u533a\u95f4\u6240\u6709frames\u751f\u6210\u4e00\u4e2apkl\nnegative: \u6807\u6ce8\u540e\u7684\u975e\u52a8\u4f5c\u533a\u95f4\uff0c\u968f\u673a\u53d6N\u4e2a\u533a\u95f4\u751f\u6210N\u4e2apkl\uff0c\u6bcf\u4e2a\u533a\u95f4\u957f\u5ea6\u7b49\u4e8e\u6700\u8fd1\u7684\u524d\u4e00\u4e2a\u52a8\u4f5c\u533a\u95f4\u7684\u957f\u5ea6\n\"\"\"\nimport os\nimport json\nimport numpy as np\nimport random\nimport pickle\nfrom concurrent import futures\ndataset = \"../EuroCup2016\"\nframes_dir = dataset + '/frames'\nlabel_files = {'train': 'label_cls8_train.json', 'val': 'label_cls8_val.json'}\ndef process(item, fps, save_folder):\n    actions_pos = []\n    actions_neg = []\n    url = item['url']\n    print(url)\n    basename = os.path.basename(url).split('.')[0]\n    actions = item['actions']\n    # pos\n    for action in actions:\n        actions_pos.append({\n            'label': action['label_ids'],\n            'start': action['start_id'] * fps,\n            'end': action['end_id'] * fps\n        })\n    # neg\n    for idx, pos in enumerate(actions_pos):\n        if idx == len(actions_pos) - 1:\n            break\n        len_pos = pos['end'] - pos['start']\n        duration_start = [pos['end'], actions_pos[idx + 1]['start'] - len_pos]\n        if duration_start[1] - duration_start[0] < 3:"
        },
        {
            "comment": "Code is iterating over frames and creating positive (label=1) and negative (label=0) action instances. It randomly sets the start frame, calculates end frame, appends to 'actions_pos' or 'actions_neg'. Then concatenates both lists, loops through items in the list, extracts start/end frames, label, and iterates over frames range to read images and store them in 'frames'. It forms an output file name using base name, start and end frame numbers, and labels, then writes frames to a .pkl file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_pptsm.py\":38-64",
            "content": "            continue\n        for k in range(1, 3):\n            start_frame = random.randint(duration_start[0], duration_start[1])\n            end_frame = start_frame + len_pos\n            actions_neg.append({\n                'label': [0],\n                'start': start_frame,\n                'end': end_frame\n            })\n    # save pkl\n    for item in np.concatenate((actions_pos, actions_neg), axis=0):\n        start = item['start']\n        end = item['end']\n        label = item['label']\n        label_str = str(label[0])\n        if len(item['label']) == 2:\n            label_str = label_str + '-' + str(label[1])\n        frames = []\n        for ii in range(start, end + 1):\n            img = os.path.join(frames_dir, basename, '%08d.jpg' % ii)\n            with open(img, 'rb') as f:\n                data = f.read()\n            frames.append(data)\n        # print(label_str)\n        outname = '%s/%s_%08d_%08d_%s.pkl' % (save_folder, basename, start, end,\n                                              label_str)\n        with open(outname, 'wb') as f:"
        },
        {
            "comment": "The code is creating instances for a dataset, processing data using multiprocessing, and saving them as pickle files. It also generates train and val lists of pickle files for further usage.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_pptsm.py\":65-95",
            "content": "            pickle.dump((basename, label, frames), f, -1)\ndef gen_instance_pkl(label_data, save_folder):\n    fps = label_data['fps']\n    gts = label_data['gts']\n    with futures.ProcessPoolExecutor(max_workers=10) as executer:\n        fs = [executer.submit(process, gt, fps, save_folder) for gt in gts]\n    #for gt in gts:\n    #    process(gt, fps, save_folder)\nif __name__ == \"__main__\":\n    for item, value in label_files.items():\n        save_folder = os.path.join(dataset, 'input_for_pptsm', item)\n        if not os.path.exists(save_folder):\n            os.makedirs(save_folder)\n        label_file = os.path.join(dataset, value)\n        label_data = json.load(open(label_file, 'rb'))\n        gen_instance_pkl(label_data, save_folder)\n    # gen train val list\n    #data_dir = '../EuroCup2016/input_for_pptsm/'\n    data_dir = os.path.abspath(os.path.join(dataset, 'input_for_pptsm'))\n    os.system('find ' + data_dir + '/train -name \"*.pkl\" > ' + data_dir +\n              '/train.list')\n    os.system('find ' + data_dir + '/val -name \"*.pkl\" > ' + data_dir +"
        },
        {
            "comment": "This line of code is likely specifying a file path for a validation list ('val.list') which could be used in the context of data splitting or model evaluation on a separate dataset subset.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_pptsm.py\":96-96",
            "content": "              '/val.list')"
        }
    ]
}