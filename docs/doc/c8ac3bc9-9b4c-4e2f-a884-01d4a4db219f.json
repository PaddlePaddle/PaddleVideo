{
    "summary": "The code defines a MobileNetV2 model with InvertedResidual blocks for Ma-Net application, initializing the backbone network and preparing it for forward propagation while applying Kaiming normal initialization to certain layers.",
    "details": [
        {
            "comment": "This code defines a network layer for MobileNet, including convolution-batch normalization-ReLU6 operations and an inverted residual block. It utilizes padding and dilation techniques to increase the effective receptive field size of the convolutions. The InvertedResidual class handles stride, dilation, and expand_ratio parameters for the network layer.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/backbone/mobilenet.py\":0-32",
            "content": "import paddle\nimport paddle.nn.functional as F\nimport paddle.nn as nn\nimport math\nfrom utils.api import kaiming_normal_\ndef conv_bn(inp, oup, stride, BatchNorm):\n    return nn.Sequential(nn.Conv2D(inp, oup, 3, stride, 1, bias_attr=False),\n                         BatchNorm(oup), nn.ReLU6())\ndef fixed_padding(inputs, kernel_size, dilation):\n    kernel_size_effective = kernel_size + (kernel_size - 1) * (dilation - 1)\n    pad_total = kernel_size_effective - 1\n    pad_beg = pad_total // 2\n    pad_end = pad_total - pad_beg\n    padded_inputs = F.pad(inputs, (pad_beg, pad_end, pad_beg, pad_end))\n    return padded_inputs\nclass InvertedResidual(nn.Layer):\n    def __init__(self, inp, oup, stride, dilation, expand_ratio, BatchNorm):\n        super(InvertedResidual, self).__init__()\n        self.stride = stride\n        assert stride in [1, 2]\n        hidden_dim = round(inp * expand_ratio)\n        self.use_res_connect = self.stride == 1 and inp == oup\n        self.kernel_size = 3\n        self.dilation = dilation\n        if expand_ratio == 1:"
        },
        {
            "comment": "This code defines a convolutional neural network layer for MobileNet backbone. It includes parameters such as input and output channels (inp, oup), hidden dimension (hidden_dim), stride, dilation, and whether to use pointwise (pw) or depthwise (dw) convolution. The layer is created using nn.Sequential module and includes BatchNorm and ReLU6 activation functions.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/backbone/mobilenet.py\":33-62",
            "content": "            self.conv = nn.Sequential(\n                # dw\n                nn.Conv2D(hidden_dim,\n                          hidden_dim,\n                          3,\n                          stride,\n                          0,\n                          dilation,\n                          groups=hidden_dim,\n                          bias_attr=False),\n                BatchNorm(hidden_dim),\n                nn.ReLU6(),\n                # pw-linear\n                nn.Conv2D(hidden_dim, oup, 1, 1, 0, 1, 1, bias_attr=False),\n                BatchNorm(oup),\n            )\n        else:\n            self.conv = nn.Sequential(\n                # pw\n                nn.Conv2D(inp, hidden_dim, 1, 1, 0, 1, bias_attr=False),\n                BatchNorm(hidden_dim),\n                nn.ReLU6(),\n                # dw\n                nn.Conv2D(hidden_dim,\n                          hidden_dim,\n                          3,\n                          stride,\n                          0,\n                          dilation,\n                          groups=hidden_dim,"
        },
        {
            "comment": "This code defines a MobileNetV2 model with InvertedResidual blocks, including convolutional layers, batch normalization, ReLU activation, and optional residual connection. The model takes in an input image of size 3xHxW and outputs a feature map of size oup x (H/stride) x (W/stride). It also supports variable width multiplier to adjust the number of channels for each block.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/backbone/mobilenet.py\":63-98",
            "content": "                          bias_attr=False),\n                BatchNorm(hidden_dim),\n                nn.ReLU6(),\n                # pw-linear\n                nn.Conv2D(hidden_dim, oup, 1, 1, 0, 1, bias_attr=False),\n                BatchNorm(oup),\n            )\n    def forward(self, x):\n        x_pad = fixed_padding(x, self.kernel_size, dilation=self.dilation)\n        if self.use_res_connect:\n            x = x + self.conv(x_pad)\n        else:\n            x = self.conv(x_pad)\n        return x\nclass MobileNetV2(nn.Layer):\n    def __init__(self,\n                 output_stride=8,\n                 BatchNorm=None,\n                 width_mult=1.,\n                 pretrained=True):\n        super(MobileNetV2, self).__init__()\n        block = InvertedResidual\n        input_channel = 32\n        current_stride = 1\n        rate = 1\n        interverted_residual_setting = [\n            # t, c, n, s\n            [1, 16, 1, 1],\n            [6, 24, 2, 2],\n            [6, 32, 3, 2],\n            [6, 64, 4, 2],\n            [6, 96, 3, 1],\n            [6, 160, 3, 2],"
        },
        {
            "comment": "This code builds the MobileNet backbone for Ma-Net application. It initializes the first layer with a specific input channel and then iterates through inverted residual blocks, adjusting stride and dilation rate accordingly. The block function is used to build each block, and input channels are updated accordingly.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/backbone/mobilenet.py\":99-126",
            "content": "            [6, 320, 1, 1],\n        ]\n        # building first layer\n        input_channel = int(input_channel * width_mult)\n        self.features = [conv_bn(3, input_channel, 2, BatchNorm)]\n        current_stride *= 2\n        # building inverted residual blocks\n        for t, c, n, s in interverted_residual_setting:\n            if current_stride == output_stride:\n                stride = 1\n                dilation = rate\n                rate *= s\n            else:\n                stride = s\n                dilation = 1\n                current_stride *= s\n            output_channel = int(c * width_mult)\n            for i in range(n):\n                if i == 0:\n                    self.features.append(\n                        block(input_channel, output_channel, stride, dilation,\n                              t, BatchNorm))\n                else:\n                    self.features.append(\n                        block(input_channel, output_channel, 1, dilation, t,\n                              BatchNorm))\n                input_channel = output_channel"
        },
        {
            "comment": "Initializes and prepares the MobileNet backbone network for forward propagation. If pretrained model is specified, loads the pretrained weights from PaddleHub's MobileNet_v2_imagenet. Otherwise, initializes the weights according to the provided configuration. The forward function extracts low-level and high-level features by passing the input through separate subsections of the feature extraction network.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/backbone/mobilenet.py\":127-156",
            "content": "        self.features = nn.Sequential(*self.features)\n        self._initialize_weights()\n        if pretrained:\n            self._load_pretrained_model()\n        self.low_level_features = self.features[0:4]\n        self.high_level_features = self.features[4:]\n    def forward(self, x):\n        low_level_feat = self.low_level_features(x)\n        x = self.high_level_features(low_level_feat)\n        return x, low_level_feat\n    def _load_pretrained_model(self):\n        import paddlehub as hub\n        pretrain_dict = hub.Module(name=\"mobilenet_v2_imagenet\")\n        model_dict = {}\n        state_dict = self.state_dict()\n        for k, v in pretrain_dict.items():\n            if k in state_dict:\n                model_dict[k] = v\n        state_dict.update(model_dict)\n        self.set_state_dict(state_dict)\n    def _initialize_weights(self):\n        for m in self.sublayers():\n            if isinstance(m, nn.Conv2D):\n                # n = m._kernel_size[0] * m._kernel_size[1] * m._out_channels\n                # m.weight.normal_(0, math.sqrt(2. / n))"
        },
        {
            "comment": "Code applies Kaiming normal initialization to certain layers (m.weight) and performs batch normalization by filling layer weights with 1 and setting bias to zero for nn.BatchNorm2D instances.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/backbone/mobilenet.py\":157-162",
            "content": "                kaiming_normal_(m.weight)\n            elif isinstance(m, nn.BatchNorm2D):\n                from utils.api import fill_\n                fill_(m.weight, 1)\n                from utils.api import zero_\n                zero_(m.bias)"
        }
    ]
}