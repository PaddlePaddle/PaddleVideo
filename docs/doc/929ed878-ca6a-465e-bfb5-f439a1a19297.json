{
    "summary": "The script uses PyQt5 to create a video processing GUI with functions for initializing variables, opening file dialogs, handling combo box indexing, and pen color changes. It also includes a `open_frame` function that updates the progress slider and stops the video at the last frame.",
    "details": [
        {
            "comment": "This code is the initial part of a Python script for building a GUI (Graphical User Interface) application using PyQt5 library. It defines a class called BuildGUI that inherits from QMainWindow and Ui_MainWindow, which likely contains the layout and design elements of the GUI. The __init__ method sets up some initial variables such as the selected video path and save path for results. The infer method is meant to start an inference process.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/build_gui.py\":0-35",
            "content": "# Author: Acer Zhang\n# Datetime:2022/1/11 \n# Copyright belongs to the author.\n# Please indicate the source for reprinting.\nimport json\nimport os\nimport numpy as np\nfrom PIL import Image\nfrom PyQt5 import QtCore, QtWidgets\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtCore import *\nimport cv2\nfrom EIVideo.api import json2frame, png2json, load_video\nfrom EIVideo.main import main\n# ToDo To AP-kai: \u8fd9\u662f\u5b9a\u4e49\u524d\u7aef\u4e34\u65f6\u4fdd\u5b58\u7528\u4e8e\u63a8\u7406\u7684json\u7684\u5730\u70b9\u4e4b\u7c7b\u7684\uff0c\u56e0\u4e3a\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u58f0\u660e\u4e3a\u5168\u5c40\u5e38\u91cf\u662f\u6700\u597d\u7684\nfrom EIVideo import TEMP_JSON_SAVE_PATH, TEMP_IMG_SAVE_PATH, TEMP_JSON_FINAL_PATH\nfrom QEIVideo.gui.ui_main_window import Ui_MainWindow\nclass BuildGUI(QMainWindow, Ui_MainWindow):\n    def __init__(self):\n        super(BuildGUI, self).__init__()\n        # ToDo To AP-kai: \u8fd9\u91cc\u5b9a\u4e49\u5f53\u524d\u9009\u62e9\u7684\u89c6\u9891\u8def\u5f84\u7684\u5360\u4f4d\u7b26\uff0c\u76f8\u5f53\u4e8e\u5168\u5c40\u53d8\u91cf\n        self.select_video_path = None\n        # ToDo To AP-kai: \u672a\u6765\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u4fdd\u5b58\u8def\u5f84\u7684\u5165\u53e3\u54c8\uff0c\u8fd9\u91cc\u5148\u968f\u610f\u5b9a\u4e49\u4e86\u4e2a\u8def\u5f84\n        self.save_path = \"./result\"\n        os.makedirs(self.save_path, exist_ok=True)\n        self.setupUi(self)\n    def infer(self):\n        self.label.setText(\"Start infer\")"
        },
        {
            "comment": "The code snippet sets the progress bar value, saves an image, prints frame numbers, calls a main function to perform inference, loads JSON frames, opens a frame, and updates a label when play button is clicked.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/build_gui.py\":36-58",
            "content": "        self.progressBar.setProperty(\"value\", 0)\n        image = self.paintBoard.get_content_as_q_image()\n        image.save(TEMP_IMG_SAVE_PATH)\n        print(self.slider_frame_num)\n        self.progressBar.setProperty(\"value\", 25)\n        # ToDo To AP-kai:\u76f8\u540c\u7684\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2a\u5e38\u91cf\u5c31\u597d\n        png2json(TEMP_IMG_SAVE_PATH, self.slider_frame_num, TEMP_JSON_SAVE_PATH)\n        self.progressBar.setProperty(\"value\", 50)\n        # ToDo To AP-kai:\u6253\u5370\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6ce8\u610f\u9996\u5b57\u6bcd\u5927\u5199\n        # ToDo To AP-kai: \u6b64\u5904\u4f20\u5165\u4fdd\u5b58\u8def\u5f84\u4ee5\u53ca\u5f53\u524d\u9009\u62e9\u7684\u89c6\u9891\u8def\u5f84\uff0c\u6700\u540e\u4f1a\u5728manet_stage1.py\u91cc\u901a\u8fc7cfg\u6765\u4f20\u5165\n        out = main(video_path=self.select_video_path, save_path=self.save_path)\n        print('Infer ok')\n        self.progressBar.setProperty(\"value\", 75)\n        self.all_frames = json2frame(TEMP_JSON_FINAL_PATH)\n        print(\"Success get submit_masks\")\n        self.open_frame()\n        self.progressBar.setProperty(\"value\", 100)\n        self.label.setText(\"Infer succeed\")\n    def btn_func(self, btn):\n        if btn == self.playbtn:\n            self.label.setText(\"Play video\")\n            if self.progress_slider.value() == self.cap.get(7) - 1:"
        },
        {
            "comment": "The code above contains three elif conditions for button press events. If the self.pushButton_1 is pressed, it initializes variables and starts a timer to update the video frame. If self.pushButton_2 is pressed, it stops the video and sets the label text to \"Stop video\". If self.pushButton_4 is pressed, it opens a file dialog for choosing a video file, and if a file is chosen, it prints the selected video file path. The current code is checking if there is a non-empty selected video file path after the file dialog is closed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/build_gui.py\":59-77",
            "content": "                self.slider_frame_num = 0\n                self.progress_slider.setValue(self.slider_frame_num)\n                self.time_label.setText('{}/{}'.format(self.slider_frame_num, self.cap.get(7)))\n            self.timer_camera = QTimer()  # \u5b9a\u4e49\u5b9a\u65f6\u5668\n            self.timer_camera.start(1000 / self.cap.get(cv2.CAP_PROP_FPS))\n            self.slider_frame_num = self.progress_slider.value()\n            self.timer_camera.timeout.connect(self.open_frame)\n        elif btn == self.pushButton_2:\n            self.label.setText(\"Stop video\")\n            self.slot_stop()\n        elif btn == self.pushButton_4:\n            self.label.setText(\"Choose video\")\n            self.select_video_path, _ = QFileDialog.getOpenFileName(self.frame, \"Open\", \"\", \"*.mp4;;All Files(*)\")\n            print(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\")\n            print(\"Select video file path:\\t\" + self.select_video_path)\n            # ToDo To AP-kai:\u4e0b\u65ad\u70b9\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u679c\u4e0d\u9009\u62e9\u7684\u65f6\u5019\u8fd4\u56de\u503c\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u7136\u540e\u518d\u505a\u5224\u65ad\uff0c\u76ee\u524d\u8fd9\u4e2aif\u6ca1\u6709\u751f\u6548\n            if self.select_video_path != \"\":"
        },
        {
            "comment": "The code snippet creates a GUI for video processing. It sets up a VideoCapture object, stores all frames, and initializes a progress slider with the total number of frames. The Eraser button toggles between EraserMode on/off in the paintBoard. The fill_color_list function populates a color combo box with predefined colors, including black at a specific index.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/build_gui.py\":78-106",
            "content": "                self.cap = cv2.VideoCapture(self.select_video_path)\n                # \u5b58\u6240\u6709frame\n                self.save_temp_frame()\n                print(\"save temp frame done\")\n                self.progress_slider.setRange(0, self.cap.get(cv2.CAP_PROP_FRAME_COUNT))\n                self.slider_frame_num = 0\n                self.open_frame()\n            # ToDo To AP-kai: \u672a\u6765\u8fd9\u4e2a\u5730\u65b9\u589e\u52a0\u63d0\u793a\u6846\uff0c\u544a\u8bc9\u4ed6\u6ca1\u6709\u9009\u62e9\u6587\u4ef6\n    def on_cbtn_eraser_clicked(self):\n        self.label.setText(\"Eraser On\")\n        if self.cbtn_Eraser.isChecked():\n            self.paintBoard.EraserMode = True  # \u8fdb\u5165\u6a61\u76ae\u64e6\u6a21\u5f0f\n        else:\n            self.paintBoard.EraserMode = False  # \u9000\u51fa\u6a61\u76ae\u64e6\u6a21\u5f0f\n    def fill_color_list(self, combo_box):\n        index_black = 0\n        index = 0\n        for color in self.colorList:\n            if color == \"black\":\n                index_black = index\n            index += 1\n            pix = QPixmap(70, 20)\n            pix.fill(QColor(color))\n            combo_box.addItem(QIcon(pix), None)\n            combo_box.setIconSize(QSize(70, 20))\n            combo_box.setSizeAdjustPolicy(QComboBox.AdjustToContents)"
        },
        {
            "comment": "This code defines several functions for a GUI application. It sets the current index of a combo box, handles pen color changes by updating the paintBoard's color, updates the video position based on progress slider input, saves a temporary frame from a video file, and stops the timer if it is running.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/build_gui.py\":108-134",
            "content": "        combo_box.setCurrentIndex(index_black)\n    def on_pen_color_change(self):\n        self.label.setText(\"Change pen color\")\n        color_index = self.comboBox_penColor.currentIndex()\n        color_str = self.colorList[color_index]\n        self.paintBoard.change_pen_color(color_str)\n    # \u62d6\u62fd\u8fdb\u5ea6\u6761\n    def update_video_position_func(self):\n        self.label.setText(\"Change slider position\")\n        self.slider_frame_num = self.progress_slider.value()\n        self.slot_stop()\n        self.open_frame()\n        self.progress_slider.setValue(self.slider_frame_num)\n        self.time_label.setText('{}/{}'.format(self.slider_frame_num, self.cap.get(7)))\n    def save_temp_frame(self):\n        _, self.all_frames = load_video(self.select_video_path, 480)\n    def slot_stop(self):\n        if self.cap != []:\n            self.timer_camera.stop()  # \u505c\u6b62\u8ba1\u65f6\u5668\n        else:\n            # ToDo To AP-kai: QMessageBox.warning\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u8fd9\u91cc\u6211\u628aWarming = QMessageBox.warning\u7684Warming\u5220\u53bb\u4e86\n            QMessageBox.warning(self, \"Warming\", \"Push the left upper corner button to Quit.\","
        },
        {
            "comment": "This code defines a function `open_frame` which updates the progress slider, displays the current frame using QImage and QPixmap, increments the slider value, sets the time label, and stops the video if at the last frame.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/build_gui.py\":135-150",
            "content": "                                QMessageBox.Yes)\n    def open_frame(self):\n        self.progress_slider.setValue(self.slider_frame_num)\n        self.slider_frame_num = self.progress_slider.value()\n        self.frame = self.all_frames[self.slider_frame_num]\n        frame = self.frame\n        height, width, bytes_per_component = frame.shape\n        bytes_per_line = bytes_per_component * width\n        q_image = QImage(frame.data, width, height, bytes_per_line,\n                         QImage.Format_RGB888).scaled(self.picturelabel.width(), self.picturelabel.height())\n        self.picturelabel.setPixmap(QPixmap.fromImage(q_image))\n        self.slider_frame_num = self.slider_frame_num + 1\n        self.time_label.setText('{}/{}'.format(self.slider_frame_num, self.cap.get(7)))\n        if self.progress_slider.value() == self.cap.get(7) - 1:\n            self.slot_stop()"
        }
    ]
}