{
    "summary": "This code sets up benchmark tests for TimeSformer video classification models in PaddleVideo, allowing users to customize parameters and analyze logs. The train() function is used for model training with specified parameters.",
    "details": [
        {
            "comment": "This script is a bash file for running benchmark tests on TimeSformer video classification models. It sets parameters such as single or multi-GPU mode, batch size, floating point precision, and model item. The function _train() will be used to train the model with specified parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/benchmark/TimeSformer/run_benchmark.sh\":0-27",
            "content": "#!/usr/bin/env bash\nset -xe\n# \u8fd0\u884c\u793a\u4f8b\uff1aCUDA_VISIBLE_DEVICES=0 bash run_benchmark.sh ${run_mode} ${bs_item} ${fp_item} 500 ${model_mode}\n# \u53c2\u6570\u8bf4\u660e\nfunction _set_params(){\n    run_mode=${1:-\"sp\"}          # \u5355\u5361sp|\u591a\u5361mp\n    batch_size=${2:-\"1\"}\n    fp_item=${3:-\"fp32\"}        # fp32|fp16\n    model_item=${4:-\"model_item\"}\n    run_log_path=${TRAIN_LOG_DIR:-$(pwd)}  # TRAIN_LOG_DIR \u540e\u7eedQA\u8bbe\u7f6e\u8be5\u53c2\u6570\n# \u6dfb\u52a0benchmark\u65e5\u5fd7\u89e3\u6790\u6240\u9700\u53c2\u6570\n    base_batch_size=${batch_size}\n    mission_name=\"\u89c6\u9891\u5206\u7c7b\"\n    direction_id=\"0\"\n    ips_unit=\"instance/sec\"\n    skip_steps=10                     # \u89e3\u6790\u65e5\u5fd7\uff0c\u6709\u4e9b\u6a21\u578b\u524d\u51e0\u4e2astep\u8017\u65f6\u957f\uff0c\u9700\u8981\u8df3\u8fc7                                    (\u5fc5\u586b)\n    keyword=\"ips:\"                 # \u89e3\u6790\u65e5\u5fd7\uff0c\u7b5b\u9009\u51fa\u6570\u636e\u6240\u5728\u884c\u7684\u5173\u952e\u5b57                                             (\u5fc5\u586b)\n    index=\"1\"\n    model_name=${model_item}_bs${batch_size}_${fp_item}\n#   \u4ee5\u4e0b\u4e0d\u7528\u4fee\u6539   \n    device=${CUDA_VISIBLE_DEVICES//,/ }\n    arr=(${device})\n    num_gpu_devices=${#arr[*]}\n    log_file=${run_log_path}/${model_item}_${run_mode}_bs${batch_size}_${fp_item}_${num_gpu_devices}\n}\nfunction _train(){\n    echo \"Train on ${num_gpu_devices} GPUs\""
        },
        {
            "comment": "This code is running a benchmark for the TimeSformer model in PaddleVideo. It checks if fp_item is either 'fp32' or 'fp16', and then calls the main script with the appropriate configuration file, based on the mode (sp or mp) and the chosen precision. The output logs are directed to a specified directory for analysis.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/benchmark/TimeSformer/run_benchmark.sh\":28-47",
            "content": "    echo \"current CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES, gpus=$num_gpu_devices, batch_size=$batch_size\"\n    case ${run_mode} in\n    sp) \n        if [ ${fp_item} == 'fp32' ]; then\n            train_cmd=\"python -u main.py -c configs/recognition/timesformer/timesformer_ucf101_videos_benchmark_bs${batch_size}.yaml\"\n        elif [ ${fp_item} == 'fp16' ]; then\n            train_cmd=\"python -u main.py --amp -c configs/recognition/timesformer/timesformer_ucf101_videos_benchmark_bs${batch_size}.yaml\"\n        else\n            echo \"choose fp_item(fp32 or fp16)\"\n            exit 1\n        fi;;\n    mp)\n        rm -rf ./mylog\n        if [ ${fp_item} == 'fp32' ]; then\n            train_cmd=\"python -u -B -m paddle.distributed.launch --gpus=$CUDA_VISIBLE_DEVICES --log_dir=./mylog main.py \\\n            -c configs/recognition/timesformer/timesformer_ucf101_videos_benchmark_bs${batch_size}_mp.yaml\"\n            log_parse_file=\"mylog/workerlog.0\"\n        elif [ ${fp_item} == 'fp16' ]; then\n            train_cmd=\"python -u -B -m paddle.distributed.launch --gpus=$CUDA_VISIBLE_DEVICES --log_dir=./mylog main.py --amp \\"
        },
        {
            "comment": "This code is part of a shell script for benchmarking the TimeSformer model. It sets up the command to run the training and checks for specific parameters like batch size and precision. It then executes the command with timeout, logs the result as success or failure, and removes intermediate log files if running in multi-process mode. The script also sources a separate file for further analysis of the log data.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/benchmark/TimeSformer/run_benchmark.sh\":48-76",
            "content": "            -c configs/recognition/timesformer/timesformer_ucf101_videos_benchmark_bs${batch_size}_mp.yaml\"\n            log_parse_file=\"mylog/workerlog.0\"\n        else\n            echo \"choose fp_item(fp32 or fp16)\"\n            exit 1\n        fi;;\n    *) echo \"choose run_mode(sp or mp)\"; exit 1;\n    esac\n# \u4ee5\u4e0b\u4e0d\u7528\u4fee\u6539\n    timeout 15m ${train_cmd} > ${log_file} 2>&1\n    if [ $? -ne 0 ];then\n        echo -e \"${model_name}, FAIL\"\n        export job_fail_flag=1\n    else\n        echo -e \"${model_name}, SUCCESS\"\n        export job_fail_flag=0\n    fi\n    kill -9 `ps -ef|grep 'python'|awk '{print $2}'`\n    if [ $run_mode = \"mp\" -a -d mylog ]; then\n        rm ${log_file}\n        cp mylog/workerlog.0 ${log_file}\n    fi\n}\nsource ${BENCHMARK_ROOT}/scripts/run_model.sh   # \u5728\u8be5\u811a\u672c\u4e2d\u4f1a\u5bf9\u7b26\u5408benchmark\u89c4\u8303\u7684log\u4f7f\u7528analysis.py \u811a\u672c\u8fdb\u884c\u6027\u80fd\u6570\u636e\u89e3\u6790;\u8be5\u811a\u672c\u5728\u8fde\u8c03\u65f6\u53ef\u4ecebenchmark repo\u4e2d\u4e0b\u8f7dhttps://github.com/PaddlePaddle/benchmark/blob/master/scripts/run_model.sh;\u5982\u679c\u4e0d\u8054\u8c03\u53ea\u60f3\u8981\u4ea7\u51fa\u8bad\u7ec3log\u53ef\u4ee5\u6ce8\u6389\u672c\u884c,\u63d0\u4ea4\u65f6\u9700\u6253\u5f00\n_set_params $@\n# _train       # \u5982\u679c\u53ea\u60f3\u4ea7\u51fa\u8bad\u7ec3log,\u4e0d\u89e3\u6790,\u53ef\u53d6\u6d88\u6ce8\u91ca\n_run     # \u8be5\u51fd\u6570\u5728run_model.sh\u4e2d,\u6267\u884c\u65f6\u4f1a\u8c03\u7528_train; \u5982\u679c\u4e0d\u8054\u8c03\u53ea\u60f3\u8981\u4ea7\u51fa\u8bad\u7ec3log\u53ef\u4ee5\u6ce8\u6389\u672c\u884c,\u63d0\u4ea4\u65f6\u9700\u6253\u5f00"
        }
    ]
}