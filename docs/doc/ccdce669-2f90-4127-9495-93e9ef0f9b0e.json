{
    "summary": "The BMNDataset class handles video datasets for action localization, initializing with file path, pipeline, and subset information. It loads data, sorts by name, and returns features, ground truth IOU map, and start frame indices for training. The function also prepares test data given an index by processing through the pipeline and returning selected results.",
    "details": [
        {
            "comment": "This code snippet defines the BMNDataset class for video datasets used in action localization. It imports necessary modules, registers the class with the DATASETS registry, and initializes the dataset with file path, pipeline, and subset information. Logger is also defined for logging purposes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/bmn_dataset.py\":0-35",
            "content": "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport copy\nimport json\nfrom ..registry import DATASETS\nfrom .base import BaseDataset\nfrom ...utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@DATASETS.register()\nclass BMNDataset(BaseDataset):\n    \"\"\"Video dataset for action localization.\n    \"\"\"\n    def __init__(\n        self,\n        file_path,\n        pipeline,\n        subset,\n        **kwargs,\n    ):\n        self.subset = subset\n        super().__init__(file_path, pipeline, **kwargs)"
        },
        {
            "comment": "This function is loading an index file to get video information and then sorts the data by video name. It also adds a video_idx attribute to each element in the list and returns the video features, ground truth IOU map, and start frame indices for training purposes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/bmn_dataset.py\":37-63",
            "content": "    def load_file(self):\n        \"\"\"Load index file to get video information.\"\"\"\n        info = []\n        annos = json.load(open(self.file_path))\n        for video_name in annos.keys():\n            video_subset = annos[video_name][\"subset\"]\n            if self.subset in video_subset:\n                info.append(\n                    dict(\n                        video_name=video_name,\n                        video_info=annos[video_name],\n                    ))\n        #sort by video_name\n        sort_f = lambda elem: elem['video_name']\n        info.sort(key=sort_f)\n        #add video_idx to info\n        for idx, elem in enumerate(info):\n            info[idx]['video_idx'] = idx\n        logger.info(\"{} subset video numbers: {}\".format(\n            self.subset, len(info)))\n        return info\n    def prepare_train(self, idx):\n        \"\"\"TRAIN & VALID: Prepare data for training/valid given the index.\"\"\"\n        results = copy.deepcopy(self.info[idx])\n        results = self.pipeline(results)\n        return results['video_feat'], results['gt_iou_map'], results['gt_start'],\\"
        },
        {
            "comment": "This function prepares test data given an index by copying the dataset info, processing it through the pipeline, and returning selected results (video_feat, gt_iou_map, gt_start, gt_end, video_idx).",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/bmn_dataset.py\":64-71",
            "content": "               results['gt_end']\n    def prepare_test(self, idx):\n        \"\"\"TEST: Prepare the data for test given the index.\"\"\"\n        results = copy.deepcopy(self.info[idx])\n        results = self.pipeline(results)\n        return results['video_feat'], results['gt_iou_map'], results['gt_start'], \\\n               results['gt_end'], results['video_idx']"
        }
    ]
}