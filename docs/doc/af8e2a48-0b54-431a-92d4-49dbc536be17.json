{
    "summary": "The code demonstrates how PaddleVideo uses Inversion of Control and Dependency Injection for improved modularity, resolving coupling issues through factory classes and configuration files. It creates class instances based on configs and applies design patterns for dependency injection, using a config file for architecture, dataset, pipeline, and optimizer configurations.",
    "details": [
        {
            "comment": "This code discusses the use of Inversion of Control (IOC) and Dependency Injection (DI) in PaddleVideo, a framework for video processing. It explains how these techniques help decouple and control the framework, increasing modularity and extensibility. The code demonstrates how traditional class instantiation can lead to coupling issues, and how IOC/DI can solve them by creating factory classes and using configuration files.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/tutorials/config.md\":0-36",
            "content": "# Configs design\n---\nThis page shows how PaddleVideo use the basic IOC/DI technology to decouple and control the whole framework. It is flexible to increase modularity of this system and make it extensible. At last, we will explain the details of config yaml and script args.\n## Design\nFirst, when we create a new class, it is common to new a instance like:\n```python\nclass TSM():\n    pass\nmodel = TSM(init_attributes)\n```\nwhen more classes are created, the coupling relationship between the calling and called method will increase sharply, obviously, we can create a factory class to solve it, like that:\n```python\nif model_name == \"TSM\":\n    model = TSM()\nelif model_name == \"TSN\":\n    model = TSN()\nelif ...\n```\nand\n```python\noptimizer_cfg = dict(name:\"MOMENTUM\", params: XXX)\nif optimizer_cfg.name = \"MOMENTUM\":\n    optimizer = MOMENTUM(optimizer_cfg.pop(name))\nelif:\n    ...\n```\nmore and more conditions have to be created though. like widly used in the Java or other platforms, we apply ```inversion of control``` and ```Dependency Inversion``` to decuople."
        },
        {
            "comment": "This code demonstrates the implementation of Dependency Injection (DI) using a Register and Builder. The Register provides name-to-object mapping, allowing objects to be registered with a specific name. The Builder facilitates obtaining registered modules by accepting a module's name and returning the corresponding instance.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/tutorials/config.md\":38-88",
            "content": "Second, to implenment DI, we build two components:\n- Register, to regist a class\n- Builder, to new an instance\n1. Register\nWe implenment a getter and a setter function to map string to an instance.\n[source code](../../paddlevideo/utils/registry.py)\n```python\n#excerpt from source code.\nclass Registry():\n    def __init__(self, name):\n        self._name = name\n        self._obj_map = {}\n    #mapping name -> object\n    def register(self,  obj, name):\n        self._obj_map[name] = obj\n    #get object\n    def get(self, name):\n        ret = self._obj_map.get(name)\n        return ret\n```\nIt provides name -> object mapping. For example, To register an object:\n```python\n    BACKBONES = Registry('backbone')\n    class ResNet:\n        pass\n    BACKBONES.register(ResNet)\n```\nOr, use a decorator\n```python\n    BACKBONES = Registry('backbone') #new a Register\n    @BACKBONES.register() #regist resnet as a backbone.\n    class ResNet:\n        pass\n```\n2. Builder\nTo obtain a registed module.\n```python\n    # Usage: To build a module.\n    backbone_name = \"ResNet\""
        },
        {
            "comment": "This code snippet is creating an instance of a class based on its name specified in the configuration file. It applies this design to various components like PIPELINE, BACKBONE, HEAD, LOSS, and METRIC for dependency injection. The attributes in the configuration field match the initialization attributes of the corresponding class. The config file separates architecture, dataset, pipeline, and optimizer configurations, along with global settings.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/tutorials/config.md\":89-116",
            "content": "    b = BACKBONES.get(backbone_name)()\n```\nso that we can new(register) an instance in **where it declared**, not **where it called**, a basic DI sub-system has been created now.\nWe apply this design on many places, such as: PIPELINE, BACKBONE, HEAD, LOSS, METRIC and so on.\nFinally, We build all of the framework components from config yaml which matches the source code one by one, **It means the attributes in a configuration field is same as the init atrributes of the mathced class**, and to indicate a specified class, we always use ```name``` to mark it. like:\n```yaml\nhead:\n    name: \"TSMHead\"  # class name\n    num_classes: 400 # TSMHead class init attributes\n    ...\n```\n---\n## config yaml details\nWe separate the config to several parts, in high level:\n- **MODEL:** Architecture configuration, such as HEAD module, BACKBONE module.\n- **DATASET:** DATASET and dataloader configuration.\n- **PIPELINE:** pipeline of processing configuration.\n- **OPTIMIZER:** Optimizer configuration.\nand some unique global configurations, like"
        },
        {
            "comment": "This code snippet is describing command-line arguments for a training script. The user can switch validate or test mode on/off, provide weights and config paths, and override specific args using \"-o\" option. It also mentions the available commands for each argument.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/tutorials/config.md\":117-130",
            "content": "- model_name\n- log_interval\n- epochs\n- resume_epoch\n- log_level\n...\nTraining script args\n-  **--validate**: switch validate mode on or not\n-  **--test**: switch test mode on or not\n-  **--weights**: weights path\n-  **-c**: config yaml path\n-  **-o**: override args, one can use it like: -o DATASET.batch_size=16"
        }
    ]
}