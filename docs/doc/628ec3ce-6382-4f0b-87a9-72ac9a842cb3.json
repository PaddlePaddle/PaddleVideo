{
    "summary": "The code initializes a class for MS-TCN dataset, loads video features and labels for training or testing, and converts label data to integers using a dictionary mapping.",
    "details": [
        {
            "comment": "Imports required modules and registers a class for the MS-TCN dataset, a video dataset for action segmentation. The class initializes with file paths and other parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/ms_tcn_dataset.py\":0-37",
            "content": "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport copy\nimport os\nimport numpy as np\nfrom ..registry import DATASETS\nfrom .base import BaseDataset\nfrom ...utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@DATASETS.register()\nclass MSTCNDataset(BaseDataset):\n    \"\"\"Video dataset for action segmentation.\n    \"\"\"\n    def __init__(\n        self,\n        file_path,\n        pipeline,\n        feature_path,\n        gt_path,\n        actions_map_file_path,\n        **kwargs,"
        },
        {
            "comment": "This code initializes a class, likely for data loading in a video dataset. It takes file paths as parameters, reads an actions map file to create a dictionary of action classes and their corresponding labels. The class also has a method load_file() to read the index file, and a method prepare_train() to prepare training data given an index.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/ms_tcn_dataset.py\":38-67",
            "content": "    ):\n        super().__init__(file_path, pipeline, **kwargs)\n        self.gt_path = gt_path\n        self.actions_map_file_path = actions_map_file_path\n        self.feature_path = feature_path\n        # actions dict generate\n        file_ptr = open(self.actions_map_file_path, 'r')\n        actions = file_ptr.read().split('\\n')[:-1]\n        file_ptr.close()\n        self.actions_dict = dict()\n        for a in actions:\n            self.actions_dict[a.split()[1]] = int(a.split()[0])\n        self.num_classes = len(self.actions_dict.keys())\n    def load_file(self):\n        \"\"\"Load index file to get video information.\"\"\"\n        file_ptr = open(self.file_path, 'r')\n        info = file_ptr.read().split('\\n')[:-1]\n        file_ptr.close()\n        return info\n    def prepare_train(self, idx):\n        \"\"\"TRAIN & VALID: Prepare data for training/valid given the index.\"\"\"\n        results = {}\n        video_name = self.info[idx]\n        # load video feature\n        file_name = video_name.split('.')[0] + \".npy\"\n        feat_file_path = os.path.join(self.feature_path, file_name)"
        },
        {
            "comment": "This code is loading video features and labels from a dataset, likely for training or testing purposes. It first checks the path of the feature file, then loads both the video feature and label data from specified paths. The code converts the label data into integer format using a dictionary mapping and performs some potential preprocessing steps (not shown here). Finally, it returns the video feature and label data for further processing.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/ms_tcn_dataset.py\":68-94",
            "content": "        #TODO: check path\n        video_feat = np.load(feat_file_path)\n        # load label\n        target_file_path = os.path.join(self.gt_path, video_name)\n        file_ptr = open(target_file_path, 'r')\n        content = file_ptr.read().split('\\n')[:-1]\n        classes = np.zeros(min(np.shape(video_feat)[1], len(content)), dtype='int64')\n        for i in range(len(classes)):\n            classes[i] = self.actions_dict[content[i]]\n        # classes = classes * (-100)\n        results['video_feat'] = copy.deepcopy(video_feat)\n        results['video_gt'] = copy.deepcopy(classes)\n        results = self.pipeline(results)\n        return results['video_feat'], results['video_gt']\n    def prepare_test(self, idx):\n        \"\"\"TEST: Prepare the data for test given the index.\"\"\"\n        results = {}\n        video_name = self.info[idx]\n        # load video feature\n        file_name = video_name.split('.')[0] + \".npy\"\n        feat_file_path = os.path.join(self.feature_path, file_name)\n        #TODO: check path\n        video_feat = np.load(feat_file_path)"
        },
        {
            "comment": "This function loads labels for a video dataset. It reads the label file, converts content to class numbers using actions_dict, assigns class values to classes array, scales the classes, and returns the feature and ground truth data for the video.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/ms_tcn_dataset.py\":96-109",
            "content": "        # load label\n        target_file_path = os.path.join(self.gt_path, video_name)\n        file_ptr = open(target_file_path, 'r')\n        content = file_ptr.read().split('\\n')[:-1]\n        classes = np.zeros(min(np.shape(video_feat)[1], len(content)))\n        for i in range(len(classes)):\n            classes[i] = self.actions_dict[content[i]]\n        # classes = classes * (-100)\n        results['video_feat'] = copy.deepcopy(video_feat)\n        results['video_gt'] = copy.deepcopy(classes)\n        results = self.pipeline(results)\n        return results['video_feat'], results['video_gt']"
        }
    ]
}