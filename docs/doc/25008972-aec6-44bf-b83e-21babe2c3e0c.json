{
    "summary": "The code defines a ResNeXt-101 model in PaddlePaddle, including downsample and residual blocks, BottleneckBlock, performs convolutions, activation, max pooling on input image.",
    "details": [
        {
            "comment": "This code defines a ConvBNLayer class in PaddlePaddle, which is a convolution-batch normalization layer. It takes inputs like num_channels, num_filters, filter_size, stride, padding, dilation, groups, padding_mode, weight_attr, bias_attr, and name.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":0-30",
            "content": "# Copyright (c) 2021  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom functools import partial\nimport paddle\nclass ConvBNLayer(paddle.nn.Layer):\n    def __init__(self,\n                 num_channels,\n                 num_filters,\n                 filter_size,\n                 stride=1,\n                 padding=0,\n                 dilation=1,\n                 groups=1,\n                 padding_mode='zeros',\n                 weight_attr=None,\n                 bias_attr=None,\n                 name=None,"
        },
        {
            "comment": "This code defines a ConvBNLayer class with specified parameters for convolutional and batch normalization layers. The convolutional layer uses Kaiming Normal initialization, while the batch normalization layer has fixed scales and offsets initialized to 1 and 0 respectively.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":31-54",
            "content": "                 data_format=\"NCDHW\"):\n        super(ConvBNLayer, self).__init__()\n        self._conv = paddle.nn.Conv3D(\n            in_channels=num_channels,\n            out_channels=num_filters,\n            kernel_size=filter_size,\n            stride=stride,\n            padding=padding,\n            dilation=dilation,\n            groups=groups,\n            padding_mode=padding_mode,\n            weight_attr=paddle.ParamAttr(initializer=paddle.nn.initializer.KaimingNormal(\n                fan_in=num_filters * filter_size * filter_size), name=name+'_weights'),\n            bias_attr=bias_attr,\n            data_format=data_format)\n        bn_name = \"bn_\" + name\n        self._batch_norm = paddle.nn.BatchNorm3D(\n            num_filters,\n            momentum=0.9,\n            epsilon=1e-05,\n            weight_attr=paddle.ParamAttr(initializer=paddle.nn.initializer.Constant(\n                1.), name=bn_name + '_scale'),\n            bias_attr=paddle.ParamAttr(initializer=paddle.nn.initializer.Constant(\n                0.), name=bn_name + '_offset'),"
        },
        {
            "comment": "This code defines a BottleneckBlock class and a downsample function for the ResNeXt101 model in PaddlePaddle. The BottleneckBlock has an expansion factor of 2 and uses ConvBNLayer for convolution and batch normalization. The downsample function performs average pooling and concatenation to perform downsampling.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":55-81",
            "content": "            data_format=data_format)\n    def forward(self, inputs):\n        y = self._conv(inputs)\n        y = self._batch_norm(y)\n        return y\ndef _downsample_basic_block(self, x, planes, stride):\n    out = paddle.nn.functional.avg_pool3d(x, kernel_size=1, stride=stride)\n    shape = out.shape\n    zero_pads = paddle.zeros(shape=[shape[0], planes - shape[1], shape[2], shape[3], shape[4]],\n                                   dtype='float32')\n    out = paddle.concat(x=[out, zero_pads], axis=1)\nclass BottleneckBlock(paddle.nn.Layer):\n    expansion = 2\n    def __init__(self, inplanes, planes, cardinality, stride=1, downsample=None, name=None):\n        super(BottleneckBlock, self).__init__()\n        mid_planes = cardinality * int(planes / 32)\n        self.conv0 = ConvBNLayer(\n            inplanes, mid_planes, filter_size=1, bias_attr=False, name=name+'_branch2a')\n        self.conv1 = ConvBNLayer(mid_planes, mid_planes, filter_size=3, stride=stride,\n                                 padding=1, groups=cardinality, bias_attr=False, name=name+'_branch2b')"
        },
        {
            "comment": "This code defines a ResNeXt model. The class ResNeXt has an initialization that sets inplanes to 64 and inherits from paddle.nn.Layer. It contains a convolution layer (conv) with 3 input channels, 64 output channels, filter size of 7, and stride of (1,2,2). The class also includes a ResNet-style residual block as a member variable named 'block'. It has layers, shortcut_type (defaults to B), and cardinality parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":82-121",
            "content": "        self.conv2 = ConvBNLayer(mid_planes, planes * self.expansion,\n                                 filter_size=1, bias_attr=False, name=name+'_branch2c')\n        self.downsample = downsample\n        self.stride = stride\n        self.relu = paddle.nn.ReLU()\n    def forward(self, x):\n        residual = x\n        out = self.conv0(x)\n        out = self.relu(out)\n        out = self.conv1(out)\n        out = self.relu(out)\n        out = self.conv2(out)\n        if self.downsample is not None:\n            residual = self.downsample(x)\n        out += residual\n        out = self.relu(out)\n        return out\nclass ResNeXt(paddle.nn.Layer):\n    def __init__(self,\n                 block,\n                 layers,\n                 shortcut_type='B',\n                 cardinality=32):\n        self.inplanes = 64\n        super(ResNeXt, self).__init__()\n        self.conv = ConvBNLayer(\n            3,\n            64,\n            filter_size=7,\n            stride=(1, 2, 2),\n            padding=(3, 3, 3),\n            bias_attr=False,\n            name=\"res_conv1\""
        },
        {
            "comment": "The code defines a ResNext101 backbone for a deep learning model. It includes a ReLU activation function and max pooling operation, followed by four residual layers (layer1 to layer4) with varying numbers of planes (256, 512, 1024 respectively). The _make_layer method is used to create the layers, with options for downsampling and varying expansion rates.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":122-147",
            "content": "        )\n        self.relu = paddle.nn.ReLU()\n        self.maxpool = paddle.nn.MaxPool3D(kernel_size=(3, 3, 3), stride=2, padding=1)\n        self.layer1 = self._make_layer(block, 128, layers[0], shortcut_type,\n                                       cardinality, stride=1, name='layer1')\n        self.layer2 = self._make_layer(\n            block, 256, layers[1], shortcut_type, cardinality, stride=2, name='layer2')\n        self.layer3 = self._make_layer(\n            block, 512, layers[2], shortcut_type, cardinality, stride=2, name='layer3')\n        self.layer4 = self._make_layer(\n            block, 1024, layers[3], shortcut_type, cardinality, stride=2, name='layer4')\n        self.avgpool = paddle.nn.AvgPool3D((2, 1, 1), stride=1, exclusive=False)\n    def _make_layer(self,\n                    block,\n                    planes,\n                    blocks,\n                    shortcut_type,\n                    cardinality,\n                    stride=1,\n                    name=None):\n        downsample = None\n        if stride != 1 or self.inplanes != planes * block.expansion:"
        },
        {
            "comment": "This code defines a ResNeXt-101 model, implementing its downsample and residual blocks. It takes an input image, performs convolutions, applies ReLU activation, and max pooling before passing through the specified number of residual blocks.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":148-175",
            "content": "            if shortcut_type == 'A':\n                downsample = partial(self._downsample_basic_block,\n                                     planes=planes * block.expansion,\n                                     stride=stride)\n            else:\n                downsample = ConvBNLayer(\n                    self.inplanes,\n                    planes * block.expansion,\n                    1,\n                    stride=stride,\n                    bias_attr=False,\n                    name=name+'downsample'\n                )\n        layers = []\n        layers.append(\n            block(self.inplanes, planes, cardinality, stride, downsample, name=name+'_downsample'))\n        self.inplanes = planes * block.expansion\n        for i in range(1, blocks):\n            layers.append(block(self.inplanes, planes,\n                          cardinality, name=name+'_res_block'+str(i)))\n        return paddle.nn.Sequential(*layers)\n    def forward(self, x):\n        x = self.conv(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n        x = self.layer1(x)"
        },
        {
            "comment": "The ResNext101 function constructs a ResNeXt-101 model using BottleneckBlock and the specified block configurations. It applies the layer2, layer3, and layer4 operations to x before returning the result.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnext101.py\":176-186",
            "content": "        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n        return x\ndef ResNext101():\n    \"\"\"Constructs a ResNext-101 model.\n    \"\"\"\n    model = ResNeXt(BottleneckBlock, [3, 4, 23, 3])\n    return model"
        }
    ]
}