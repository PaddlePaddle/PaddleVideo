{
    "summary": "This code defines a config parser and provides two functions for parsing, merging, setting, and printing configuration in different sections. The code handles section validity and updates values when merging.",
    "details": [
        {
            "comment": "This code defines a config parser and provides two functions: `parse_config` and `merge_configs`. The `parse_config` function reads a configuration file and returns an `AttrDict` object containing the parsed configurations for different sections ('train', 'valid', 'test', 'infer'). The `merge_configs` function takes an existing configuration object, a section name, and an optional dictionary of arguments to merge into the configuration. It checks if the section is valid before attempting to merge the new arguments. If a value is None, it is ignored during the merging process.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/config.py\":0-51",
            "content": "\"\"\"\nconfig parser\n\"\"\"\ntry:\n    from configparser import ConfigParser\nexcept BaseException:\n    from ConfigParser import ConfigParser\nfrom utils import AttrDict\nimport logging\nlogger = logging.getLogger(__name__)\nCONFIG_SECS = [\n    'train',\n    'valid',\n    'test',\n    'infer',\n]\ndef parse_config(cfg_file):\n    \"\"\"parse_config\n    \"\"\"\n    parser = ConfigParser()\n    cfg = AttrDict()\n    parser.read(cfg_file)\n    for sec in parser.sections():\n        sec_dict = AttrDict()\n        for k, v in parser.items(sec):\n            try:\n                v = eval(v)\n            except BaseException:\n                pass\n            setattr(sec_dict, k, v)\n        setattr(cfg, sec.upper(), sec_dict)\n    return cfg\ndef merge_configs(cfg, sec, args_dict):\n    \"\"\"merge_configs\n    \"\"\"\n    assert sec in CONFIG_SECS, \"invalid config section {}\".format(sec)\n    sec_dict = getattr(cfg, sec.upper())\n    for k, v in args_dict.items():\n        if v is None:\n            continue\n        # try:\n        #     if hasattr(sec_dict, k):\n        #         setattr(sec_dict, k, v)"
        },
        {
            "comment": "This code defines two functions, `set_config` and `print_configs`. The `set_config` function takes a dictionary (cfg) as input, iterates through its keys and values, and sets the value for each key in the configuration dictionary (sec_dict). If the key already exists in sec_dict, it updates its value. Finally, the function returns the updated configuration dictionary. The `print_configs` function prints out the configuration in a formatted way using the logger module. It iterates through the sections and their corresponding values in the configuration dictionary and logs them to the console with proper indentation and section names.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/config.py\":52-70",
            "content": "        # except BaseException:\n        #     pass\n        if k in sec_dict:\n            setattr(sec_dict, k, v)\n    return cfg\ndef print_configs(cfg, mode):\n    \"\"\"print_configs\n    \"\"\"\n    logger.info(\"---------------- {:>5} Arguments ----------------\".format(mode))\n    for sec, sec_items in cfg.items():\n        if isinstance(sec_items, dict) is True:\n            logger.info(\"{}:\".format(sec))\n            for k, v in sec_items.items():\n                logger.info(\"    {}:{}\".format(k, v))\n        else:\n            logger.info(\"{}:{}\".format(sec, sec_items))\n    logger.info(\"-------------------------------------------------\")"
        }
    ]
}