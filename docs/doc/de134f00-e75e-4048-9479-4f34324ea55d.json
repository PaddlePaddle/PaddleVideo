{
    "summary": "This code parses and extracts expressions, specifies reduction type (print/sum/mean), discards line parts, and enables debug mode. It defines functions to parse arguments, log messages, validate/extract data, and performs calculations on a list of numerical tuples based on user-defined parameters in the main function.",
    "details": [
        {
            "comment": "This code parses arguments for validating and extracting expressions, specifying reduction type (print/sum/mean), discarding line parts, and enabling debug mode.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/extract_loss.py\":0-27",
            "content": "import sys\nimport argparse\nimport re\ndef parameter_parser():\n    parser = argparse.ArgumentParser(description=\"Support Args:\")\n    parser.add_argument(\"-v\",\n                        \"--valid-expr\",\n                        type=str,\n                        default=\"*\",\n                        help=\"when not match, the line will discard.\")\n    parser.add_argument(\"-e\",\n                        \"--extract-expr\",\n                        type=str,\n                        default=\"^{%s}$,\",\n                        help=\"the extract expr for the loss: loss {%f}\")\n    parser.add_argument(\"-r\",\n                        \"--reduction-expr\",\n                        type=str,\n                        default=\"print\",\n                        help=\"print | sum | mean\")\n    parser.add_argument(\"-n\",\n                        \"--discard\",\n                        type=int,\n                        default=0,\n                        help=\"while reduction, discard [0:n] and [-n:]\")\n    parser.add_argument(\"-d\", \"--debug\", type=bool, default=False, help=\"debug\")"
        },
        {
            "comment": "The code defines functions to parse arguments, log messages, and validate or extract data from a given line. The \"is_valid\" function checks if the input line matches a specific expression or wildcard, while the \"extract\" function uses regular expressions to parse a specified type of data (float, int, or string) from a given line.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/extract_loss.py\":28-70",
            "content": "    return parser.parse_args()\nargs = parameter_parser()\ndef log(*inp, **kargs):\n    if args.debug:\n        print(*inp, **kargs)\ndef is_valid(line, valid_expr):\n    if valid_expr == \"*\": return True\n    if valid_expr in line: return True\n    return False\ndef extract(line, extract_expr):\n    \"\"\"\n    return tuple, the output will be\n    \"\"\"\n    log(\"Extract_expression is : \", extract_expr)\n    x = re.findall(\"\\{%(.)\\}\", extract_expr)\n    assert len(x) == 1, \"Must exist a {%d} | {%f} | {%s} \"\n    t = x[0]\n    type_converter = {\n        'f': float,\n        'i': int,\n        's': str,\n    }\n    type_extracter = {\n        \"f\": r'(-?\\\\d+\\\\.\\\\d+)',\n        \"i\": r'(-?\\\\d+)',\n        \"s\": r'(.*?)',\n    }\n    log(type_extracter[t])\n    pattern = re.sub(\"\\{%(.)\\}\", type_extracter[t], extract_expr, 1)\n    log(\"Created Pattern is: \", pattern)\n    x = re.findall(pattern, line)\n    if len(x) == 0: return None\n    assert len(x) == 1, f\"Multi Match for `{extract_expr}` in line: \\n{line}\"\n    log(\"Find in line: \", x[0].strip())\n    return type_converter[t](x[0].strip())"
        },
        {
            "comment": "This code defines a function 'action' which performs calculations on a list of numerical tuples and prints the result based on the given action. The main function reads input lines, validates them, extracts values, and passes the resulting tuple list to the 'action' function based on user-defined parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/extract_loss.py\":73-101",
            "content": "def action(tuple_list, action):\n    # discard the warm up\n    if args.discard > 0:\n        tuple_list = tuple_list[args.discard:]\n        tuple_list = tuple_list[:-args.discard]\n    # do action for each item\n    if action == \"sum\":\n        print(sum(tuple_list))\n    if action == \"mean\":\n        if len(tuple_list) == 0: print(\"null\")\n        else: print(sum(tuple_list) / len(tuple_list))\n    if action == \"print\":\n        for item in tuple_list:\n            print(item)\ndef main():\n    current_step = 0\n    tuple_list = []\n    for line in sys.stdin:\n        line = line.strip()\n        if is_valid(line, args.valid_expr):\n            ret = extract(line, args.extract_expr)\n            if ret: tuple_list.append(ret)\n    action(tuple_list, args.reduction_expr)\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}