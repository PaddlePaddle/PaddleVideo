{
    "summary": "The code processes video data, creating labels, organizing files, and parsing command line arguments. It allows for segmentation or localization labeling with features such as label conversion and ground truth processing.",
    "details": [
        {
            "comment": "This code reads label files from a specified path, converts the labels to localization format and writes them into another specified output path. It also generates mapping information between the localization format and original format. The function takes prefix_data_path (path to read data), out_path (output path for results), action_dict (dictionary of action mappings) and fps (frames per second) as input parameters. It processes each label file in the prefix_data_path, updating labels_list with converted labels, and writes them to the output path. Finally, it generates mapping information in \"mapping.txt\" format.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":0-33",
            "content": "import json\nimport numpy as np\nimport argparse\nimport os\nfrom tqdm import tqdm\ndef generate_mapping_list_txt(action_dict, out_path):\n    out_txt_file_path = os.path.join(out_path, \"mapping.txt\")\n    f = open(out_txt_file_path, \"w\", encoding='utf-8')\n    for key, action_name in action_dict.items():\n        str_str = str(key) + \" \" + action_name + \"\\n\"\n        f.write(str_str)\n    # add None\n    str_str = str(len(action_dict)) + \" None\" + \"\\n\"\n    f.write(str_str)\n    f.close()\ndef segmentation_convert_localization_label(prefix_data_path, out_path,\n                                            action_dict, fps):\n    label_path = os.path.join(prefix_data_path)\n    label_txt_name_list = os.listdir(label_path)\n    labels_dict = {}\n    labels_dict[\"fps\"] = fps\n    labels_list = []\n    for label_name in tqdm(label_txt_name_list, desc='label convert:'):\n        label_dict = {}\n        label_dict[\"url\"] = label_name.split(\".\")[0] + \".mp4\"\n        label_txt_path = os.path.join(prefix_data_path, label_name)\n        with open(label_txt_path, \"r\", encoding='utf-8') as f:"
        },
        {
            "comment": "This code segment reads a ground truth file line by line and counts the total frames. It then identifies action boundaries, creates an actions list, and for each action, it extracts action name, start and end time (in seconds), and the corresponding label ID from the action dictionary to create a label_action_dict. This information will be useful in transforming segmentation labels.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":34-54",
            "content": "            gt = f.read().split(\"\\n\")[:-1]\n        label_dict[\"total_frames\"] = len(gt)\n        boundary_index_list = [0]\n        before_action_name = gt[0]\n        for index in range(1, len(gt)):\n            if before_action_name != gt[index]:\n                boundary_index_list.append(index)\n                before_action_name = gt[index]\n        actions_list = []\n        for index in range(len(boundary_index_list) - 1):\n            if gt[boundary_index_list[index]] != \"None\":\n                action_name = gt[boundary_index_list[index]]\n                start_sec = float(boundary_index_list[index]) / float(fps)\n                end_sec = float(boundary_index_list[index + 1] - 1) / float(fps)\n                action_id = action_dict[action_name]\n                label_action_dict = {}\n                label_action_dict[\"label_names\"] = action_name\n                label_action_dict[\"start_id\"] = start_sec\n                label_action_dict[\"end_id\"] = end_sec\n                label_action_dict[\"label_ids\"] = [action_id]"
        },
        {
            "comment": "This code appears to be part of a larger program that performs video segmentation and labeling. It generates a dictionary containing action labels based on provided ground truth segmentation data, converts segmentation labels into localization format, and saves the results in JSON format for further use. The function `generate_action_dict()` generates an action dictionary, `load_action_dict()` loads an action dictionary from a file, and `localization_convert_segmentation_label()` converts segmentation labels into localization format.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":55-89",
            "content": "                actions_list.append(label_action_dict)\n        label_dict[\"actions\"] = actions_list\n        labels_list.append(label_dict)\n    labels_dict[\"gts\"] = labels_list\n    output_path = os.path.join(out_path, \"output.json\")\n    f = open(output_path, \"w\", encoding='utf-8')\n    f.write(json.dumps(labels_dict, indent=4))\n    f.close()\ndef generate_action_dict(label):\n    action_dict = {}\n    for gt in label[\"gts\"]:\n        for action in gt[\"actions\"]:\n            label_id = action[\"label_ids\"][0]\n            label_name = action[\"label_names\"][0]\n            action_dict[label_id] = label_name\n    return action_dict\ndef load_action_dict(data_path):\n    mapping_txt_path = os.path.join(data_path, \"mapping.txt\")\n    with open(mapping_txt_path, \"r\", encoding='utf-8') as f:\n        actions = f.read().split(\"\\n\")[:-1]\n    class2id_map = dict()\n    for a in actions:\n        class2id_map[a.split()[1]] = int(a.split()[0])\n    return class2id_map\ndef localization_convert_segmentation_label(label, prefix_data_path, out_path):"
        },
        {
            "comment": "The code checks if a directory exists and creates it if not. It then loops through each ground truth segmentation in the label, retrieves the corresponding video data, extracts relevant information like feature, action labels, start and end indices, and populates seg_label array with action labels for the specified time range.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":90-118",
            "content": "    path = os.path.join(out_path, \"groundTruth\")\n    isExists = os.path.exists(path)\n    if not isExists:\n        os.makedirs(path)\n        print(path + ' \u521b\u5efa\u6210\u529f')\n    else:\n        print(path + ' \u76ee\u5f55\u5df2\u5b58\u5728')\n    fps = float(label[\"fps\"])\n    video_list = []\n    for gt in tqdm(label[\"gts\"], desc='label convert:'):\n        video_name = gt[\"url\"].split(\".\")[0]\n        data_path = os.path.join(prefix_data_path, video_name + \".pkl\")\n        video_list.append(video_name + \".txt\")\n        feature = np.load(data_path, allow_pickle=True)[\"image_feature\"]\n        num_feture = feature.shape[0]\n        seg_label = [\"None\"] * (num_feture)\n        for action in gt[\"actions\"]:\n            start_id = action[\"start_id\"]\n            end_id = action[\"end_id\"]\n            label_name = action[\"label_names\"]\n            start_index = int(np.floor(start_id * fps))\n            end_index = int(np.floor(end_id * fps)) + 1\n            if end_index < num_feture - 1:\n                seg_label[start_index:end_index] = label_name * (end_index -"
        },
        {
            "comment": "This code segment is part of a larger program that appears to be related to video data processing. The function is setting up a segmentation label and writing it to a file, as well as creating another list for training purposes. It determines the starting index based on the number of features, and fills in the label accordingly. The code then writes the label and video list to separate text files in the specified output path. This process is controlled by the \"args\" variable which contains command line arguments like \"mode\", \"label_path\", and \"out_path\".",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":119-146",
            "content": "                                                                 start_index)\n            elif start_index < num_feture - 1:\n                seg_label[start_index:] = label_name * (num_feture -\n                                                        start_index)\n            else:\n                pass\n        if len(seg_label) != num_feture:\n            seg_label = seg_label[:num_feture]\n        out_txt_file_path = os.path.join(out_path, \"groundTruth\",\n                                         video_name + \".txt\")\n        str = '\\n'\n        f = open(out_txt_file_path, \"w\", encoding='utf-8')\n        f.write(str.join(seg_label) + str)\n        f.close()\n    out_txt_file_path = os.path.join(out_path, \"train_list.txt\")\n    str = '\\n'\n    f = open(out_txt_file_path, \"w\", encoding='utf-8')\n    f.write(str.join(video_list) + str)\n    f.close()\ndef main():\n    args = get_arguments()\n    if args.mode in [\"segmentation\", \"localization\"]:\n        if args.mode == \"segmentation\":\n            with open(args.label_path, 'r', encoding='utf-8') as json_file:"
        },
        {
            "comment": "The code reads a label file, determines the mode (segmentation or localization), and performs corresponding operations. It uses function calls like generate_action_dict, load_action_dict, segmentation_convert_localization_label. The get_arguments function parses command line arguments.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":147-172",
            "content": "                label = json.load(json_file)\n            action_dict = generate_action_dict(label)\n            generate_mapping_list_txt(action_dict, args.out_path)\n            localization_convert_segmentation_label(label, args.data_path,\n                                                    args.out_path)\n        elif args.mode == \"localization\":\n            action_dict = load_action_dict(args.label_path)\n            segmentation_convert_localization_label(args.data_path,\n                                                    args.out_path,\n                                                    action_dict,\n                                                    fps=25.0)\n    else:\n        raise NotImplementedError\ndef get_arguments():\n    \"\"\"\n    parse all the arguments from command line inteface\n    return a list of parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"convert segmentation and localization label\")\n    parser.add_argument(\"label_path\", type=str, help=\"path of a label file\")"
        },
        {
            "comment": "This code snippet defines command line arguments for the input data path, output path, and mode. It then parses these arguments and returns them, allowing the program to convert segmentation or localization labels as specified by the user.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/transform_segmentation_label.py\":173-194",
            "content": "    parser.add_argument(\n        \"data_path\",\n        type=str,\n        help=\"path of video feature or segmentation label txt.\",\n    )\n    parser.add_argument(\n        \"out_path\",\n        type=str,\n        help=\"path of output file.\",\n    )\n    parser.add_argument(\n        \"--mode\",\n        type=str,\n        default=\"segmentation\",\n        help=\"Convert segmentation label or localization label.\",\n    )\n    return parser.parse_args()\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}