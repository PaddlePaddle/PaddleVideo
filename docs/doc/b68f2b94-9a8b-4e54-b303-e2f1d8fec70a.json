{
    "summary": "The \"ConfigParser\" initializes argument parsers, handles slave mode, and sets directories. It manages config parsing, experiment settings, and data loaders with logging capabilities. The code includes two functions for accessing and modifying values in a nested object using a sequence of keys.",
    "details": [
        {
            "comment": "This code snippet is the beginning of a Python class, \"ConfigParser,\" which appears to be part of a larger project. The class takes in an \"args\" parameter (possibly command line arguments) and two optional parameters: \"options\" and \"timestamp\". It also has a boolean parameter named \"slave_mode\". The code imports various modules and defines the class but no specific functionality is provided in this section.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":0-34",
            "content": "# Copyright 2021 Antoine Miech All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS-IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nimport time\nimport paddle\nimport pprint\nimport logging\nfrom typing import Dict\nfrom pathlib import Path\nfrom datetime import datetime\nfrom operator import getitem\nfrom functools import reduce\nfrom mergedeep import Strategy, merge\nfrom zsvision.zs_utils import set_nested_key_val\nfrom typeguard import typechecked\nfrom utils import read_json, write_json\nfrom logger import setup_logging\nclass ConfigParser:\n    def __init__(self, args, options='', timestamp=True, slave_mode=False):"
        },
        {
            "comment": "The code initializes the argument parser, adds options to parse default and custom CLI options, handles slave mode (avoiding reinitializing logger), parses arguments, checks for a config file, and loads the configuration. If an evaluation config is specified, it validates the path to the evaluation file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":35-61",
            "content": "        # slave_mode - when calling the config parser form an existing process, we\n        # avoid reinitialising the logger and ignore sys.argv when argparsing.\n        # parse default and custom cli options\n        for opt in options:\n            args.add_argument(*opt.flags, default=None, type=opt.type)\n        if slave_mode:\n            args = args.parse_args(args=[])\n        else:\n            args = args.parse_args()\n        if args.resume and not slave_mode:\n            self.resume = Path(args.resume)\n        else:\n            msg_no_cfg = \"Config file must be specified\"\n            assert args.config is not None, msg_no_cfg\n            self.resume = None\n        self.cfg_fname = Path(args.config)\n        config = self.load_config(self.cfg_fname)\n        self._config = _update_config(config, options, args)\n        if self._config.get(\"eval_config\", False):\n            # validate path to evaluation file\n            eval_cfg_path = self._config.get(\"eval_config\")\n            msg = f\"eval_config was specified, but `{eval_cfg_path}` does not exist\""
        },
        {
            "comment": "The code sets the save directory for the trained model and logs based on whether \"tester\" or \"trainer\" is specified in the configuration. It also creates a timestamp to differentiate experiments, handles slave mode, sets the experiment name using given arguments, and if group_id and group_seed are provided, it generates subdirectories accordingly. Additionally, it checks if the user wants to purge previous experiments with the current config and removes them if true.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":62-87",
            "content": "            assert Path(self._config.get(\"eval_config\")).exists(), msg\n        # set save_dir where trained model and log will be saved.\n        if \"tester\" in self.config:\n            save_dir = Path(self.config['tester']['save_dir'])\n        else:\n            save_dir = Path(self.config['trainer']['save_dir'])\n        timestamp = datetime.now().strftime(r\"%Y-%m-%d_%H-%M-%S\") if timestamp else \"\"\n        if slave_mode:\n            timestamp = f\"{timestamp}-eval-worker\"\n        exper_name = self.set_exper_name(args, config=config)\n        if getattr(args, \"group_id\", False):\n            subdir = Path(args.group_id) / f\"seed-{args.group_seed}\" / timestamp\n        else:\n            subdir = timestamp\n        self._save_dir = save_dir / 'models' / exper_name / subdir\n        self._log_dir = save_dir / 'log' / exper_name / subdir\n        self._exper_name = exper_name\n        self._args = args\n        # if set, remove all previous experiments with the current config\n        if vars(args).get(\"purge_exp_dir\", False):"
        },
        {
            "comment": "The code is purging directories from a specified directory and then recreates the save_dir and log_dir directories. It writes the updated config file to the checkpoint dir, sets up logging if not in slave mode, and assumes that config files are organized into directories with the name of the dataset.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":88-111",
            "content": "            for dirpath in (self._save_dir, self._log_dir):\n                config_dir = dirpath.parent\n                existing = list(config_dir.glob(\"*\"))\n                print(f\"purging {len(existing)} directories from config_dir...\")\n                tic = time.time()\n                os.system(f\"rm -rf {config_dir}\")\n                print(f\"Finished purge in {time.time() - tic:.3f}s\")\n        self.save_dir.mkdir(parents=True, exist_ok=True)\n        self.log_dir.mkdir(parents=True, exist_ok=True)\n        # save updated config file to the checkpoint dir\n        write_json(self.config, self.save_dir / 'config.json')\n        # configure logging module\n        if not slave_mode:\n            self.log_path = setup_logging(self.log_dir)\n        self.log_levels = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}\n    def set_exper_name(self, args, config):\n        # We assume that the config files are organised into directories such that\n        # each directory has the name of the dataset.\n        dataset_name = self.cfg_fname.parent.stem"
        },
        {
            "comment": "This code block handles configuration parsing, custom arguments, and some optional settings. It sets the experiment name based on dataset and config file name, then processes custom arguments to set nested keys in the configuration dictionary. The code also checks for disabled data loader workers and restricts training to a single epoch if specified.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":112-133",
            "content": "        exper_name = f\"{dataset_name}-{self.cfg_fname.stem}\"\n        if args.custom_args:\n            key_val_lists = args.custom_args.split(\"+\")\n            for key_val_pair in key_val_lists:\n                print(f\"parsing key-val pair : {key_val_pair}\")\n                key, val = key_val_pair.split(\"@\")\n                set_nested_key_val(key, val, self._config)\n                # remove periods from key names\n                key_ = key.replace(\"_.\", \"--\")\n                # remove commas from value names\n                val = val.replace(\",\", \"--\")\n                custom_tag = \"-\".join(key_.split(\".\")[-2:])\n                exper_name = f\"{exper_name}-{custom_tag}-{val}\"\n        if getattr(args, \"disable_workers\", False):\n            print(\"Disabling data loader workers....\")\n            config[\"data_loader\"][\"args\"][\"num_workers\"] = 0\n        if getattr(args, \"train_single_epoch\", False):\n            print(\"Restricting training to a single epoch....\")\n            config[\"trainer\"][\"epochs\"] = 1\n            config[\"trainer\"][\"save_period\"] = 1"
        },
        {
            "comment": "This code snippet defines a function that loads and processes a configuration file, initializes an instance of a class with a specific name and arguments, and returns the initialized instance. The configuration loading process applies inheritance through a config hierarchy and allows skipping the first saves in training.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":134-158",
            "content": "            config[\"trainer\"][\"skip_first_n_saves\"] = 0\n            exper_name = f\"{exper_name}-train-single-epoch\"\n        return exper_name\n    @staticmethod\n    @typechecked\n    def load_config(cfg_fname: Path) -> Dict:\n        config = read_json(cfg_fname)\n        # apply inheritance through config hierarchy\n        descendant, ancestors = config, []\n        while \"inherit_from\" in descendant:\n            parent_config = read_json(Path(descendant[\"inherit_from\"]))\n            ancestors.append(parent_config)\n            descendant = parent_config\n        for ancestor in ancestors:\n            merge(ancestor, config, strategy=Strategy.REPLACE)\n            config = ancestor\n        return config\n    def init(self, name, module, *args, **kwargs):\n        \"\"\"Finds a function handle with the name given as 'type' in config, and returns\n        the instance initialized with corresponding keyword args given as 'args'.\n        \"\"\"\n        module_name = self[name]['type']\n        module_args = dict(self[name]['args'])"
        },
        {
            "comment": "Function checks if any overwriting kwargs are present in the module_args and raises an error if so. It then updates the module_args with all kwargs, returns a function call using the updated args. The code also provides functionality to access, set, check containment, get keys of the config, and get values with default option.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":159-189",
            "content": "        msg = (f\"Fail for {module_name}\\n\"\n               f\"overwriting kwargs given in config file is not allowed\\n\"\n               f\"passed kwargs: {kwargs}\\n\"\n               f\"for module_args: {module_args})\")\n        assert all([k not in module_args for k in kwargs]), msg\n        module_args.update(kwargs)\n        return getattr(module, module_name)(*args, **module_args)\n    def __getitem__(self, name):\n        return self.config[name]\n    def __len__(self):\n        # NOTE: This is used for boolean checking deep inside ray.tune, so we required it\n        # to be defined.\n        return len(self.config)\n    def __setitem__(self, name, value):\n        self.config[name] = value\n    def __contains__(self, name):\n        return name in self.config\n    def get(self, name, default):\n        return self.config.get(name, default)\n    def keys(self):\n        return self.config.keys()\n    def get_logger(self, name, verbosity=2):\n        msg_verbosity = \"verbosity option {} is invalid. Valid options are {}.\"\n        msg_verbosity = msg_verbosity.format(verbosity, self.log_levels.keys())"
        },
        {
            "comment": "This code snippet defines a class with properties for config, save_dir, and log_dir. It also has methods to iterate over items in the config dictionary and helper functions to update the config with custom CLI options. The logger is set based on the verbosity level provided.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":190-231",
            "content": "        assert verbosity in self.log_levels, msg_verbosity\n        logger = logging.getLogger(name)\n        logger.setLevel(self.log_levels[verbosity])\n        return logger\n    # setting read-only attributes\n    @property\n    def config(self):\n        return self._config\n    @property\n    def save_dir(self):\n        return self._save_dir\n    @property\n    def log_dir(self):\n        return self._log_dir\n    def __repr__(self):\n        return pprint.PrettyPrinter().pformat(self.__dict__)\n    def items(self):\n        return self._config.items()\n# helper functions used to update config dict with custom cli options\ndef _update_config(config, options, args):\n    for opt in options:\n        value = getattr(args, _get_opt_name(opt.flags))\n        if value is not None:\n            _set_by_path(config, opt.target, value)\n    return config\ndef _get_opt_name(flags):\n    for flg in flags:\n        if flg.startswith('--'):\n            return flg.replace('--', '')\n    return flags[0].replace('--', '')\ndef _set_by_path(tree, keys, value):"
        },
        {
            "comment": "This code snippet defines two functions, `_get_by_path` and `set_in_nested`, for accessing and modifying values in a nested object using a sequence of keys. The `_get_by_path` function uses the `reduce` function with `getitem` as the function argument to iterate through the keys and return the nested object's value, while `set_in_nested` sets a new value in a nested object by first accessing the nested object using the provided keys and then setting the final key's value.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/T2VLAD/parse_config.py\":232-238",
            "content": "    \"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"\n    _get_by_path(tree, keys[:-1])[keys[-1]] = value\ndef _get_by_path(tree, keys):\n    \"\"\"Access a nested object in tree by sequence of keys.\"\"\"\n    return reduce(getitem, keys, tree)"
        }
    ]
}