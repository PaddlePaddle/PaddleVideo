{
    "summary": "The Python class VOS_Test extends BaseDataset for video object segmentation tasks and supports pipeline mode, color type options, and resizing. The Davis 2017 dataset is initialized in PaddleVideo and returns a sequence dataset with images, labels, and fixed resolution of 480 pixels.",
    "details": [
        {
            "comment": "This code snippet is from PaddleVideo's davis_dataset.py file and it appears to be a Python class named VOS_Test, which extends the BaseDataset class from the same module. The class is used for processing frames in each video of a dataset. It takes image_root and label_root as input parameters for accessing the required data. The logger is imported from paddle.utils to log any relevant information during execution. This dataset seems to be designed for video object segmentation (VOS) tasks, commonly used in computer vision applications.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":0-36",
            "content": "# copyright (c) 2021 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nimport os.path as osp\nimport copy\nimport random\nimport numpy as np\nimport shutil\nfrom PIL import Image\nimport cv2\nfrom paddle.io import Dataset\nfrom ..registry import DATASETS\nfrom .base import BaseDataset\nfrom ...utils import get_logger\nlogger = get_logger(\"paddlevideo\")\nclass VOS_Test(Dataset):\n    \"\"\"process frames in each video\n    \"\"\"\n    def __init__(self,\n                 image_root,\n                 label_root,"
        },
        {
            "comment": "This code initializes the dataset with image and label file lists, image root and label root paths. It sets object number, total frames, pipeline mode, color type, resolution, creates an object numbers list, and assigns object numbers from labels.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":37-65",
            "content": "                 seq_name,\n                 images,\n                 labels,\n                 pipeline=None,\n                 rgb=False,\n                 resolution=None):\n        self.image_root = image_root\n        self.label_root = label_root\n        self.seq_name = seq_name\n        self.images = images  # image file list\n        self.labels = labels\n        self.obj_num = 1\n        self.num_frame = len(self.images)\n        self.pipeline = pipeline\n        self.rgb = rgb\n        self.resolution = resolution\n        self.obj_nums = []\n        temp_obj_num = 0\n        for img_name in self.images:\n            self.obj_nums.append(temp_obj_num)\n            current_label_name = img_name.split('.')[0] + '.png'\n            if current_label_name in self.labels:\n                current_label = self.read_label(current_label_name)\n                if temp_obj_num < np.unique(\n                        current_label)[-1]:  #get object number from label_id\n                    temp_obj_num = np.unique(current_label)[-1]\n    def __len__(self):"
        },
        {
            "comment": "This code defines a class that loads data from the DAVIS dataset. It first returns the number of images in the dataset, then reads an image at a given index, and finally reads a corresponding label for the image. The class also allows resizing the images to a specified resolution if needed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":66-93",
            "content": "        return len(self.images)\n    def read_image(self, idx):\n        img_name = self.images[idx]\n        img_path = os.path.join(self.image_root, self.seq_name, img_name)\n        img = cv2.imread(img_path)\n        img = np.array(img, dtype=np.float32)\n        if self.rgb:\n            img = img[:, :, [2, 1, 0]]\n        return img\n    def read_label(self, label_name):\n        label_path = os.path.join(self.label_root, self.seq_name, label_name)\n        label = Image.open(label_path)\n        label = np.array(label, dtype=np.uint8)\n        return label\n    def __getitem__(self, idx):\n        img_name = self.images[idx]\n        current_img = self.read_image(idx)\n        current_img = np.array(current_img)\n        height, width, channels = current_img.shape\n        if self.resolution is not None:\n            width = int(np.ceil(float(width) * self.resolution / float(height)))\n            height = int(self.resolution)\n        current_label_name = img_name.split('.')[0] + '.png'\n        obj_num = self.obj_nums[idx]"
        },
        {
            "comment": "The function generates a sample for a dataset, including image and label data. It checks if the current_label_name is in labels, reads the label if present, creates a sample dictionary, adds metadata to the sample, applies a pipeline if one is specified, and converts 'current_img' to numpy array format.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":95-126",
            "content": "        if current_label_name in self.labels:\n            current_label = self.read_label(current_label_name)\n            current_label = np.array(current_label)\n            sample = {\n                'current_img': current_img,\n                'current_label': current_label\n            }\n        else:\n            sample = {\n                'current_img': current_img\n            }  #only the first frame contains label\n        sample['meta'] = {\n            'seq_name': self.seq_name,\n            'frame_num': self.num_frame,\n            'obj_num': obj_num,\n            'current_name': img_name,\n            'height': height,\n            'width': width,\n            'flip': False\n        }\n        if self.pipeline is not None:\n            sample = self.pipeline(sample)\n        for s in sample:\n            s['current_img'] = np.array(s['current_img'])\n            if 'current_label' in s.keys():\n                s['current_label'] = s['current_label']\n        return sample\n@DATASETS.register()\nclass DavisDataset(BaseDataset):"
        },
        {
            "comment": "The code represents the initialization and file loading process for the Davis 2017 dataset in PaddleVideo. The constructor takes various parameters like file path, result root, pipeline, data prefix, test mode, year, rgb, and resolution to initialize the class attributes. The load_file() method sets image and label roots based on the provided resolution and reads the sequence names from a specified file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":127-157",
            "content": "    \"\"\"Davis 2017 dataset.\n    \"\"\"\n    def __init__(\n        self,\n        file_path,\n        result_root,\n        pipeline,\n        data_prefix=None,\n        test_mode=False,\n        year=2017,\n        rgb=False,\n        resolution='480p',\n    ):\n        self.rgb = rgb\n        self.result_root = result_root\n        self.resolution = resolution\n        self.year = year\n        self.spt = 'val' if test_mode else 'train'\n        super().__init__(file_path, pipeline, data_prefix, test_mode)\n    def load_file(self):\n        self.image_root = os.path.join(self.file_path, 'JPEGImages',\n                                       self.resolution)\n        self.label_root = os.path.join(self.file_path, 'Annotations',\n                                       self.resolution)\n        seq_names = []\n        with open(\n                os.path.join(self.file_path, 'ImageSets', str(self.year),\n                             self.spt + '.txt')) as f:\n            seqs_tmp = f.readlines()\n        seqs_tmp = list(map(lambda elem: elem.strip(), seqs_tmp))"
        },
        {
            "comment": "This function prepares a test dataset for the VOS task. It retrieves the video name from the info list, then lists all image files in the corresponding directory and adds the first frame as the target label. If the target label does not exist in the result directory, it creates the necessary directories and copies the target label file to the correct location.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":158-181",
            "content": "        seq_names.extend(seqs_tmp)\n        self.info = list(np.unique(seq_names))\n        return self.info\n    def prepare_test(self, idx):\n        seq_name = self.info[idx]  #video name\n        images = list(\n            np.sort(os.listdir(os.path.join(self.image_root, seq_name))))\n        labels = [images[0].replace('jpg', 'png')]  #we have first frame target\n        # copy first frame target\n        if not os.path.isfile(\n                os.path.join(self.result_root, seq_name, labels[0])):\n            if not os.path.exists(os.path.join(self.result_root, seq_name)):\n                os.makedirs(os.path.join(self.result_root, seq_name))\n            source_label_path = os.path.join(self.label_root, seq_name,\n                                             labels[0])\n            result_label_path = os.path.join(self.result_root, seq_name,\n                                             labels[0])\n            shutil.copy(source_label_path, result_label_path)\n        seq_dataset = VOS_Test(self.image_root,\n                               self.label_root,"
        },
        {
            "comment": "This code is returning a sequence dataset named seq_name with associated images and labels, processed by the pipeline function specified, potentially using RGB format if self.rgb is True, and a fixed resolution of 480 pixels.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/loader/dataset/davis_dataset.py\":182-188",
            "content": "                               seq_name,\n                               images,\n                               labels,\n                               self.pipeline,\n                               rgb=self.rgb,\n                               resolution=480)\n        return seq_dataset"
        }
    ]
}