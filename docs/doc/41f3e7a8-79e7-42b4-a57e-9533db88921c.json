{
    "summary": "This script prepares environment for benchmarking PaddleVideo model, trains with varying batch sizes and precisions, measures execution time, and processes log files to extract performance metrics.",
    "details": [
        {
            "comment": "This script is a Bash function for running benchmark training on PaddlePaddle GPU. It sets environment variables, parses command line arguments, and executes the benchmark training using the provided configuration file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":0-41",
            "content": "#!/bin/bash\nsource test_tipc/common_func.sh\n# set env\npython=python\nexport model_branch=`git symbolic-ref HEAD 2>/dev/null | cut -d\"/\" -f 3`\nexport model_commit=$(git log|head -n1|awk '{print $2}')\nexport str_tmp=$(echo `pip list|grep paddlepaddle-gpu|awk -F ' ' '{print $2}'`)\nexport frame_version=${str_tmp%%.post*}\nexport frame_commit=$(echo `${python} -c \"import paddle;print(paddle.version.commit)\"`)\n# BENCHMARK_ROOT='.'  # only for self-test\n# run benchmark sh\n# Usage:\n# bash run_benchmark_train.sh config.txt params\n# or\n# bash run_benchmark_train.sh config.txt\nfunction func_parser_params(){\n    strs=$1\n    IFS=\"=\"\n    array=(${strs})\n    tmp=${array[1]}\n    echo ${tmp}\n}\nfunction func_sed_params(){\n    filename=$1\n    line=$2\n    param_value=$3\n    params=`sed -n \"${line}p\" $filename`\n    IFS=\":\"\n    array=(${params})\n    key=${array[0]}\n    value=${array[1]}\n    if [[ $value =~ 'benchmark_train' ]];then\n        IFS='='\n        _val=(${value})\n        param_value=\"${param_value}\"\n    fi\n    new_params=\"${key}:${param_value}\""
        },
        {
            "comment": "This code defines functions to modify parameters in a file and set GPU IDs. It then copies the input filename, sets the mode as \"benchmark_train\", and processes additional parameters. The script performs operations such as modifying lines in the file and replacing \"trainer:norm_train\" with \"trainer:to_static_train\". The purpose of this code seems to be related to manipulating configuration files for a program using PaddleVideo's test_tipc directory.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":42-85",
            "content": "    IFS=\";\"\n    cmd=\"sed -i '${line}s/.*/${new_params}/' '${filename}'\"\n    eval $cmd\n}\nfunction set_gpu_id(){\n    string=$1\n    _str=${string:1:6}\n    IFS=\"C\"\n    arr=(${_str})\n    M=${arr[0]}\n    P=${arr[1]}\n    gn=`expr $P - 1`\n    gpu_num=`expr $gn / $M`\n    seq=`seq -s \",\" 0 $gpu_num`\n    echo $seq\n}\nfunction get_repo_name(){\n    IFS=\";\"\n    cur_dir=$(pwd)\n    IFS=\"/\"\n    arr=(${cur_dir})\n    echo ${arr[-1]}\n}\nFILENAME=$1\n# copy FILENAME as new\nnew_filename=\"./test_tipc/benchmark_train.txt\"\ncmd=`yes|cp $FILENAME $new_filename`\nFILENAME=$new_filename\n# MODE must be one of ['benchmark_train']\nMODE=$2\nPARAMS=$3\nREST_ARGS=$4\n# bash test_tipc/benchmark_train.sh /workspace/PaddleVideo/test_tipc/configs/BMN/train_infer_python.txt benchmark_train dynamicTostatic_bs8_fp32_DP_N1C8\nto_static=\"\"\n# parse \"to_static\" options and modify trainer into \"to_static_trainer\"\nif [[ $PARAMS =~ \"dynamicTostatic\" ]] ;then\n   to_static=\"d2sT_\"\n   sed -i 's/trainer:norm_train/trainer:to_static_train/g' $FILENAME\n   # clear PARAM contents\n   if [ $PARAMS = \"to_static\" ] ;then"
        },
        {
            "comment": "The code is parsing parameters from the \"train_benchmark.txt\" file and setting variables such as model name, batch size, fp_items, epoch, profile option key, profile option parameters, flags value, and max_iters value for training purposes. These values will be used to train a specific model with given parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":86-122",
            "content": "    PARAMS=\"\"\n   fi\nfi\nIFS=$'\\n'\n# parser params from train_benchmark.txt\ndataline=`cat $FILENAME`\n# parser params\nIFS=$'\\n'\nlines=(${dataline})\nmodel_name=$(func_parser_value \"${lines[1]}\")\n# \u83b7\u53d6'train_benchmark_params'\u6240\u5728\u7684\u884c\u6570\nline_num=`grep -n -w \"train_benchmark_params\" $FILENAME  | cut -d \":\" -f 1`\n# for train log parser\nbatch_size=$(func_parser_value \"${lines[line_num]}\")\nline_num=`expr $line_num + 1`\nfp_items=$(func_parser_value \"${lines[line_num]}\")\nline_num=`expr $line_num + 1`\nepoch=$(func_parser_value \"${lines[line_num]}\")\nline_num=`expr $line_num + 1`\nprofile_option_key=$(func_parser_key \"${lines[line_num]}\")\nprofile_option_params=$(func_parser_value \"${lines[line_num]}\")\nprofile_option=\"${profile_option_key}:${profile_option_params}\"\nline_num=`expr $line_num + 1`\nflags_value=$(func_parser_value \"${lines[line_num]}\")\n# \u8bbe\u7f6e\u6bcf\u4e2a\u6a21\u578bmax-iters\uff0c\u4ee5\u83b7\u53d6\u7a33\u5b9a\u7684ips\nline_num=`expr $line_num + 1`\nmax_iters_value=$(func_parser_value \"${lines[line_num]}\")\n# set flags\nIFS=\";\"\nflags_list=(${flags_value})\nfor _flag in ${flags_list[*]}; do"
        },
        {
            "comment": "This code is setting environment variables, defining log file locations and names, and using sed commands to modify a configuration file. It then executes the modified configuration file with additional command line parameters. This is likely part of a benchmarking or training process for machine learning or video processing tasks.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":123-157",
            "content": "    cmd=\"export ${_flag}\"\n    eval $cmd\ndone\n# set log_name\nrepo_name=$(get_repo_name )\nSAVE_LOG=${BENCHMARK_LOG_DIR:-$(pwd)}   # */benchmark_log\nmkdir -p \"${SAVE_LOG}/benchmark_log/\"\nstatus_log=\"${SAVE_LOG}/benchmark_log/results.log\"\n# get benchmark profiling params : PROFILING_TIMER_ONLY=no|True|False\nPROFILING_TIMER_ONLY=${PROFILING_TIMER_ONLY:-\"True\"}\n# The number of lines in which train params can be replaced.\nline_python=3\nline_gpuid=4\nline_precision=6\nline_epoch=7\nline_batchsize=9\nline_profile=12\nline_eval_py=24\nline_eval_py_2=25\nline_export_py=38\nline_export_py_2=28\nline_export_py_3=30\nline_norm_train=16\nfunc_sed_params \"$FILENAME\" \"${line_eval_py}\" \"null\"\nfunc_sed_params \"$FILENAME\" \"${line_eval_py_2}\" \"null\"\nfunc_sed_params \"$FILENAME\" \"${line_export_py}\" \"null\"\nfunc_sed_params \"$FILENAME\" \"${line_export_py_2}\" \"null\"\nfunc_sed_params \"$FILENAME\" \"${line_export_py_3}\" \"null\"\nfunc_sed_params \"$FILENAME\" \"${line_python}\"  \"$python\"\n# \u672b\u5c3e\u52a0\u4e0a--max_iters=30\u548c--log_interval=1\uff0c\u4ee5\u4fbf\u8fd0\u884c\u5e76\u8f93\u51fa\u8db3\u91cf\u6570\u636e\nset_log_interval_cmd=\"sed -i '${line_norm_train}s/.*/& --max_iters=${max_iters_value} -o log_interval=1/' '${filename}'\""
        },
        {
            "comment": "This code is parsing parameters and configuring the environment for benchmarking. It removes \"validate\" from the command, checks if the input is a dynamic or static parameter, and then assigns variables based on the type of model, batch size, precision, run mode, and device number. If the precision is null, it defaults to fp32.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":158-196",
            "content": "eval $set_log_interval_cmd\n# \u53bb\u6389--validate\uff0cbenchmark\u4e0d\u9700\u8981validate\nremove_validate_cmd=\"sed -i '${line_norm_train}s/--validate//' '${filename}'\"\neval $remove_validate_cmd\n# if params\nif  [ ! -n \"$PARAMS\" ] ;then\n    # PARAMS input is not a word.\n    IFS=\"|\"\n    batch_size_list=(${batch_size})\n    fp_items_list=(${fp_items})\n    device_num_list=(N1C4)\n    run_mode=\"DP\"\nelif [[ ${PARAMS} = \"dynamicTostatic\" ]] ;then\n    IFS=\"|\"\n    model_type=$PARAMS\n    batch_size_list=(${batch_size})\n    fp_items_list=(${fp_items})\n    device_num_list=(N1C4)\n    run_mode=\"DP\"\nelse\n    # parser params from input: modeltype_bs${bs_item}_${fp_item}_${run_mode}_${device_num}\n    IFS=\"_\"\n    params_list=(${PARAMS})\n    model_type=${params_list[0]}\n    batch_size=${params_list[1]}\n    batch_size=`echo  ${batch_size} | tr -cd \"[0-9]\" `\n    precision=${params_list[2]}\n    run_mode=${params_list[3]}\n    device_num=${params_list[4]}\n    IFS=\";\"\n    if [ ${precision} = \"null\" ];then\n        precision=\"fp32\"\n    fi\n    fp_items_list=($precision)\n    batch_size_list=($batch_size)"
        },
        {
            "comment": "The code is iterating over different combinations of batch sizes and precisions to train the PaddleVideo model. It sets up various environment variables and uses sed to modify a file before running the training script on specific GPUs. The profile option determines if only timer information should be logged or if full profiling data should be collected.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":197-219",
            "content": "    device_num_list=($device_num)\nfi\nlog_interval='--log_interval 1'\nIFS=\"|\"\nfor batch_size in ${batch_size_list[*]}; do\n    for precision in ${fp_items_list[*]}; do\n        for device_num in ${device_num_list[*]}; do\n            # sed batchsize and precision\n            func_sed_params \"$FILENAME\" \"${line_precision}\" \"$precision\"\n            func_sed_params \"$FILENAME\" \"${line_batchsize}\" \"$batch_size\"\n            func_sed_params \"$FILENAME\" \"${line_epoch}\" \"$epoch\"\n            gpu_id=$(set_gpu_id $device_num)\n            if [ ${#gpu_id} -le 1 ];then\n                func_sed_params \"$FILENAME\" \"${line_gpuid}\" \"0\"  # sed used gpu_id \n                if [[ ${PROFILING_TIMER_ONLY} != \"no\" ]];then\n                    echo \"run profile\"\n                    # The default value of profile_option's timer_only parameter is True\n                    if [[ ${PROFILING_TIMER_ONLY} = \"False\" ]];then\n                        profile_option=\"${profile_option};timer_only=False\"\n                    fi\n                    log_path=\"$SAVE_LOG/profiling_log\""
        },
        {
            "comment": "Creates a directory for log storage, sets the name of the log file based on various parameters, modifies profile option settings if necessary (for TimeSformer models), and then runs test_train_inference_python.sh script with provided arguments, redirecting output to the specified log path.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":220-233",
            "content": "                    mkdir -p $log_path\n                    log_name=\"${repo_name}_${model_name}_bs${batch_size}_${precision}_${run_mode}_${device_num}_${to_static}profiling\"\n                    # set profile_option params\n                    tmp=`sed -i \"${line_profile}s/.*/\\\"${profile_option}\\\"/\" \"${FILENAME}\"`\n                    # for models which need to accumulate gradient.\n                    if [[ ${model_name} =~ \"TimeSformer\" ]]; then\n                        global_bs=`expr ${batch_size} \\* ${device_num:3:4} \\* 8`\n                        modify_global_bs_cmd=\"sed -i '${line_norm_train}s/.*/& -o GRADIENT_ACCUMULATION.global_batch_size=${global_bs}/' '${filename}'\"\n                        eval $modify_global_bs_cmd\n                    fi\n                    # run test_train_inference_python.sh\n                    cmd=\"timeout 5m bash test_tipc/test_train_inference_python.sh ${FILENAME} benchmark_train > ${log_path}/${log_name} 2>&1 \"\n                    echo $cmd\n                    eval ${cmd}"
        },
        {
            "comment": "This code snippet executes a script without profiling. It sets the log and speed log paths, creates directories if necessary, and then runs a command to execute the test_train_inference_python.sh script. The run time is measured and stored in model_run_time variable. Finally, it displays the execution log.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":234-252",
            "content": "                    eval \"cat ${log_path}/${log_name}\"\n                fi\n                echo \"run without profile\"  \n                # without profile\n                log_path=\"$SAVE_LOG/train_log\"\n                speed_log_path=\"$SAVE_LOG/index\"\n                mkdir -p $log_path\n                mkdir -p $speed_log_path\n                log_name=\"${repo_name}_${model_name}_bs${batch_size}_${precision}_${run_mode}_${device_num}_${to_static}log\"\n                speed_log_name=\"${repo_name}_${model_name}_bs${batch_size}_${precision}_${run_mode}_${device_num}_${to_static}speed\"\n                func_sed_params \"$FILENAME\" \"${line_profile}\" \"null\"  # sed profile_id as null\n                cmd=\"bash test_tipc/test_train_inference_python.sh ${FILENAME} benchmark_train > ${log_path}/${log_name} 2>&1 \"\n                echo $cmd\n                job_bt=`date '+%Y%m%d%H%M%S'`\n                eval $cmd\n                job_et=`date '+%Y%m%d%H%M%S'`\n                export model_run_time=$((${job_et}-${job_bt}))\n                eval \"cat ${log_path}/${log_name}\""
        },
        {
            "comment": "This code section is using Python to execute an analysis script. The analysis script processes log files, extracting performance metrics like inference per second (ips) and loss convergence data. It also handles skipping steps during processing and considers the device used for computation. The resulting status is logged into a specified file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":254-273",
            "content": "                # parser log\n                _model_name=\"${model_name}_bs${batch_size}_${precision}_${run_mode}\"\n                cmd=\"${python} ${BENCHMARK_ROOT}/scripts/analysis.py --filename ${log_path}/${log_name} \\\n                        --speed_log_file '${speed_log_path}/${speed_log_name}' \\\n                        --model_name ${_model_name} \\\n                        --base_batch_size ${batch_size} \\\n                        --run_mode ${run_mode} \\\n                        --fp_item ${precision} \\\n                        --keyword ips: \\\n                        --skip_steps 5 \\\n                        --device_num ${device_num} \\\n                        --speed_unit instance/sec \\\n                        --convergence_key loss: \"\n                echo $cmd\n                eval $cmd\n                last_status=${PIPESTATUS[0]}\n                status_check $last_status \"${cmd}\" \"${status_log}\" \"${model_name}\"\n            else\n                IFS=\";\"\n                unset_env=`unset CUDA_VISIBLE_DEVICES`"
        },
        {
            "comment": "Creates log and speed directories, sets variable names for logging files. Uses sed to modify the config file with gpu_id, profile option as null, and adjusts global batch size for TimeSformer model that needs gradient accumulation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":274-287",
            "content": "                log_path=\"$SAVE_LOG/train_log\"\n                speed_log_path=\"$SAVE_LOG/index\"\n                mkdir -p $log_path\n                mkdir -p $speed_log_path\n                log_name=\"${repo_name}_${model_name}_bs${batch_size}_${precision}_${run_mode}_${device_num}_${to_static}log\"\n                speed_log_name=\"${repo_name}_${model_name}_bs${batch_size}_${precision}_${run_mode}_${device_num}_${to_static}speed\"\n                func_sed_params \"$FILENAME\" \"${line_gpuid}\" \"$gpu_id\"  # sed used gpu_id\n                func_sed_params \"$FILENAME\" \"${line_profile}\" \"null\"  # sed --profile_option as null\n                # for models which need to accumulate gradient.\n                if [[ ${model_name} =~ \"TimeSformer\" ]]; then\n                    global_bs=`expr ${batch_size} \\* ${device_num:3:4} \\* 8`\n                    modify_global_bs_cmd=\"sed -i '${line_norm_train}s/.*/& -o GRADIENT_ACCUMULATION.global_batch_size=${global_bs}/' '${filename}'\"\n                    eval $modify_global_bs_cmd"
        },
        {
            "comment": "This code segment is running a benchmark training script and logging the results. It measures the model run time, parses the log to extract information about the speed, and then passes this information to another script for further analysis. The script is designed to handle different batch sizes, precision types, and run modes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":288-307",
            "content": "                fi\n                cmd=\"bash test_tipc/test_train_inference_python.sh ${FILENAME} benchmark_train > ${log_path}/${log_name} 2>&1 \"\n                echo $cmd\n                job_bt=`date '+%Y%m%d%H%M%S'`\n                eval $cmd\n                job_et=`date '+%Y%m%d%H%M%S'`\n                export model_run_time=$((${job_et}-${job_bt}))\n                eval \"cat ${log_path}/${log_name}\"\n                # parser log\n                _model_name=\"${model_name}_bs${batch_size}_${precision}_${run_mode}\"\n                cmd=\"${python} ${BENCHMARK_ROOT}/scripts/analysis.py --filename ${log_path}/${log_name} \\\n                        --speed_log_file '${speed_log_path}/${speed_log_name}' \\\n                        --model_name ${_model_name} \\\n                        --base_batch_size ${batch_size} \\\n                        --run_mode ${run_mode} \\\n                        --fp_item ${precision} \\\n                        --keyword ips: \\\n                        --skip_steps 5 \\\n                        --device_num ${device_num} \\"
        },
        {
            "comment": "This code iterates through different models and configurations, running them with specified parameters. It logs the commands and checks their status to ensure successful execution.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/benchmark_train.sh\":308-317",
            "content": "                        --speed_unit instance/sec \\\n                        --convergence_key loss: \"\n                echo $cmd\n                eval $cmd\n                last_status=${PIPESTATUS[0]}\n                status_check $last_status \"${cmd}\" \"${status_log}\" \"${model_name}\"\n            fi\n        done\n    done\ndone"
        }
    ]
}