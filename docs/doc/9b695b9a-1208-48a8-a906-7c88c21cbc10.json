{
    "summary": "The code measures object detection performance, handles class labels and non-maximum suppression, and calculates true/false positives using an IoU threshold. It is used for AVA evaluation and contains functions to select class-specific data, remove invalid boxes, and filter input arrays.",
    "details": [
        {
            "comment": "This code file is for evaluating object detection results on a single image. It determines true positives or false positives based on a predefined IOU ratio. Non Maximum Supression and multi-class detection are supported. The evaluation can be performed either on boxes or object masks, depending on the settings.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":0-19",
            "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# =============================================================================\n\"\"\"Evaluate Object Detection result on a single image.\nAnnotate each detected result as true positives or false positive according to\na predefined IOU ratio. Non Maximum Supression is used by default. Multi class\ndetection is supported by default. Based on the settings, per image evaluation\nis either performed on boxes or on object masks."
        },
        {
            "comment": "This code initializes a class for evaluating detection results of a single image. It takes in parameters such as the number of ground truth classes and matching IOU threshold, and computes object detection metrics using detected boxes, scores, class labels, etc.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":20-52",
            "content": "\"\"\"\nimport numpy as np\nfrom . import np_box_list, np_box_ops\nclass PerImageEvaluation:\n    \"\"\"Evaluate detection result of a single image.\"\"\"\n    def __init__(self, num_groundtruth_classes, matching_iou_threshold=0.5):\n        \"\"\"Initialized PerImageEvaluation by evaluation parameters.\n        Args:\n            num_groundtruth_classes: Number of ground truth object classes\n            matching_iou_threshold: A ratio of area intersection to union,\n                which is the threshold to consider whether a detection is true\n                positive or not\n        \"\"\"\n        self.matching_iou_threshold = matching_iou_threshold\n        self.num_groundtruth_classes = num_groundtruth_classes\n    def compute_object_detection_metrics(\n        self,\n        detected_boxes,\n        detected_scores,\n        detected_class_labels,\n        groundtruth_boxes,\n        groundtruth_class_labels,\n        groundtruth_is_difficult_list,\n        groundtruth_is_group_of_list,\n        detected_masks=None,\n        groundtruth_masks=None,"
        },
        {
            "comment": "This function evaluates detections as true positives, false positives or ignored based on the detected and ground truth boxes. It works in two stages: 1) matching all detections to non group-of boxes for true positives, ignoring difficult ones; and 2) ignoring detections matched to group-of boxes. The inputs are numpy arrays of detected boxes, scores, class labels, and ground truth boxes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":53-72",
            "content": "    ):\n        \"\"\"Evaluates detections as being tp, fp or ignored from a single image.\n        The evaluation is done in two stages:\n        1. All detections are matched to non group-of boxes; true positives\n            are determined and detections matched to difficult boxes are\n            ignored.\n        2. Detections that are determined as false positives are matched\n            against group-of boxes and ignored if matched.\n        Args:\n            detected_boxes: A float numpy array of shape [N, 4], representing N\n                regions of detected object regions.\n                Each row is of the format [y_min, x_min, y_max, x_max]\n            detected_scores: A float numpy array of shape [N, 1], representing\n                the confidence scores of the detected N object instances.\n            detected_class_labels: A integer numpy array of shape [N, 1],\n                repreneting the class labels of the detected N object\n                instances.\n            groundtruth_boxes: A float numpy array of shape [M, 4],"
        },
        {
            "comment": "This code function accepts multiple parameters including ground truth regions, class labels, difficult instances, group-of tags, optional detected masks and ground truth masks. It returns a list of scores representing K scores detected with object class label c.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":73-90",
            "content": "                representing M regions of object instances in ground truth\n            groundtruth_class_labels: An integer numpy array of shape [M, 1],\n                representing M class labels of object instances in ground truth\n            groundtruth_is_difficult_list: A boolean numpy array of length M\n                denoting whether a ground truth box is a difficult instance or\n                not\n            groundtruth_is_group_of_list: A boolean numpy array of length M\n                denoting whether a ground truth box has group-of tag\n            detected_masks: (optional) A uint8 numpy array of shape\n                [N, height, width]. If not None, the metrics will be computed\n                based on masks.\n            groundtruth_masks: (optional) A uint8 numpy array of shape\n                [M, height, width].\n        Returns:\n            scores: A list of C float numpy arrays. Each numpy array is of\n                shape [K, 1], representing K scores detected with object class\n                label c"
        },
        {
            "comment": "This function is part of the AvaEvaluation class, which evaluates object detection performance in videos. It computes true positive and false positive labels for detected object instances based on ground truth information. The function removes invalid detection boxes before computing the tp_fp_labels. This helps in evaluating the accuracy of detected objects.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":91-114",
            "content": "            tp_fp_labels: A list of C boolean numpy arrays. Each numpy array\n                is of shape [K, 1], representing K True/False positive label of\n                object instances detected with class label c\n        \"\"\"\n        (\n            detected_boxes,\n            detected_scores,\n            detected_class_labels,\n            detected_masks,\n        ) = self._remove_invalid_boxes(\n            detected_boxes,\n            detected_scores,\n            detected_class_labels,\n            detected_masks,\n        )\n        scores, tp_fp_labels = self._compute_tp_fp(\n            detected_boxes=detected_boxes,\n            detected_scores=detected_scores,\n            detected_class_labels=detected_class_labels,\n            groundtruth_boxes=groundtruth_boxes,\n            groundtruth_class_labels=groundtruth_class_labels,\n            groundtruth_is_difficult_list=groundtruth_is_difficult_list,\n            groundtruth_is_group_of_list=groundtruth_is_group_of_list,\n            detected_masks=detected_masks,"
        },
        {
            "comment": "This code calculates true/false positives for object detection in an image across all classes. It takes detected boxes, scores, class labels, ground truth boxes, class labels, and optional masks as input, returning the computed scores and tp_fp_labels. The separate function computes tp_fp for a single image given the above inputs.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":115-142",
            "content": "            groundtruth_masks=groundtruth_masks,\n        )\n        return scores, tp_fp_labels\n    def _compute_tp_fp(\n        self,\n        detected_boxes,\n        detected_scores,\n        detected_class_labels,\n        groundtruth_boxes,\n        groundtruth_class_labels,\n        groundtruth_is_difficult_list,\n        groundtruth_is_group_of_list,\n        detected_masks=None,\n        groundtruth_masks=None,\n    ):\n        \"\"\"Labels true/false positives of detections of an image across all\n        classes.\n        Args:\n            detected_boxes: A float numpy array of shape [N, 4], representing N\n                regions of detected object regions.\n                Each row is of the format [y_min, x_min, y_max, x_max]\n            detected_scores: A float numpy array of shape [N, 1], representing\n                the confidence scores of the detected N object instances.\n            detected_class_labels: A integer numpy array of shape [N, 1],\n                repreneting the class labels of the detected N object"
        },
        {
            "comment": "The function takes input parameters like instances, groundtruth_boxes, groundtruth_class_labels, groundtruth_is_difficult_list, groundtruth_is_group_of_list, detected_masks and groundtruth_masks. It returns a list of float numpy arrays representing result scores based on these inputs. The function computes scores considering masks if detected_masks is not None and groundtruth_masks if it's not None.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":143-160",
            "content": "                instances.\n            groundtruth_boxes: A float numpy array of shape [M, 4],\n                representing M regions of object instances in ground truth\n            groundtruth_class_labels: An integer numpy array of shape [M, 1],\n                representing M class labels of object instances in ground truth\n            groundtruth_is_difficult_list: A boolean numpy array of length M\n                denoting whether a ground truth box is a difficult instance or\n                not\n            groundtruth_is_group_of_list: A boolean numpy array of length M\n                denoting whether a ground truth box has group-of tag\n            detected_masks: (optional) A np.uint8 numpy array of shape\n                [N, height, width]. If not None, the scores will be computed\n                based on masks.\n            groundtruth_masks: (optional) A np.uint8 numpy array of shape\n                [M, height, width].\n        Returns:\n            result_scores: A list of float numpy arrays. Each numpy array is of"
        },
        {
            "comment": "This function checks if both detected_masks and groundtruth_masks are not null. It then initializes result_scores and result_tp_fp_labels lists for storing scores and True/False positive labels of object instances respectively. If only one of the masks is available, it raises a ValueError. This function seems to be part of an AVA evaluation process where it deals with class label c, groundtruth_class_labels, detected_masks, and groundtruth_masks.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":161-182",
            "content": "                shape [K, 1], representing K scores detected with object class\n                label c\n            result_tp_fp_labels: A list of boolean numpy array. Each numpy\n                array is of shape [K, 1], representing K True/False positive\n                label of object instances detected with class label c\n        Raises:\n            ValueError: If detected masks is not None but groundtruth masks are\n                None, or the other way around.\n        \"\"\"\n        if detected_masks is not None and groundtruth_masks is None:\n            raise ValueError(\n                'Detected masks is available but groundtruth masks is not.')\n        if detected_masks is None and groundtruth_masks is not None:\n            raise ValueError(\n                'Groundtruth masks is available but detected masks is not.')\n        result_scores = []\n        result_tp_fp_labels = []\n        for i in range(self.num_groundtruth_classes):\n            groundtruth_is_difficult_list_at_ith_class = (\n                groundtruth_is_difficult_list[groundtruth_class_labels == i])"
        },
        {
            "comment": "The code is extracting per-class arrays for detected and ground truth objects. It separates the data into specific classes, computes true positive and false positive labels using a single class function, and assigns them to their respective variables.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":183-201",
            "content": "            groundtruth_is_group_of_list_at_ith_class = (\n                groundtruth_is_group_of_list[groundtruth_class_labels == i])\n            (\n                gt_boxes_at_ith_class,\n                gt_masks_at_ith_class,\n                detected_boxes_at_ith_class,\n                detected_scores_at_ith_class,\n                detected_masks_at_ith_class,\n            ) = self._get_ith_class_arrays(detected_boxes, detected_scores,\n                                           detected_masks,\n                                           detected_class_labels,\n                                           groundtruth_boxes,\n                                           groundtruth_masks,\n                                           groundtruth_class_labels, i)\n            scores, tp_fp_labels = self._compute_tp_fp_for_single_class(\n                detected_boxes=detected_boxes_at_ith_class,\n                detected_scores=detected_scores_at_ith_class,\n                groundtruth_boxes=gt_boxes_at_ith_class,\n                groundtruth_is_difficult_list=("
        },
        {
            "comment": "This code is calculating overlapping regions and scores between detected and ground truth boxes. It's taking in arrays of detected box coordinates, classification scores, ground truth box coordinates, and ground truth group indicators. The code then returns the resultant scores and true positive/false positive labels for each image. This seems to be part of an object detection or instance segmentation evaluation metric.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":202-227",
            "content": "                    groundtruth_is_difficult_list_at_ith_class),\n                groundtruth_is_group_of_list=(\n                    groundtruth_is_group_of_list_at_ith_class),\n                detected_masks=detected_masks_at_ith_class,\n                groundtruth_masks=gt_masks_at_ith_class,\n            )\n            result_scores.append(scores)\n            result_tp_fp_labels.append(tp_fp_labels)\n        return result_scores, result_tp_fp_labels\n    def _get_overlaps_and_scores_box_mode(\n        self,\n        detected_boxes,\n        detected_scores,\n        groundtruth_boxes,\n        groundtruth_is_group_of_list,\n    ):\n        \"\"\"Computes overlaps and scores between detected and groudntruth boxes.\n        Args:\n            detected_boxes: A numpy array of shape [N, 4] representing detected\n                box coordinates\n            detected_scores: A 1-d numpy array of length N representing\n                classification score\n            groundtruth_boxes: A numpy array of shape [M, 4] representing\n                ground truth box coordinates"
        },
        {
            "comment": "Code computes intersection over union (IoU) and intersection over area (IoA) between detected boxlists and ground truth boxlists. It also returns the scores of the detected boxes and the number of non-maximum suppressed detected boxes. The ground truth is_group_of_list is used to ignore group-of boxes during calculation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":228-248",
            "content": "            groundtruth_is_group_of_list: A boolean numpy array of length M\n                denoting whether a ground truth box has group-of tag. If a\n                groundtruth box is group-of box, every detection matching this\n                box is ignored.\n        Returns:\n            iou: A float numpy array of size [num_detected_boxes,\n                num_gt_boxes]. If gt_non_group_of_boxlist.num_boxes() == 0 it\n                will be None.\n            ioa: A float numpy array of size [num_detected_boxes,\n                num_gt_boxes]. If gt_group_of_boxlist.num_boxes() == 0 it will\n                be None.\n            scores: The score of the detected boxlist.\n            num_boxes: Number of non-maximum suppressed detected boxes.\n        \"\"\"\n        detected_boxlist = np_box_list.BoxList(detected_boxes)\n        detected_boxlist.add_field('scores', detected_scores)\n        gt_non_group_of_boxlist = np_box_list.BoxList(\n            groundtruth_boxes[~groundtruth_is_group_of_list])\n        iou = np_box_ops.iou(detected_boxlist.get(),"
        },
        {
            "comment": "This function labels boxes detected with the same class from the same image as true positives or false positives. It takes in the detected boxes, scores, ground truth boxes, and other relevant information to perform this labeling task. The output is determined based on the intersection-over-union (IoU) threshold between detected and ground truth boxes. If a detected box has an IoU greater than 0.5 with any ground truth box in the same class and image, it is considered a true positive (tp). Otherwise, it's considered a false positive (fp). The function also computes the number of detected boxes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":249-275",
            "content": "                             gt_non_group_of_boxlist.get())\n        scores = detected_boxlist.get_field('scores')\n        num_boxes = detected_boxlist.num_boxes()\n        return iou, None, scores, num_boxes\n    def _compute_tp_fp_for_single_class(\n        self,\n        detected_boxes,\n        detected_scores,\n        groundtruth_boxes,\n        groundtruth_is_difficult_list,\n        groundtruth_is_group_of_list,\n        detected_masks=None,\n        groundtruth_masks=None,\n    ):\n        \"\"\"Labels boxes detected with the same class from the same image as\n        tp/fp.\n        Args:\n            detected_boxes: A numpy array of shape [N, 4] representing detected\n                box coordinates\n            detected_scores: A 1-d numpy array of length N representing\n                classification score\n            groundtruth_boxes: A numpy array of shape [M, 4] representing\n                groundtruth box coordinates\n            groundtruth_is_difficult_list: A boolean numpy array of length M\n                denoting whether a ground truth box is a difficult instance or"
        },
        {
            "comment": "This function computes true positive (TP) and false positive (FP) labels for detected boxes based on whether they match difficult or group-of ground truth boxes. It returns scores and TP/FP labels, ignoring any detections that match these challenging boxes. Optional mask inputs are also supported to compute scores based on pixel-wise comparisons instead of bounding box overlaps.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":276-294",
            "content": "                not. If a groundtruth box is difficult, every detection\n                matching this box is ignored.\n            groundtruth_is_group_of_list: A boolean numpy array of length M\n                denoting whether a ground truth box has group-of tag. If a\n                groundtruth box is group-of box, every detection matching this\n                box is ignored.\n            detected_masks: (optional) A uint8 numpy array of shape\n                [N, height, width]. If not None, the scores will be computed\n                based on masks.\n            groundtruth_masks: (optional) A uint8 numpy array of shape\n                [M, height, width].\n        Returns:\n            Two arrays of the same size, containing all boxes that were\n            evaluated as being true positives or false positives; if a box\n            matched to a difficult box or to a group-of box, it is ignored.\n            scores: A numpy array representing the detection scores.\n            tp_fp_labels: a boolean numpy array indicating whether a detection"
        },
        {
            "comment": "This code checks for true positive detections by first obtaining the Intersection over Union (IoU) and scores between detected boxes and ground truth boxes. If there are no detected or ground truth boxes, it returns empty arrays. Then, it initializes variables to keep track of whether a detection is matched to a difficult box or a group-of box. The code proceeds in two stages: first, all detections are matched to non-group-of boxes, determining true positives, and then detections matched to difficult boxes are identified.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":295-321",
            "content": "                is a true positive.\n        \"\"\"\n        if detected_boxes.size == 0:\n            return np.array([], dtype=float), np.array([], dtype=bool)\n        (\n            iou,\n            _,\n            scores,\n            num_detected_boxes,\n        ) = self._get_overlaps_and_scores_box_mode(\n            detected_boxes=detected_boxes,\n            detected_scores=detected_scores,\n            groundtruth_boxes=groundtruth_boxes,\n            groundtruth_is_group_of_list=groundtruth_is_group_of_list,\n        )\n        if groundtruth_boxes.size == 0:\n            return scores, np.zeros(num_detected_boxes, dtype=bool)\n        tp_fp_labels = np.zeros(num_detected_boxes, dtype=bool)\n        is_matched_to_difficult_box = np.zeros(num_detected_boxes, dtype=bool)\n        is_matched_to_group_of_box = np.zeros(num_detected_boxes, dtype=bool)\n        # The evaluation is done in two stages:\n        # 1. All detections are matched to non group-of boxes; true positives\n        #    are determined and detections matched to difficult boxes are"
        },
        {
            "comment": "This code performs a TP-FP evaluation for non-group of boxes, ignoring difficult ground truth boxes and false positives matched to group-of boxes. It checks the IOU between detected boxes and ground truth boxes, and assigns labels accordingly.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":322-343",
            "content": "        #    ignored.\n        # 2. Detections that are determined as false positives are matched\n        #    against group-of boxes and ignored if matched.\n        # Tp-fp evaluation for non-group of boxes (if any).\n        if iou.shape[1] > 0:\n            groundtruth_nongroup_of_is_difficult_list = (\n                groundtruth_is_difficult_list[~groundtruth_is_group_of_list])\n            max_overlap_gt_ids = np.argmax(iou, axis=1)\n            is_gt_box_detected = np.zeros(iou.shape[1], dtype=bool)\n            for i in range(num_detected_boxes):\n                gt_id = max_overlap_gt_ids[i]\n                if iou[i, gt_id] >= self.matching_iou_threshold:\n                    if not groundtruth_nongroup_of_is_difficult_list[gt_id]:\n                        if not is_gt_box_detected[gt_id]:\n                            tp_fp_labels[i] = True\n                            is_gt_box_detected[gt_id] = True\n                    else:\n                        is_matched_to_difficult_box[i] = True\n        return (\n            scores[~is_matched_to_difficult_box & ~is_matched_to_group_of_box],"
        },
        {
            "comment": "This function, _get_ith_class_arrays, takes in various numpy arrays of detected and ground truth boxes, masks, and class labels. It then returns the corresponding numpy arrays for a specific class index.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":344-370",
            "content": "            tp_fp_labels[~is_matched_to_difficult_box\n                         & ~is_matched_to_group_of_box],\n        )\n    def _get_ith_class_arrays(\n        self,\n        detected_boxes,\n        detected_scores,\n        detected_masks,\n        detected_class_labels,\n        groundtruth_boxes,\n        groundtruth_masks,\n        groundtruth_class_labels,\n        class_index,\n    ):\n        \"\"\"Returns numpy arrays belonging to class with index `class_index`.\n        Args:\n            detected_boxes: A numpy array containing detected boxes.\n            detected_scores: A numpy array containing detected scores.\n            detected_masks: A numpy array containing detected masks.\n            detected_class_labels: A numpy array containing detected class\n                labels.\n            groundtruth_boxes: A numpy array containing groundtruth boxes.\n            groundtruth_masks: A numpy array containing groundtruth masks.\n            groundtruth_class_labels: A numpy array containing groundtruth\n                class labels."
        },
        {
            "comment": "This function returns ground truth boxes, masks (if provided), detected boxes, scores, and masks for a given class index. It selects the data corresponding to the class index from input arrays and returns them in separate numpy arrays.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":371-391",
            "content": "            class_index: An integer index.\n        Returns:\n            gt_boxes_at_ith_class: A numpy array containing groundtruth boxes\n                labeled as ith class.\n            gt_masks_at_ith_class: A numpy array containing groundtruth masks\n                labeled as ith class.\n            detected_boxes_at_ith_class: A numpy array containing detected\n                boxes corresponding to the ith class.\n            detected_scores_at_ith_class: A numpy array containing detected\n                scores corresponding to the ith class.\n            detected_masks_at_ith_class: A numpy array containing detected\n                masks corresponding to the ith class.\n        \"\"\"\n        selected_groundtruth = groundtruth_class_labels == class_index\n        gt_boxes_at_ith_class = groundtruth_boxes[selected_groundtruth]\n        if groundtruth_masks is not None:\n            gt_masks_at_ith_class = groundtruth_masks[selected_groundtruth]\n        else:\n            gt_masks_at_ith_class = None\n        selected_detections = detected_class_labels == class_index"
        },
        {
            "comment": "This code defines two functions: \n1. _get_class_specific_results: Extracts class-specific results from the given data and returns them in a tuple.\n2. _remove_invalid_boxes: Removes entries with invalid boxes from the given data. An invalid box is one where xmax < xmin or ymax < ymin.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":392-420",
            "content": "        detected_boxes_at_ith_class = detected_boxes[selected_detections]\n        detected_scores_at_ith_class = detected_scores[selected_detections]\n        if detected_masks is not None:\n            detected_masks_at_ith_class = detected_masks[selected_detections]\n        else:\n            detected_masks_at_ith_class = None\n        return (\n            gt_boxes_at_ith_class,\n            gt_masks_at_ith_class,\n            detected_boxes_at_ith_class,\n            detected_scores_at_ith_class,\n            detected_masks_at_ith_class,\n        )\n    def _remove_invalid_boxes(\n        self,\n        detected_boxes,\n        detected_scores,\n        detected_class_labels,\n        detected_masks=None,\n    ):\n        \"\"\"Removes entries with invalid boxes.\n        A box is invalid if either its xmax is smaller than its xmin, or its\n        ymax is smaller than its ymin.\n        Args:\n            detected_boxes: A float numpy array of size [num_boxes, 4]\n                containing box coordinates in [ymin, xmin, ymax, xmax] format."
        },
        {
            "comment": "This function performs a filtering operation on the input arrays (detected_boxes, detected_scores, detected_class_labels, and detected_masks). It keeps only those elements where the first element of the detected_box is less than its fourth element, and the second element of detected_box is less than its third element. The resulting valid indices are used to slice the input arrays into their valid subsets (valid_detected_boxes, valid_detected_scores, valid_detected_class_labels, and valid_detected_masks).",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":421-442",
            "content": "            detected_scores: A float numpy array of size [num_boxes].\n            detected_class_labels: A int32 numpy array of size [num_boxes].\n            detected_masks: A uint8 numpy array of size\n                [num_boxes, height, width].\n        Returns:\n            valid_detected_boxes: A float numpy array of size\n                [num_valid_boxes, 4] containing box coordinates in\n                [ymin, xmin, ymax, xmax] format.\n            valid_detected_scores: A float numpy array of size\n                [num_valid_boxes].\n            valid_detected_class_labels: A int32 numpy array of size\n                [num_valid_boxes].\n            valid_detected_masks: A uint8 numpy array of size\n                [num_valid_boxes, height, width].\n        \"\"\"\n        valid_indices = np.logical_and(\n            detected_boxes[:, 0] < detected_boxes[:, 2],\n            detected_boxes[:, 1] < detected_boxes[:, 3],\n        )\n        detected_boxes = detected_boxes[valid_indices]\n        detected_scores = detected_scores[valid_indices]"
        },
        {
            "comment": "Function returns detected bounding boxes, scores, class labels, and masks (if available) for valid indices only.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/per_image_evaluation.py\":443-451",
            "content": "        detected_class_labels = detected_class_labels[valid_indices]\n        if detected_masks is not None:\n            detected_masks = detected_masks[valid_indices]\n        return [\n            detected_boxes,\n            detected_scores,\n            detected_class_labels,\n            detected_masks,\n        ]"
        }
    ]
}