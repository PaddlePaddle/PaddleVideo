{
    "summary": "The code initializes paths, defines train_info and val_info dictionaries, sets interval variables, processes video frames, draws rectangles around objects based on labels, saves images with label information, and writes data to train.json and val.json files after processing all data from given folders.",
    "details": [
        {
            "comment": "The code initializes necessary paths and directories for annotation, training, and validation image paths. It creates the required directories if they do not exist. The code defines train_info and val_info as dictionaries containing information about images, annotations, and categories. It sets the interval variable for file processing and then iterates through each directory in the given path.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Anti-UAV/get_image_label.py\":0-52",
            "content": "import cv2\nimport os\nimport json\n# please change it to your path\npath = '/workspace/wangqingzhong/Anti_UAV'\nannotation_path = 'annotations'\ntrain_img_path = 'train_imgs'\nval_img_path = 'val_imgs'\nif not os.path.exists(annotation_path):\n    os.makedirs(annotation_path)\nif not os.path.exists(train_img_path):\n    os.makedirs(train_img_path)\nif not os.path.exists(val_img_path):\n    os.makedirs(val_img_path)\ntrain_info = {\n    'images': [],\n    'type':\n    'instances',\n    'annotations': [],\n    'categories': [{\n        \"supercategory\": \"none\",\n        \"id\": 1,\n        \"name\": \"drone\"\n    }, {\n        \"supercategory\": \"none\",\n        \"id\": 2,\n        \"name\": \"noise\"\n    }]\n}\nval_info = {\n    'images': [],\n    'type':\n    'instances',\n    'annotations': [],\n    'categories': [{\n        \"supercategory\": \"none\",\n        \"id\": 1,\n        \"name\": \"drone\"\n    }, {\n        \"supercategory\": \"none\",\n        \"id\": 2,\n        \"name\": \"noise\"\n    }]\n}\n# you can change it\ninterval = 5\ndirs = os.listdir(path)\ntrain_img_id = 0\nval_img_id = 0\nfor d in dirs:"
        },
        {
            "comment": "This code reads an image file and its label from a specified path. It then processes each frame of the video, drawing a rectangle around the object in the frame based on the provided labels. If the object exists, category_id is set to 1; otherwise, it's set to 2. Each processed frame is saved as an image file with its corresponding label information.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Anti-UAV/get_image_label.py\":53-76",
            "content": "    if 'new' in d:\n        video_file = os.path.join(path, d, 'IR.mp4')\n        label_file = os.path.join(path, d, 'IR_label.json')\n        labels = json.load(open(label_file, 'r'))\n        exits = labels['exist']\n        gt_bbox = labels['gt_rect']\n        assert len(exits) == len(gt_bbox)\n        videocap = cv2.VideoCapture(video_file)\n        i = 0\n        while True:\n            success, frame = videocap.read()\n            if success:\n                if i % interval == 0:\n                    img_name = d + '_' + str(i) + '.jpg'\n                    cv2.imwrite(os.path.join(val_img_path, img_name), frame)\n                    height, width, depth = frame.shape\n                    x, y, w, h = gt_bbox[i]\n                    isexist = exits[i]\n                    if isexist:\n                        category_id = 1\n                    else:\n                        category_id = 2\n                    draw_frame = cv2.rectangle(frame, (x, y), (x + w, y + h),\n                                               (0, 255, 0), 2)"
        },
        {
            "comment": "This code writes an image, creates image information (file name, height, width, and id), and annotation information (area, iscrowd, bbox coordinates, category_id, ignore, image_id, and id). It then appends the image and annotation information to the existing val_info data structure.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Anti-UAV/get_image_label.py\":77-100",
            "content": "                    img_name_draw = d + '_' + str(i) + 'draw.jpg'\n                    cv2.imwrite(os.path.join(val_img_path, img_name_draw),\n                                draw_frame)\n                    img_info = {\n                        'file_name': img_name,\n                        'height': float(height),\n                        'width': float(width),\n                        'id': val_img_id\n                    }\n                    ann_info = {\n                        'area': float(w) * float(h),\n                        'iscrowd': 0,\n                        'bbox': [float(x),\n                                 float(y),\n                                 float(w),\n                                 float(h)],\n                        'category_id': category_id,\n                        'ignore': 0,\n                        'image_id': val_img_id,\n                        'id': val_img_id + 1\n                    }\n                    val_info['images'].append(img_info)\n                    val_info['annotations'].append(ann_info)"
        },
        {
            "comment": "Code reads a video and its corresponding label file, then extracts frames based on labels and saves them. If the object exists in the frame, it is labeled as category_id 1, otherwise as category_id 2. The process continues until all frames have been processed or a \"finish\" message is encountered.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Anti-UAV/get_image_label.py\":101-127",
            "content": "                    val_img_id += 1\n                i += 1\n            else:\n                print('finish {}'.format(d))\n                break\n    else:\n        video_file = os.path.join(path, d, 'IR.mp4')\n        label_file = os.path.join(path, d, 'IR_label.json')\n        labels = json.load(open(label_file, 'r'))\n        exits = labels['exist']\n        gt_bbox = labels['gt_rect']\n        assert len(exits) == len(gt_bbox)\n        videocap = cv2.VideoCapture(video_file)\n        i = 0\n        while True:\n            success, frame = videocap.read()\n            if success:\n                if i % interval == 0:\n                    img_name = d + '_' + str(i) + '.jpg'\n                    cv2.imwrite(os.path.join(train_img_path, img_name), frame)\n                    height, width, depth = frame.shape\n                    x, y, w, h = gt_bbox[i]\n                    isexist = exits[i]\n                    if isexist:\n                        category_id = 1\n                    else:\n                        category_id = 2"
        },
        {
            "comment": "This code draws a rectangle around the detected object in an image, saves the image with the drawn rectangle, and creates two dictionaries (image and annotation information) to be used for training purposes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Anti-UAV/get_image_label.py\":128-150",
            "content": "                    draw_frame = cv2.rectangle(frame, (x, y), (x + w, y + h),\n                                               (0, 255, 0), 2)\n                    img_name_draw = d + '_' + str(i) + 'draw.jpg'\n                    cv2.imwrite(os.path.join(train_img_path, img_name_draw),\n                                draw_frame)\n                    img_info = {\n                        'file_name': img_name,\n                        'height': height,\n                        'width': width,\n                        'id': train_img_id\n                    }\n                    ann_info = {\n                        'area': float(w) * float(h),\n                        'iscrowd': 0,\n                        'bbox': [float(x),\n                                 float(y),\n                                 float(w),\n                                 float(h)],\n                        'category_id': category_id,\n                        'ignore': 0,\n                        'image_id': train_img_id,\n                        'id': train_img_id + 1"
        },
        {
            "comment": "Code writes image and annotation information to train.json and val.json files after processing all data from given folders, ending the loop when done.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Anti-UAV/get_image_label.py\":151-163",
            "content": "                    }\n                    train_info['images'].append(img_info)\n                    train_info['annotations'].append(ann_info)\n                    train_img_id += 1\n                i += 1\n            else:\n                print('finish {}'.format(d))\n                break\nwith open('annotations/train.json', 'w') as f:\n    json.dump(train_info, f)\nwith open('annotations/val.json', 'w') as f:\n    json.dump(val_info, f)"
        }
    ]
}