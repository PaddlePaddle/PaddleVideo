{
    "summary": "This code defines an abstract base class `BaseMetric` for metrics in PaddleVideo's EIVideo application. It initializes the metric object with data size, batch size, and world size from distributed environment. The abstract methods `update()` and `accumulate()` must be implemented by subclasses.",
    "details": [
        {
            "comment": "This code defines an abstract base class `BaseMetric` for metrics in PaddleVideo's EIVideo application. It initializes the metric object with data size, batch size, and world size from distributed environment. The abstract methods `update()` and `accumulate()` must be implemented by subclasses.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/EIVideo/paddlevideo/metrics/base.py\":0-29",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nfrom abc import abstractmethod\nfrom EIVideo.paddlevideo.utils import get_dist_info\nclass BaseMetric(object):\n    def __init__(self, data_size, batch_size, log_interval=1, **kwargs):\n        self.data_size = data_size\n        self.batch_size = batch_size\n        _, self.world_size = get_dist_info()\n        self.log_interval = log_interval\n    @abstractmethod\n    def update(self):\n        raise NotImplemented\n    @abstractmethod\n    def accumulate(self):\n        raise NotImplemented"
        }
    ]
}