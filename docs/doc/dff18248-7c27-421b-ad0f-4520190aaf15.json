{
    "summary": "The code defines AssignResult class, initializes MaxIoUAssignerAVA, assigns GT boxes to bboxes using max IOU method and handles multi-class cases. It's registered at BBOX_ASSIGNERS.",
    "details": [
        {
            "comment": "This code defines a class called \"AssignResult\" for storing the assigned results, including number of gts, ground truth indexes, maximum overlaps, and labels if available. It also includes a method called \"add_gt_\" to add ground truth as assigned results.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":0-26",
            "content": "# copyright (c) 2021 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport paddle\nimport numpy as np\nfrom ..registry import BBOX_ASSIGNERS\nfrom ..bbox_utils import bbox_overlaps\nclass AssignResult():\n    def __init__(self, num_gts, gt_inds, max_overlaps, labels=None):\n        self.num_gts = num_gts\n        self.gt_inds = gt_inds\n        self.max_overlaps = max_overlaps\n        self.labels = labels\n    def add_gt_(self, gt_labels):\n        \"\"\"Add ground truth as assigned results.  \"\"\""
        },
        {
            "comment": "This code initializes a MaxIoUAssignerAVA object by setting the self_inds and gt_inds attributes using paddle.arange and paddle.squeeze functions, concatenating them with paddle.concat function. It also sets max_overlaps attribute by concatenating gt_label_ones and max_overlaps_squeeze, and updates labels attribute if not None. The class is then registered at BBOX_ASSIGNERS with the decorator @BBOX_ASSIGNERS.register().",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":27-48",
            "content": "        self_inds = paddle.arange(1, len(gt_labels) + 1, dtype=\"int32\")\n        gt_inds_squeeze = paddle.squeeze(self.gt_inds, axis=0)\n        self.gt_inds = paddle.concat([self_inds, gt_inds_squeeze])\n        gt_label_ones = paddle.full((len(gt_labels), ), 1, dtype='float32')\n        max_overlaps_squeeze = paddle.squeeze(self.max_overlaps, axis=0)\n        self.max_overlaps = paddle.concat([gt_label_ones, max_overlaps_squeeze])\n        if self.labels is not None:\n            self.labels = paddle.concat([gt_labels, self.labels])\n@BBOX_ASSIGNERS.register()\nclass MaxIoUAssignerAVA():\n    \"\"\"Assign a corresponding gt bbox or background to each bbox.  \"\"\"\n    def __init__(self,\n                 pos_iou_thr,\n                 neg_iou_thr,\n                 min_pos_iou=.0,\n                 gt_max_assign_all=True,\n                 ignore_iof_thr=-1,\n                 ignore_wrt_candidates=True,\n                 match_low_quality=True,\n                 gpu_assign_thr=-1,\n                 iou_calculator=dict(type='BboxOverlaps2D')):"
        },
        {
            "comment": "The code defines a class that assigns ground truth (GT) boxes to bboxes. It takes in bboxes and GT bboxes as input, and returns the assignment result. The function assign_wrt_overlaps calculates assigned_gt_inds based on the overlaps of bboxes with gts.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":49-74",
            "content": "        self.pos_iou_thr = pos_iou_thr\n        self.neg_iou_thr = neg_iou_thr\n        self.min_pos_iou = min_pos_iou\n        self.gt_max_assign_all = gt_max_assign_all\n        self.ignore_iof_thr = ignore_iof_thr\n        self.ignore_wrt_candidates = ignore_wrt_candidates\n        self.gpu_assign_thr = gpu_assign_thr\n        self.match_low_quality = match_low_quality\n    def assign(self, \n               bboxes, \n               gt_bboxes, \n               gt_labels=None):\n        \"\"\"Assign gt to bboxes.  \"\"\"\n        overlaps = bbox_overlaps(gt_bboxes, bboxes)\n        assign_result = self.assign_wrt_overlaps(overlaps, gt_labels)\n        return assign_result\n    def assign_wrt_overlaps(self, overlaps, gt_labels=None):\n        \"\"\"Assign w.r.t. the overlaps of bboxes with gts.  \"\"\"\n        num_gts, num_bboxes = overlaps.shape[0], overlaps.shape[1]\n        # 1. assign -1\n        assigned_gt_inds = paddle.full((num_bboxes, ), -1, dtype='int32')\n        # for each anchor, which gt best overlaps with it\n        # for each anchor, the max iou of all gts"
        },
        {
            "comment": "This code assigns positive and negative labels to anchors based on their IoU with ground truth boxes. If the max IoU is above a certain threshold, it's considered positive. If it's below another threshold, it's negative. This process helps determine which anchor best overlaps with each ground truth box.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":75-92",
            "content": "        max_overlaps, argmax_overlaps = paddle.topk(overlaps, k=1, axis=0)\n        # for each gt, which anchor best overlaps with it\n        # for each gt, the max iou of all proposals\n        gt_max_overlaps, gt_argmax_overlaps = paddle.topk(overlaps, k=1, axis=1) \n        # 2. assign negative: below the negative inds are set to be 0\n        match_labels = paddle.full(argmax_overlaps.shape, -1, dtype='int32')\n        match_labels = paddle.where(max_overlaps < self.neg_iou_thr,\n                            paddle.zeros_like(match_labels), match_labels)\n        # 3. assign positive: above positive IoU threshold\n        argmax_overlaps_int32 = paddle.cast(argmax_overlaps, 'int32')\n        match_labels = paddle.where(max_overlaps >= self.pos_iou_thr,\n                                argmax_overlaps_int32 + 1, match_labels)\n        assigned_gt_inds = match_labels\n        if self.match_low_quality:\n            # Low-quality matching will overwirte the assigned_gt_inds\n            # assigned in Step 3. Thus, the assigned gt might not be the"
        },
        {
            "comment": "This code iterates over each ground truth (GT) bounding box, and if the IOU with a detection is above the minimum allowed position IOU, it checks whether all overlapping detections should be assigned to this GT. It creates a tensor of boolean values representing the assignment for each detection and GT pair. This is done by comparing the overlaps matrix and gt_max_overlaps, then reshaping and replacing match labels accordingly.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":93-108",
            "content": "            # best one for prediction.\n            # For example, if bbox A has 0.9 and 0.8 iou with GT bbox\n            # 1 & 2, bbox 1 will be assigned as the best target for bbox A\n            # in step 3. However, if GT bbox 2's gt_argmax_overlaps = A,\n            # bbox A's assigned_gt_inds will be overwritten to be bbox B.\n            # This might be the reason that it is not used in ROI Heads.\n            for i in range(num_gts):\n                if gt_max_overlaps.numpy()[i] >= self.min_pos_iou:\n                    if self.gt_max_assign_all:\n                        equal_x_np = overlaps[i, :].numpy()\n                        equal_y_np = gt_max_overlaps[i].numpy()\n                        max_iou_inds = np.equal(equal_x_np, equal_y_np)\n                        max_iou_inds = paddle.to_tensor(max_iou_inds)\n                        max_iou_inds = paddle.reshape( max_iou_inds, [1,max_iou_inds.shape[0]] )\n                        match_labels_gts = paddle.full(max_iou_inds.shape, i+1, dtype='int32')\n                        match_labels = paddle.where(max_iou_inds, match_labels_gts, match_labels)"
        },
        {
            "comment": "This code assigns ground truth (GT) labels and indices for maximum IOU Assigner in the AVA dataset. It handles both multi-class cases with multiple classes per label. If there is a match, GT indices are assigned, otherwise, it assigns index + 1. Finally, it considers the multi-class case by asserting the existence of more than one class and assigns zeros to the initial labels array before updating them based on the selected gt_labels.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":109-125",
            "content": "                        assigned_gt_inds = match_labels\n                    else:\n                        assigned_gt_inds[gt_argmax_overlaps[i]] = i + 1\n        if gt_labels is not None:\n            # consider multi-class case (AVA)\n            assert len(gt_labels[0]) > 1\n            assigned_labels = paddle.full([num_bboxes, len(gt_labels[0])], 0, dtype='float32')\n            assigned_gt_inds_reshape = assigned_gt_inds.reshape([assigned_gt_inds.shape[1]])\n            pos_inds = paddle.nonzero( assigned_gt_inds_reshape , as_tuple=False)\n            pos_inds_num = float(paddle.numel(pos_inds))\n            if pos_inds_num > 0:\n                pos_inds = paddle.squeeze(pos_inds, axis = 1 )\n                assigned_gt_inds_squeeze = paddle.squeeze(assigned_gt_inds, axis=0)\n                assigned_gt_inds_select = paddle.index_select(assigned_gt_inds_squeeze, pos_inds) - 1\n                gt_labels_select = paddle.index_select(gt_labels, assigned_gt_inds_select)\n                A = assigned_gt_inds_squeeze"
        },
        {
            "comment": "This code snippet is part of a max IOU assigner implementation in PaddleVideo. It assigns labels to objects based on the maximum IoU (intersection over union) threshold. If there's only one object, it assigns the ground truth index if the overlap is greater than 0, otherwise sets it to 0. For multiple objects, it uses a where statement to select the max IOU assignment. The assigned labels are then returned as part of the AssignResult.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/assigners/max_iou_assigner_ava.py\":126-147",
            "content": "                X = assigned_gt_inds_squeeze - 1\n                Y = paddle.zeros_like(X)\n                if A.shape[0]==1:\n                    if float(A) > 0:\n                        T=X\n                    else:\n                        T=Y\n                else:\n                    T = paddle.where(A>0, X, Y)\n                S = paddle.index_select(gt_labels, T)\n                AE = paddle.expand(A, [S.shape[1], A.shape[0]]) \n                AET = paddle.transpose(AE, perm=[1, 0])\n                R = paddle.where(AET>0, S, assigned_labels) \n                assigned_labels = R\n        else:\n            assigned_labels = None\n        ret = AssignResult(\n            num_gts,\n            assigned_gt_inds,\n            max_overlaps,\n            labels=assigned_labels)\n        return ret"
        }
    ]
}