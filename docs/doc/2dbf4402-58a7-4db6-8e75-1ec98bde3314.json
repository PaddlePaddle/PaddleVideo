{
    "summary": "The Python script uses Baidu Cloud for action detection and includes audio, image processing functions. It has classes like ActionDetection and ModelPredict to initialize models, extract features from video input, retrieve proposals using BMN, classify actions based on extracted features and proposals, and log debugging information. Results are stored in a JSON file.",
    "details": [
        {
            "comment": "This code is a Python script for action detection using Baidu Cloud, which includes functions for processing audio and image data to predict actions. It utilizes various models such as mfcc_extractor, image_model, audio_model, prop_model, and classify_model. The ActionDetection class is defined, which likely contains the main logic of the action detection algorithm. The record_time_info function is a decorator used to log the time taken for executing specific functions.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":0-47",
            "content": "#!./python27-gcc482/bin/python\n# coding: utf-8\n\"\"\"\nBAIDU CLOUD action\n\"\"\"\nimport os\nimport sys\nimport pickle\nimport json\nimport time\nimport functools\nimport numpy as np\nfrom utils.preprocess import get_images\nfrom utils.config_utils import parse_config, print_configs\nimport mfcc.feature_extractor as mfcc_extractor\nimport models.pptsm_infer as image_model\nimport models.audio_infer as audio_model\nimport models.bmn_infer as prop_model\nimport models.lstm_infer as classify_model\nimport logger\nlogger = logger.Logger()\ndef record_time_info(func):\n    \"\"\"decorator func to log cost time for func\n    \"\"\"\n    @functools.wraps(func)\n    def timer(*args):\n        \"\"\"log cost time for func\n        \"\"\"\n        logger.info(\"function [{}] processing ...\".format(func.__name__))\n        start_time = time.time()\n        retval = func(*args)\n        cost_time = round(time.time() - start_time, 5)\n        logger.info(\"function [{}] run time: {:.2f} min\".format(\n            func.__name__, cost_time / 60))\n        return retval\n    return timer\nclass ActionDetection(object):"
        },
        {
            "comment": "This code defines a ModelPredict class with an initializer that reads configs from a specified file and prints them. It also checks certain conditions related to LSTM_ONLY, sets properties based on those conditions, and loads a model if not in DEBUG mode.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":48-75",
            "content": "    \"\"\"ModelPredict\"\"\"\n    def __init__(self, cfg_file=\"configs/configs.yaml\"):\n        cfg = parse_config(cfg_file)\n        self.configs = cfg\n        print_configs(self.configs, \"Infer\")\n        name = 'COMMON'\n        self.DEBUG = cfg[name]['DEBUG']\n        self.BMN_ONLY = cfg[name]['BMN_ONLY']\n        self.LSTM_ONLY = cfg[name]['LSTM_ONLY']\n        self.PCM_ONLY = cfg[name]['PCM_ONLY']\n        if self.LSTM_ONLY:\n            self.prop_dict = {}\n            for dataset in ['EuroCup2016']:\n                prop_json = '/home/work/datasets/{}/feature_bmn/prop.json'.format(\n                    dataset)\n                json_data = json.load(open(prop_json, 'r'))\n                for item in json_data:\n                    basename = prop_json.replace('feature_bmn/prop.json', 'mp4')\n                    basename = basename + '/' + item['video_name'] + '.mp4'\n                    self.prop_dict[basename] = item['bmn_results']\n    @record_time_info\n    def load_model(self):\n        \"\"\"\n        load_model\n        \"\"\"\n        if not self.DEBUG:"
        },
        {
            "comment": "The code initializes different models for image, audio, and proposal extraction, and a classifier. It then extracts features from the input video, retrieves proposals using BMN (Bidirectional Motion Model), and finally classifies the action based on these extracted features and proposals.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":76-107",
            "content": "            self.image_model = image_model.InferModel(self.configs)\n            if not self.PCM_ONLY:\n                self.audio_model = audio_model.InferModel(self.configs)\n        if not self.LSTM_ONLY:\n            self.prop_model = prop_model.InferModel(self.configs)\n        if not self.BMN_ONLY:\n            self.classify_model = classify_model.InferModel(self.configs)\n        logger.info(\"==> Action Detection prepared.\")\n    @record_time_info\n    def infer(self, imgs_path, pcm_path, fps=5):\n        \"\"\"\n        extract_feature\n        \"\"\"\n        self.imgs_path = imgs_path\n        self.pcm_path = pcm_path\n        self.configs['COMMON']['fps'] = fps\n        logger.info(\"==> input video {}\".format(os.path.basename(\n            self.imgs_path)))\n        # step 1: extract feature\n        video_features = self.extract_feature()\n        # step2: get proposal\n        bmn_results = self.extract_proposal(video_features)\n        # step3: classify\n        material = {'feature': video_features, 'proposal': bmn_results}"
        },
        {
            "comment": "This code defines several methods for video classification and feature extraction. It uses a model called \"classify_model\" to predict actions based on input material, and another model called \"prop_model\" to extract proposals. The BMN_ONLY and LSTM_ONLY flags determine if certain models are used or not. The code also includes logging for debugging purposes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":108-135",
            "content": "        action_results = self.video_classify(material)\n        return bmn_results, action_results\n    @record_time_info\n    def video_classify(self, material):\n        \"\"\"video classify\"\"\"\n        if self.BMN_ONLY:\n            return []\n        action_results = self.classify_model.predict(self.configs,\n                                                     material=material)\n        logger.info('action shape {}'.format(np.array(action_results).shape))\n        return action_results\n    @record_time_info\n    def extract_proposal(self, video_features):\n        \"\"\"extract proposal\"\"\"\n        if self.LSTM_ONLY:\n            basename = self.imgs_path.replace('frames', 'mp4') + '.mp4'\n            bmn_results = self.prop_dict[basename]\n            return bmn_results\n        bmn_results = self.prop_model.predict(self.configs,\n                                              material=video_features)\n        logger.info('proposal shape {}'.format(np.array(bmn_results).shape))\n        return bmn_results\n    @record_time_info\n    def extract_feature(self):"
        },
        {
            "comment": "Extracts features from images and audio in a video file for further processing. If PCM_ONLY is True, extracts only MFCC features from audio using mfcc_extractor.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":136-157",
            "content": "        \"\"\"extract feature\"\"\"\n        if not self.DEBUG:\n            image_path_list = get_images(self.imgs_path)\n            self.configs['PPTSM']['frame_list'] = image_path_list\n            self.configs['AUDIO']['pcm_file'] = self.pcm_path\n            image_features = self.image_model.predict(self.configs)\n            if self.PCM_ONLY:\n                sample_rate = self.configs['AUDIO']['sample_rate']\n                pcm_features = mfcc_extractor.extract_pcm(\n                    self.pcm_path, sample_rate)\n                audio_features = []\n            else:\n                audio_features, pcm_features = self.audio_model.predict(\n                    self.configs)\n            np_image_features = np.array(image_features, dtype=np.float32)\n            np_audio_features = np.array(audio_features, dtype=np.float32)\n            np_pcm_features = np.array(pcm_features, dtype=np.float32)\n            video_features = {\n                'image_feature': np_image_features,\n                'audio_feature': np_audio_features,"
        },
        {
            "comment": "The code loads video features from frames or pcm file and returns the features in the form of a dictionary. It then proceeds to initialize an instance of the ActionDetection class, load the model, define image and audio paths, and finally calls the infer function to generate bmn_results and action_results which are stored in the results dictionary and saved into a json file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":158-184",
            "content": "                'pcm_feature': np_pcm_features\n            }\n        else:\n            feature_path = self.imgs_path.replace(\"frames\", \"features\") + '.pkl'\n            video_features = pickle.load(open(feature_path, 'rb'))\n        logger.info(\"feature shape {} {} {}\".format(\n            video_features['image_feature'].shape,\n            video_features['audio_feature'].shape,\n            video_features['pcm_feature'].shape))\n        return video_features\nif __name__ == '__main__':\n    model_predict = ActionDetection(cfg_file=\"../configs/configs.yaml\")\n    model_predict.load_model()\n    imgs_path = \"/home/work/datasets/EuroCup2016/frames/1be705a8f67648da8ec4b4296fa80895\"\n    pcm_path = \"/home/work/datasets/EuroCup2016/pcm/1be705a8f67648da8ec4b4296fa80895.pcm\"\n    bmn_results, action_results = model_predict.infer(imgs_path, pcm_path)\n    results = {'bmn_results': bmn_results, 'action_results': action_results}\n    with open('results.json', 'w', encoding='utf-8') as f:\n        data = json.dumps(results, indent=4, ensure_ascii=False)"
        },
        {
            "comment": "Writes data to file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/predict/action_detect/action.py\":185-185",
            "content": "        f.write(data)"
        }
    ]
}