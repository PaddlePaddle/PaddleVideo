{
    "summary": "This code defines a base class for localization models using PaddlePaddle framework, with train, valid, and test steps implemented in subclasses. It supports different operation modes and allows weight initialization.",
    "details": [
        {
            "comment": "This code snippet defines a base class for localization models. All subclasses of this base class should implement train_step, valid_step, and test_step methods to define their respective steps in the model's training process. It uses PaddlePaddle's framework and is licensed under the Apache License, Version 2.0.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/localizers/base.py\":0-26",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom abc import abstractmethod\nimport paddle.nn as nn\nfrom ... import builder\nclass BaseLocalizer(nn.Layer):\n    \"\"\"Base class for Localization.\n    All localizer should subclass it.\n    All subclass should overwrite:\n    - Methods:``train_step``, define your train step.\n    - Methods:``valid_step``, define your valid step, always the same as train_step.\n    - Methods:``test_step``, define your test step.\n    \"\"\""
        },
        {
            "comment": "This code initializes a localizer model, handling backbone and loss functions, and allows for different operation modes (train, valid, test, infer). It also includes a function to initialize the model's network weights.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/localizers/base.py\":27-55",
            "content": "    def __init__(self, backbone, loss):\n        super().__init__()\n        self.backbone = builder.build_backbone(backbone)\n        self.loss = builder.build_loss(loss)\n        self.init_weights()\n    def init_weights(self):\n        \"\"\"Initialize the model network weights. \"\"\"\n        if getattr(self.backbone, 'init_weights'):\n            self.backbone.init_weights()\n        else:\n            pass\n    def forward(self, data_batch, mode='infer'):\n        \"\"\"\n        1. Define how the model is going to run, from input to output.\n        2. Console of train, valid, test or infer step\n        3. Set mode='infer' is used for saving inference model, refer to tools/export_model.py\n        \"\"\"\n        if mode == 'train':\n            return self.train_step(data_batch)\n        elif mode == 'valid':\n            return self.val_step(data_batch)\n        elif mode == 'test':\n            return self.test_step(data_batch)\n        elif mode == 'infer':\n            return self.infer_step(data_batch)\n        else:\n            raise NotImplementedError"
        },
        {
            "comment": "This code defines abstract classes for training, validation, and testing steps in a model. The train_step, val_step, and test_step methods require implementation by subclasses to perform the necessary computations.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/localizers/base.py\":57-73",
            "content": "    @abstractmethod\n    def train_step(self, data_batch, **kwargs):\n        \"\"\"Training step.  input_data_batch -> loss_metric\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def val_step(self, data_batch, **kwargs):\n        \"\"\"Validating setp. input_data_batch -> loss_metric\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def test_step(self, data_batch, **kwargs):\n        \"\"\"Tets setp. to get acc in test data. input_data_batch -> output\n        \"\"\"\n        raise NotImplementedError"
        }
    ]
}