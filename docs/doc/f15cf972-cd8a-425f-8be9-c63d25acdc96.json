{
    "summary": "This Python script serves models in PaddleVideo framework, parses command-line arguments, and sends video data via HTTP requests using argparse, json, and requests libraries. It converts videos to numpy arrays, encodes as base64 strings, and sends to specific URL endpoints.",
    "details": [
        {
            "comment": "The code is a Python script that parses command-line arguments and defines functions for model serving in the PaddleVideo framework. It imports necessary libraries, including argparse for argument handling, json for data manipulation, requests for HTTP communication, and utils module for converting video to numpy format.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/python_serving/pipeline_http_client.py\":0-29",
            "content": "# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport argparse\nimport json\nimport requests\nfrom utils import numpy_to_base64, parse_file_paths, video_to_numpy\ndef parse_args():\n    # general params\n    parser = argparse.ArgumentParser(\"PaddleVideo Web Serving model script\")\n    parser.add_argument('-c',\n                        '--config',\n                        type=str,\n                        default='configs/PP-TSM.yaml',\n                        help='serving config file path')"
        },
        {
            "comment": "This code defines command-line arguments for port number and input file path or directory, parses the arguments, and uses them to send video data to a server via HTTP requests. It decodes videos into frames as numpy arrays, encodes them to base64 strings, generates dictionaries with keys \"key\" and \"value\", and sends the data to a specific URL endpoint.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/python_serving/pipeline_http_client.py\":30-61",
            "content": "    parser.add_argument('-ptn',\n                        '--port_number',\n                        type=int,\n                        default=18080,\n                        help='http port number')\n    parser.add_argument('-i',\n                        '--input_file',\n                        type=str,\n                        help='input file path or directory path')\n    return parser.parse_args()\nif __name__ == \"__main__\":\n    args = parse_args()\n    url = f\"http://127.0.0.1:{args.port_number}/video/prediction\"\n    files_list = parse_file_paths(args.input_file)\n    for file_path in files_list:\n        # decoding video and get stacked frames as ndarray\n        decoded_frames = video_to_numpy(file_path=file_path)\n        # encode ndarray to base64 string for transportation.\n        decoded_frames_base64 = numpy_to_base64(decoded_frames)\n        # generate dict & convert to json.\n        data = {\n            \"key\": [\"frames\", \"frames_shape\"],\n            \"value\": [decoded_frames_base64,\n                      str(decoded_frames.shape)]"
        },
        {
            "comment": "This code snippet sends a POST request to the specified URL with the data in JSON format. It uses Python's requests library to transport the data and waits for 100 seconds for a response. The response is then printed as JSON.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/python_serving/pipeline_http_client.py\":62-69",
            "content": "        }\n        data = json.dumps(data)\n        # transport to server & get get results.\n        r = requests.post(url=url, data=data, timeout=100)\n        # print result\n        print(r.json())"
        }
    ]
}