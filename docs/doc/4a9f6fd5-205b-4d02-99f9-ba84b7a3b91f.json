{
    "summary": "This code calculates Pearson and Spearman correlation coefficients (PLCC & SROCC) for a given output and label pair using numpy arrays and scipy's stats functions.",
    "details": [
        {
            "comment": "This code defines the QuqlityMetric class for measuring video quality. It imports necessary libraries, registers it with METRIC, and initializes attributes including data_size, batch_size, and log_interval. The output and label lists are used to store data during processing.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py\":0-34",
            "content": "\"\"\"\n# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\"\"\"\nimport numpy as np\nimport paddle\nfrom paddle.hapi.model import _all_gather\nfrom scipy import stats\nfrom .registry import METRIC\nfrom .base import BaseMetric\nfrom paddlevideo.utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@METRIC.register\nclass QuqlityMetric(BaseMetric):\n    \"\"\"CenterCropQualityMetric\"\"\"\n    def __init__(self, data_size, batch_size, log_interval=1):\n        \"\"\"prepare for metrics\n        \"\"\"\n        super().__init__(data_size, batch_size, log_interval)\n        self.output = []\n        self.label = []"
        },
        {
            "comment": "This code defines a class for calculating Pearson and Spearman correlation coefficients. The `update` method updates the metrics for each batch during training, while the `accumulate` method calculates the final Pearson (PLCC) and Spearman (SROCC) correlation coefficients after all iterations are finished.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py\":35-61",
            "content": "        self.y_pred = np.zeros(data_size)\n        self.y_test = np.zeros(data_size)\n    def update(self, batch_id, data, outputs):\n        \"\"\"update metrics during each iter\n        \"\"\"\n        labels = data[1]\n        predict_output = paddle.tolist(outputs)\n        predict_label = paddle.tolist(labels)\n        predict_output_len = len(predict_output)\n        for i in range(predict_output_len):\n            self.output.append(predict_output[i][0])\n            self.label.append(predict_label[i][0])\n        if batch_id % self.log_interval == 0:\n            logger.info(\"[TEST] Processing batch {}/{} ...\".format(\n                batch_id,\n                self.data_size // (self.batch_size * self.world_size)))\n    def accumulate(self):\n        \"\"\"accumulate metrics when finished all iters.\n        \"\"\"\n        test_output_np = np.array(self.output)\n        test_label_np = np.array(self.label)\n        PLCC = stats.pearsonr(test_output_np, test_label_np)[0]\n        SROCC = stats.spearmanr(test_output_np, test_label_np)[0]"
        },
        {
            "comment": "This code snippet calculates the Pearson and Spearman correlation coefficients (PLCC and SROCC) for a given output and label pair. It uses numpy arrays to convert the input into numeric data types, then calculates the correlation values using scipy's stats.pearsonr and stats.spearmanr functions respectively. Finally, it returns the calculated PLCC and SROCC values.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py\":63-71",
            "content": "        logger.info('[TEST] finished, PLCC= {}, SROCC= {} '.format(PLCC, SROCC))\n    def accumulate_train(self, output, label):\n        \"\"\"accumulate_train\"\"\"\n        output_np = np.array(output)\n        label_np = np.array(label)\n        PLCC = stats.pearsonr(output_np, label_np)[0]\n        SROCC = stats.spearmanr(output_np, label_np)[0]\n        return PLCC, SROCC"
        }
    ]
}