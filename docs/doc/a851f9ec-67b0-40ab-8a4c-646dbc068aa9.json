{
    "summary": "This code calculates IoU and IOA, checks hits, stores relevant info in a dictionary, prints URLs for each video using gts data, and splits video features into training and validation datasets for handling football actions. It also separates video features and labels into training and validation sets, storing the data in .pkl files for later use.",
    "details": [
        {
            "comment": "This code computes the IoU (intersection over union) and IOA (intersection over area) for proposals and ground truths in a dataset. It takes proposal bounding boxes and ground truth bounding boxes as inputs, calculates their intersections and unions, and outputs the resulting IoUs and IOAs. The calculated IoU and IOA values will be used to determine the labels for the LSTM model's input data.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_lstm.py\":0-43",
            "content": "\"\"\"\nget instance for lstm\n\u6839\u636egts\u8ba1\u7b97\u6bcf\u4e2aproposal_bmn\u7684iou\u3001ioa\u3001label\u7b49\u4fe1\u606f\n\"\"\"\nimport os\nimport sys\nimport json\nimport random\nimport pickle\nimport numpy as np\ndataset = \"../EuroCup2016\"\nfeat_dir = dataset + '/features'\nprop_file = dataset + '/feature_bmn/prop.json'\nout_dir = dataset + '/input_for_lstm'\nlabel_files = {\n    'train': 'label_cls8_train.json',\n    'validation': 'label_cls8_val.json'\n}\ndef IoU(e1, e2):\n    \"\"\"\n    clc iou and ioa\n    \"\"\"\n    area1 = e1[\"end\"] - e1[\"start\"]\n    area2 = e2[\"end\"] - e2[\"start\"]\n    x1 = np.maximum(e1[\"start\"], e2[\"start\"])\n    x2 = np.minimum(e1[\"end\"], e2[\"end\"])\n    inter = np.maximum(0.0, x2 - x1)\n    iou = 0.0 if (area1 + area2 -\n                  inter) == 0 else inter * 1.0 / (area1 + area2 - inter)\n    ioa = 0.0 if area2 == 0 else inter * 1.0 / area2\n    return iou, ioa\ndef clc_iou_of_proposal(proposal, gts):\n    hit_gts = {}\n    label = 0\n    norm_start = 0.\n    hit = False\n    for gt in gts:\n        e1 = {'start': proposal['start'], 'end': proposal['end']}\n        e2 = {'start': gt['start_id'], 'end': gt['end_id']}"
        },
        {
            "comment": "This code calculates IoU and IOA between two sets of data, then checks if there is a hit. It stores the label, normalized start, and other relevant information in a dictionary and returns it. The get_bmn_info function takes gts and proposal data and prints the URL for each video, iterating through the gts data.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_lstm.py\":44-79",
            "content": "        iou, ioa = IoU(e1, e2)\n        if iou > 0:\n            hit = True\n            hit_gts = gt\n            label = hit_gts['label_ids'][0]\n            norm_start = (gt['start_id'] - proposal['start']) * 1.0 / (\n                proposal['end'] - proposal['start'])\n            break\n    res = {\n        'label': label,\n        'norm_iou': iou,\n        'norm_ioa': ioa,\n        'norm_start': norm_start,\n        'proposal': proposal,\n        'hit_gts': hit_gts\n    }\n    return res\ndef get_bmn_info(gts_data, proposal_data, res_bmn, mode, score_threshold=0.01):\n    \"\"\"\n    @param, gts_data, original gts for action detection\n    @param, proposal_data, proposal actions from bmn\n    @param, mode, train or validation\n    @return, None.\n    \"\"\"\n    fps = gts_data['fps']\n    res_bmn['fps'] = fps\n    for gts_item in gts_data['gts']:\n        url = gts_item['url']\n        print(url)\n        max_length = gts_item['total_frames']\n        video_name = os.path.basename(url).split('.')[0]\n        if not video_name in proposal_data:\n            continue"
        },
        {
            "comment": "The code retrieves ground truth (GT) actions and proposal actions from a dataset, then evaluates the Intersection over Union (IoU) of each proposal with the GT actions. If a proposal's score is below a threshold, it is skipped. The IoU values are appended to the 'results' list within a dictionary, along with other information such as URL, mode, total frames, number of GT and proposal actions. Finally, the function returns the dictionary. A separate function saves features in an output directory, creating one if necessary.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_lstm.py\":81-109",
            "content": "        gts_actions = gts_item['actions']\n        prop_actions = proposal_data[video_name]\n        res_bmn['results'].append({\n            'url': url,\n            'mode': mode,\n            'total_frames': max_length,\n            'num_gts': len(gts_actions),\n            'num_proposals': len(prop_actions),\n            'proposal_actions': []\n        })\n        for proposal in prop_actions:\n            if proposal['score'] < score_threshold:\n                continue\n            proposal['start'] = int(proposal['start'] * 1.0 / fps)\n            proposal['end'] = int(proposal['end'] * 1.0 / fps)\n            gts_info = clc_iou_of_proposal(proposal, gts_actions)\n            res_bmn['results'][-1]['proposal_actions'].append(gts_info)\n    return res_bmn\ndef save_feature(label_info, out_dir):\n    print('save feature ...')\n    fps = label_info['fps']\n    out_feature_dir = out_dir + '/feature'\n    out_feature_dir = os.path.abspath(out_feature_dir)\n    if not os.path.exists(out_feature_dir):\n        os.mkdir(out_feature_dir)"
        },
        {
            "comment": "This code is splitting video features into training and validation datasets, handling audio-visual data for football actions. It reads the results from label_info and writes image and audio feature segments to train.txt or val.txt files based on mode (train/val). The code iterates through proposal actions, extracting the corresponding image and audio features.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_lstm.py\":110-129",
            "content": "    fid_train = open(out_dir + '/train.txt', 'w')\n    fid_val = open(out_dir + '/val.txt', 'w')\n    for res in label_info['results']:\n        basename = os.path.basename(res['url']).split('.')[0]\n        print(basename, res['num_proposals'])\n        mode = res['mode']\n        fid = fid_train if mode == 'train' else fid_val\n        feature_path = os.path.join(feat_dir, basename + '.pkl')\n        feature_data = pickle.load(open(feature_path, 'rb'))\n        image_feature = feature_data['image_feature']\n        audio_feature = feature_data['audio_feature']\n        max_len_audio = len(audio_feature)\n        for proposal in res['proposal_actions']:\n            label = proposal['label']\n            start_id = proposal['proposal']['start']\n            end_id = proposal['proposal']['end']\n            # get hit feature\n            image_feature_hit = image_feature[start_id * fps:end_id * fps]\n            audio_feature_hit = audio_feature[min(start_id, max_len_audio\n                                                  ):min(end_id, max_len_audio)]"
        },
        {
            "comment": "This code saves video features and labels into separate files for training and validation sets. It creates a dictionary of feature information and label, then dumps this data into a .pkl file with the appropriate naming format. Finally, it writes the file name and corresponding label into another file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_lstm.py\":131-160",
            "content": "            # save\n            anno_info = {\n                'image_feature': np.array(image_feature_hit, dtype=np.float32),\n                'audio_feature': np.array(audio_feature_hit, dtype=np.float32),\n                'feature_fps': fps,\n                'label_info': proposal,\n                'video_name': basename\n            }\n            save_name = '{}/{}_{}_{}.pkl'.format(out_feature_dir, basename,\n                                                 start_id, end_id)\n            with open(save_name, 'wb') as f:\n                pickle.dump(anno_info, f, protocol=pickle.HIGHEST_PROTOCOL)\n            fid.write('{} {}\\n'.format(save_name, label))\n    fid_train.close()\n    fid_val.close()\n    print('done!')\nif __name__ == \"__main__\":\n    if not os.path.exists(out_dir):\n        os.mkdir(out_dir)\n    prop_data = json.load(open(prop_file, 'rb'))\n    proposal_data = {}\n    for item in prop_data:\n        proposal_data[os.path.basename(\n            item['video_name'])] = item['bmn_results']\n    # get label info\n    res_bmn = {'fps': 0, 'results': []}"
        },
        {
            "comment": "This code reads label files, loads and processes the data, then saves the processed data (label information) and optional features to specific directories.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/FootballAction/datasets/script/get_instance_for_lstm.py\":161-171",
            "content": "    for item, value in label_files.items():\n        label_file = os.path.join(dataset, value)\n        gts_data = json.load(open(label_file, 'rb'))\n        res_bmn = get_bmn_info(gts_data, proposal_data, res_bmn, item)\n    with open(out_dir + '/label_info.json', 'w', encoding='utf-8') as f:\n        data = json.dumps(res_bmn, indent=4, ensure_ascii=False)\n        f.write(data)\n    # save feature\n    save_feature(res_bmn, out_dir)"
        }
    ]
}