{
    "summary": "This script prepares PaddlePaddle's video object detection models by handling data, installing packages, and downloading/preprocessing for TIPC models. It also prepares data for AttentionLSTM and SlowFast models. The code downloads pre-trained model data and weights for various models like ResNet50, TSN, TimeSformer, PP-TSM, and VideoSwin.",
    "details": [
        {
            "comment": "This script is preparing the environment for training and inference on PaddlePaddle's video object detection models. It takes a filename as an argument, parses its contents to determine the model name and mode, installs required packages like auto-log, and prepares any necessary data or pretrained weights for the selected model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":0-43",
            "content": "#!/bin/bash\nsource test_tipc/common_func.sh\nFILENAME=$1\n# set -xe\n:<<!\nMODE be one of ['lite_train_lite_infer' 'lite_train_whole_infer' 'whole_train_whole_infer',\n#                 'whole_infer',\n#                 'cpp_infer', ]\n!\nMODE=$2\ndataline=$(cat ${FILENAME})\n# parser params\nIFS=$'\\n'\nlines=(${dataline})\n# determine python interpreter version\npython=python\n# install auto-log package.\n${python} -m pip install unrar\n${python} -m pip install https://paddleocr.bj.bcebos.com/libs/auto_log-1.2.0-py3-none-any.whl\n# The training params\nmodel_name=$(func_parser_value \"${lines[1]}\")\ntrainer_list=$(func_parser_value \"${lines[14]}\")\nif [ ${MODE} = \"lite_train_lite_infer\" ];then\n    if [ ${model_name} == \"PP-TSM\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate"
        },
        {
            "comment": "This code checks the value of the 'model_name' variable and performs specific actions based on its value. If 'model_name' is \"PP-TSN\", it downloads pretrained weights for ResNet50 model. If 'model_name' is \"AGCN\" or \"STGCN\", it downloads training data for FSD10 dataset. The code uses pushd and popd commands to navigate directories, and wget command to download files.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":44-66",
            "content": "    elif [ ${model_name} == \"PP-TSN\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AGCN\" ]; then\n        # pretrain lite train data\n        pushd data/fsd10\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"STGCN\" ]; then\n        # pretrain lite train data\n        pushd data/fsd10\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"AGCN2s\" ]; then\n        # pretrain lite train data\n        pushd data/fsd10"
        },
        {
            "comment": "This code segment downloads the necessary data and pretrained weights for different models (FSD, TSM, or TimeSformer). It checks the value of the model_name variable and performs specific actions accordingly. For FSD, it downloads train data and labels. For TSM and TimeSformer, it downloads lite train data and pretrained ResNet50 weights. The code also uses pushd and popd commands to change directories temporarily during the process.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":67-86",
            "content": "        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"TSM\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TSN\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TimeSformer\" ]; then"
        },
        {
            "comment": "The code snippet is preparing data and downloading pretrained weights for different models. It first prepares the lite train data by downloading and decompressing a dataset, then installs TensorFlow GPU version 1.14.0, converts data format using tf2pkl.py script, splits the train data into multiple files, and finally, it downloads the pretrained weights for the specified model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":87-104",
            "content": "        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/ViT_base_patch16_224_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AttentionLSTM\" ]; then\n        pushd data/yt8m\n        ## download & decompression training data\n        wget -nc https://videotag.bj.bcebos.com/Data/yt8m_rawframe_small.tar\n        tar -xf yt8m_rawframe_small.tar\n        ${python} -m pip install tensorflow-gpu==1.14.0 -i https://pypi.tuna.tsinghua.edu.cn/simple\n        ${python} tf2pkl.py ./frame ./pkl_frame/\n        ls pkl_frame/train*.pkl > train_small.list # \u5c06train*.pkl\u7684\u8def\u5f84\u5199\u5165train_small.list\n        ls pkl_frame/validate*.pkl > val_small.list # \u5c06validate*.pkl\u7684\u8def\u5f84\u5199\u5165val_small.list\n        ${python} split_yt8m.py train_small.list # \u62c6\u5206\u6bcf\u4e2atrain*.pkl\u53d8\u6210\u591a\u4e2atrain*_split*.pkl"
        },
        {
            "comment": "This code is checking the value of the variable `model_name` and performing different operations based on its value. For example, if `model_name` equals \"SlowFast\", it changes directory to `./data/k400`, downloads a tar file containing data for pre-training a SlowFast model, and then extracts the tar file. Similarly, if `model_name` is \"BMN\" or \"TokenShiftVisionTransformer\", different operations are carried out, such as downloading and extracting necessary data files for pre-training these models. The code uses various commands like `pushd`, `popd`, `wget`, and `tar` to manipulate directories and files.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":105-126",
            "content": "        ${python} split_yt8m.py val_small.list # \u62c6\u5206\u6bcf\u4e2avalidate*.pkl\u53d8\u6210\u591a\u4e2avalidate*_split*.pkl\n        ls pkl_frame/train*_split*.pkl > train_small.list # \u5c06train*_split*.pkl\u7684\u8def\u5f84\u91cd\u65b0\u5199\u5165train_small.list\n        ls pkl_frame/validate*_split*.pkl > val_small.list # \u5c06validate*_split*.pkl\u7684\u8def\u5f84\u91cd\u65b0\u5199\u5165val_small.list\n        popd\n    elif [ ${model_name} == \"SlowFast\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n    elif [ ${model_name} == \"BMN\" ]; then\n        # pretrain lite train data\n        pushd ./data\n        mkdir bmn_data\n        cd bmn_data\n        wget -nc https://videotag.bj.bcebos.com/Data/BMN_lite/bmn_feat.tar.gz\n        tar -xf bmn_feat.tar.gz\n        wget -nc https://videotag.bj.bcebos.com/Data/BMN_lite/activitynet_1.3_annotations.json\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activity_net_1_3_new.json\n        popd\n    elif [ ${model_name} == \"TokenShiftVisionTransformer\" ]; then"
        },
        {
            "comment": "This script downloads pre-trained model weights and preprocesses training data for specific models. For ViT_base, it downloads the weight file. For PoseC3D, it downloads and unzips a small dataset. For YOWO, it downloads the necessary datasets and YOWO's pre-trained model at a specific epoch. Models not in TIPC are not processed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":127-148",
            "content": "        # download pretrained weights\n        wget -nc -P ./data https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/ViT_base_patch16_224_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"PoseC3D\" ]; then\n        # pretrain lite train data\n        pushd ./data\n        mkdir posec3d_data\n        cd posec3d_data\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/PoseC3D_data_small.tar\n        tar -xf PoseC3D_data_small.tar\n        popd\n    elif [ ${model_name} == \"YOWO\" ]; then\n        # pretrain lite train data\n        pushd ./data\n        wget -nc https://videotag.bj.bcebos.com/Data/ucf-24-lite.zip\n        unzip -qo ucf-24-lite.zip\n        pushd ./ucf24\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/darknet.pdparam\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/resnext101_kinetics.pdparams\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/YOWO_epoch_00005.pdparams\n        popd\n    else\n        echo \"Not added into TIPC yet.\""
        },
        {
            "comment": "Checking if MODE is \"whole_train_whole_infer\". If true, it determines the model (PP-TSM or PP-TSN) and performs specific actions for pretraining with whole training data. For PP-TSM, downloads Kinetics400 data, extracts raw frames, downloads annotations, and gets pretrained weights. For PP-TSN, similar steps are followed but with different data and models.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":149-167",
            "content": "    fi\nelif [ ${MODE} = \"whole_train_whole_infer\" ];then\n    if [ ${model_name} == \"PP-TSM\" ]; then\n        # pretrain whole train data\n        pushd ./data/k400\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/train_link.list\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/val_link.list\n        bash download_k400_data.sh train_link.list\n        bash download_k400_data.sh val_link.list\n        ${python} extract_rawframes.py ./videos/ ./rawframes/ --level 2 --ext mp4 # extract frames from video file\n        # download annotations\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/train_frames.list\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/val_frames.list\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"PP-TSN\" ]; then\n        # pretrain whole train data"
        },
        {
            "comment": "This code downloads pre-trained model weights and data for different models, such as ResNet50_vd_ssld_v2, AGCN, and STGCN. It also downloads annotations and train/validation lists from specific URLs. The code uses pushd and popd commands to change directories temporarily and wget command to perform non-checking downloads (nc) of files.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":168-187",
            "content": "        pushd ./data/k400\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/train_link.list\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/val_link.list\n        bash download_k400_data.sh train_link.list\n        bash download_k400_data.sh val_link.list\n        # download annotations\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/train.list\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/val.list\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AGCN\" ]; then\n        # pretrain whole train data\n        pushd data/fsd10\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"STGCN\" ]; then\n        # pretrain whole train data\n        pushd data/fsd10"
        },
        {
            "comment": "The code checks the value of 'model_name', and if it's \"TSM\", it performs specific actions. It changes to the directory ./data/k400, downloads train and val lists from the URLs provided, then uses bash scripts to download data based on the list. Afterwards, it extracts frames from video files using the 'extract_rawframes.py' script at a certain level and with specific extensions. It also downloads annotations for training and validation sets. Finally, it changes back to the previous directory and downloads pretrained ResNet50 weights.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":188-204",
            "content": "        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"TSM\" ]; then\n        # pretrain whole train data\n        pushd ./data/k400\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/train_link.list\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/val_link.list\n        bash download_k400_data.sh train_link.list\n        bash download_k400_data.sh val_link.list\n        ${python} extract_rawframes.py ./videos/ ./rawframes/ --level 2 --ext mp4 # extract frames from video file\n        # download annotations\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/train_frames.list\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/val_frames.list\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate"
        },
        {
            "comment": "The code checks if the model name is \"TSN\" or \"TimeSformer\" and then downloads corresponding data and pretrained weights for each model. It pushes to a directory, downloads training and validation lists, extracts frames from videos, downloads annotations, and finally pops out of the directory. This script appears to be part of a larger program that prepares data for specific models in a machine learning or deep learning context.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":205-222",
            "content": "    elif [ ${model_name} == \"TSN\" ]; then\n        # pretrain whole train data\n        pushd ./data/k400\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/train_link.list\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/val_link.list\n        bash download_k400_data.sh train_link.list\n        bash download_k400_data.sh val_link.list\n        ${python} extract_rawframes.py ./videos/ ./rawframes/ --level 2 --ext mp4 # extract frames from video file\n        # download annotations\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/train_frames.list\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/val_frames.list\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TimeSformer\" ]; then\n        # pretrain whole train data\n        pushd ./data/k400\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/train_link.list"
        },
        {
            "comment": "This code is preparing the data and environment for a specific model named \"AttentionLSTM\". It downloads links for training and validation datasets, fetches annotations, and gets pre-trained weights. The model requires TensorFlow GPU version 1.14.0 and uses YT8M dataset partitioned into 2 parts - train and validate.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":223-240",
            "content": "        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/val_link.list\n        bash download_k400_data.sh train_link.list\n        bash download_k400_data.sh val_link.list\n        # download annotations\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/train.list\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/val.list\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/ViT_base_patch16_224_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AttentionLSTM\" ]; then\n        # pretrain whole train data\n        pushd data/yt8m\n        mkdir frame\n        cd frame\n        ## download & decompression training data\n        curl data.yt8m.org/download.py | partition=2/frame/train mirror=asia python\n        curl data.yt8m.org/download.py | partition=2/frame/validate mirror=asia python\n        ${python} -m pip install tensorflow-gpu==1.14.0 -i https://pypi.tuna.tsinghua.edu.cn/simple"
        },
        {
            "comment": "The code is preparing the Kinetics400 dataset for PaddleVideo's SlowFast model by downloading and splitting the train and validation data. It changes directory, uses tf2pkl.py to convert frame files into pkl format, splits the pkl files using split_yt8m.py, and finally writes the file paths into train.list and val.list.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":241-260",
            "content": "        cd ..\n        ${python} tf2pkl.py ./frame ./pkl_frame/\n        ls pkl_frame/train*.pkl > train.list # \u5c06train*.pkl\u7684\u8def\u5f84\u5199\u5165train.list\n        ls pkl_frame/validate*.pkl > val.list # \u5c06validate*.pkl\u7684\u8def\u5f84\u5199\u5165val.list\n        ${python} split_yt8m.py train.list # \u62c6\u5206\u6bcf\u4e2atrain*.pkl\u53d8\u6210\u591a\u4e2atrain*_split*.pkl\n        ${python} split_yt8m.py val.list # \u62c6\u5206\u6bcf\u4e2avalidate*.pkl\u53d8\u6210\u591a\u4e2avalidate*_split*.pkl\n        ls pkl_frame/train*_split*.pkl > train.list # \u5c06train*_split*.pkl\u7684\u8def\u5f84\u91cd\u65b0\u5199\u5165train.list\n        ls pkl_frame/validate*_split*.pkl > val.list # \u5c06validate*_split*.pkl\u7684\u8def\u5f84\u91cd\u65b0\u5199\u5165val.list\n        popd\n    elif [ ${model_name} == \"SlowFast\" ]; then\n        # pretrain whole train data\n        pushd ./data/k400\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/train_link.list\n        wget -nc https://ai-rank.bj.bcebos.com/Kinetics400/val_link.list\n        bash download_k400_data.sh train_link.list\n        bash download_k400_data.sh val_link.list\n        # download annotations\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/train.list"
        },
        {
            "comment": "Code handles different scenarios based on the model_name and MODE variables. For BMN, it pretrains using whole train data by downloading necessary files from specified URLs. For PP-TSM in lite_train_whole_infer scenario, it pretrains using lite train data by downloading a tar file and pretrained weights. If none of the conditions match, it displays \"Not added into TIPC yet.\" message.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":261-284",
            "content": "        wget -nc https://videotag.bj.bcebos.com/PaddleVideo/Data/Kinetic400/val.list\n        popd\n    elif [ ${model_name} == \"BMN\" ]; then\n        # pretrain whole train data\n        pushd ./data\n        mkdir bmn_data\n        cd bmn_data\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/bmn_feat.tar.gz\n        tar -xf bmn_feat.tar.gz\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activitynet_1.3_annotations.json\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activity_net_1_3_new.json\n        popd\n    else\n        echo \"Not added into TIPC yet.\"\n    fi\nelif [ ${MODE} = \"lite_train_whole_infer\" ];then\n    if [ ${model_name} == \"PP-TSM\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate"
        },
        {
            "comment": "This code checks the value of the `model_name` variable and performs different actions accordingly. If it's \"PP-TSN\", it downloads pretrained weights and lite train data for PP-TSN model. If it's \"AGCN\" or \"STGCN\", it downloads lite train data. And if it's \"TSM\", it downloads lite train data for TSM model. It uses pushd/popd to change directories and wget to download files from specified URLs.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":285-307",
            "content": "    elif [ ${model_name} == \"PP-TSN\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AGCN\" ]; then\n        # pretrain lite train data\n        pushd data/fsd10\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"STGCN\" ]; then\n        # pretrain lite train data\n        pushd data/fsd10\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_data.npy\n        wget -nc https://videotag.bj.bcebos.com/Data/FSD_train_label.npy\n        popd\n    elif [ ${model_name} == \"TSM\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400"
        },
        {
            "comment": "This code downloads pre-trained model files for different models. For \"PaddleVideo/test_tipc/prepare.sh\", it checks the value of $model_name and proceeds accordingly. It pushes to a specific data folder, then downloads rawframes or videos depending on the model type. Finally, it retrieves the pre-trained weights for each model from an HTTPS URL, handling network errors with -nc option.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":308-328",
            "content": "        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TSN\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TimeSformer\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https:/"
        },
        {
            "comment": "This code snippet downloads and prepares the dataset for training an AttentionLSTM model. It first checks out the data from a specific URL, installs TensorFlow version 1.14.0, converts the raw video frames to pickle format, splits the data into training and validation sets, and finally lists the resulting files in train_small.list and val_small.list.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":328-344",
            "content": "/paddle-imagenet-models-name.bj.bcebos.com/dygraph/ViT_base_patch16_224_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AttentionLSTM\" ]; then\n        # pretrain lite train data\n        pushd data/yt8m\n        ## download & decompression training data\n        wget -nc https://videotag.bj.bcebos.com/Data/yt8m_rawframe_small.tar\n        tar -xf yt8m_rawframe_small.tar\n        ${python} -m pip install tensorflow-gpu==1.14.0 -i https://pypi.tuna.tsinghua.edu.cn/simple\n        ${python} tf2pkl.py ./frame ./pkl_frame/\n        ls pkl_frame/train*.pkl > train_small.list # \u5c06train*.pkl\u7684\u8def\u5f84\u5199\u5165train_small.list\n        ls pkl_frame/validate*.pkl > val_small.list # \u5c06validate*.pkl\u7684\u8def\u5f84\u5199\u5165val_small.list\n        ${python} split_yt8m.py train_small.list # \u62c6\u5206\u6bcf\u4e2atrain*.pkl\u53d8\u6210\u591a\u4e2atrain*_split*.pkl\n        ${python} split_yt8m.py val_small.list # \u62c6\u5206\u6bcf\u4e2avalidate*.pkl\u53d8\u6210\u591a\u4e2avalidate*_split*.pkl\n        ls pkl_frame/train*_split*.pkl > train_small.list # \u5c06train*_split*.pkl\u7684\u8def\u5f84\u91cd\u65b0\u5199\u5165train_small.list\n        ls pkl_frame/validate*_split*.pkl > val_small.list # \u5c06validate*_split*.pkl\u7684\u8def\u5f84\u91cd\u65b0\u5199\u5165val_small.list"
        },
        {
            "comment": "This code is checking the model_name and performing specific actions based on its value. If model_name is \"SlowFast\", it downloads pretrain lite train data for that model. If model_name is \"BMN\", it downloads required datasets for that model. For other model names, it prints a message indicating they are not added to TIPC yet. In the case of MODE being \"whole_infer\", it performs specific actions based on model_name such as downloading pretrained weights for PP-TSM and PP-TSN models.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":345-369",
            "content": "        popd\n    elif [ ${model_name} == \"SlowFast\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n    elif [ ${model_name} == \"BMN\" ]; then\n        # pretrain lite train data\n        pushd ./data\n        mkdir bmn_data\n        cd bmn_data\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/bmn_feat.tar.gz\n        tar -xf bmn_feat.tar.gz\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activitynet_1.3_annotations.json\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activity_net_1_3_new.json\n        popd\n    else\n        echo \"Not added into TIPC yet.\"\n    fi\nelif [ ${MODE} = \"whole_infer\" ];then\n    if [ ${model_name} = \"PP-TSM\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.1/PPTSM/ppTSM_k400_uniform.pdparams --no-check-certificate\n    elif [ ${model_name} = \"PP-TSN\" ]; then"
        },
        {
            "comment": "This code is checking the value of 'model_name' variable and downloading the corresponding pretrained weights for different models using 'wget' command. If model name matches, it retrieves the respective model's file from a specific URL and saves it in the './data' directory without certificate checks.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":370-384",
            "content": "        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/ppTSN_k400.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AGCN\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/AGCN_fsd.pdparams --no-check-certificate\n    elif [ ${model_name} == \"STGCN\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/STGCN_fsd.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TSM\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.1/TSM/TSM_k400.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TSN\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/TSN_k400.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TimeSformer\" ]; then"
        },
        {
            "comment": "This code downloads pre-trained model weights depending on the specified model name. It uses wget to retrieve the files from specific URLs and saves them in the \"./data\" directory. The code also checks if the MODE is \"benchmark_train\" and installs necessary packages using pip if so. Additionally, it changes the current directory to \"./data/k400\" to prepare for pre-training the Lite train data of PP-TSM model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":385-405",
            "content": "        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/TimeSformer_k400.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AttentionLSTM\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/AttentionLSTM_yt8.pdparams --no-check-certificate\n    elif [ ${model_name} == \"SlowFast\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/SlowFast/SlowFast.pdparams --no-check-certificate\n    elif [ ${model_name} == \"BMN\" ]; then\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/BMN/BMN.pdparams --no-check-certificate\n    else\n        echo \"Not added into TIPC yet.\"\n    fi\nfi\nif [ ${MODE} = \"benchmark_train\" ];then\n    ${python} -m pip install -r requirements.txt\n    if [ ${model_name} == \"PP-TSM\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400"
        },
        {
            "comment": "Code snippet checks the value of `model_name` and performs specific actions based on its value. For example, if it is \"PaddleVideo/ResNet50\", it downloads pretrained weights for that model. If `model_name` is not recognized, it prints a message saying it's not added to TIPC yet.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":406-426",
            "content": "        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"PP-TSN\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_vd_ssld_v2_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AGCN\" ]; then\n        echo \"Not added into TIPC yet.\"\n    elif [ ${model_name} == \"STGCN\" ]; then\n        echo \"Not added into TIPC yet.\"\n    elif [ ${model_name} == \"TSM\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar"
        },
        {
            "comment": "This code is downloading pre-trained weights and data for PaddleVideo models, such as ResNet50, TSN, and TimeSformer. It checks the model_name and performs specific tasks accordingly: unzipping tar files, downloading lists of frames, and retrieving pretrained weights from specified URLs.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":427-445",
            "content": "        tar -xf k400_rawframes_small.tar\n        # download datalist for fleet benchmark\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/train_fleet_frames.list\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/val_fleet_frames.list\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TSN\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo/PretrainModel/ResNet50_pretrain.pdparams --no-check-certificate\n    elif [ ${model_name} == \"TimeSformer\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar"
        },
        {
            "comment": "Code snippet checks the model name and performs specific actions for each. If model is \"k400_videos_small\", it downloads pre-trained weights. If model is \"SlowFast\", it downloads lite train data. For \"BMN\", it downloads BMN training data, including annotations and JSON files. No action is taken for \"AttentionLSTM\" as it's not added to TIPC yet.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":446-467",
            "content": "        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/ViT_base_patch16_224_pretrained.pdparams --no-check-certificate\n    elif [ ${model_name} == \"AttentionLSTM\" ]; then\n        echo \"Not added into TIPC yet.\"\n    elif [ ${model_name} == \"SlowFast\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n    elif [ ${model_name} == \"BMN\" ]; then\n        # pretrain lite train data\n        pushd ./data\n        mkdir bmn_data\n        cd bmn_data\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/bmn_feat.tar.gz\n        tar -xf bmn_feat.tar.gz\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activitynet_1.3_annotations.json\n        wget -nc https://paddlemodels.bj.bcebos.com/video_detection/activity_net_1_3_new.json\n        popd"
        },
        {
            "comment": "This code checks if the model is VideoSwin or PP-TSM. If VideoSwin, it downloads pretrain lite train data and pretrained weights. If PP-TSM, it downloads lite data and inference model. Other models are not added to TIPC yet.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":468-496",
            "content": "    elif [ ${model_name} == \"VideoSwin\" ]; then\n        # pretrain lite train data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_videos_small.tar\n        tar -xf k400_videos_small.tar\n        popd\n        # download pretrained weights\n        wget -nc -P ./data https://videotag.bj.bcebos.com/PaddleVideo-release2.2/swin_small_patch4_window7_224.pdparams --no-check-certificate\n    else\n        echo \"Not added into TIPC yet.\"\n    fi\nfi\nif [ ${MODE} = \"klquant_whole_infer\" ]; then\n    if [ ${model_name} = \"PP-TSM\" ]; then\n        # download lite data\n        pushd ./data/k400\n        wget -nc https://videotag.bj.bcebos.com/Data/k400_rawframes_small.tar\n        tar -xf k400_rawframes_small.tar\n        popd\n        # download inference model\n        mkdir ./inference\n        pushd ./inference\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/ppTSM.zip --no-check-certificate\n        unzip ppTSM.zip\n        popd\n    else\n        echo \"Not added into TIPC yet.\"\n    fi"
        },
        {
            "comment": "This code installs necessary packages, downloads pre-trained model weights for either PP-TSM or PP-TSN, and exports the inference models for these two models. This is typically done before running inference on new data.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":497-519",
            "content": "fi\nif [ ${MODE} = \"cpp_infer\" ];then\n    # install required packages\n    apt-get update\n    apt install libavformat-dev\n    apt install libavcodec-dev\n    apt install libswresample-dev\n    apt install libswscale-dev\n    apt install libavutil-dev\n    apt install libsdl1.2-dev\n    apt-get install ffmpeg\n    if [ ${model_name} = \"PP-TSM\" ]; then\n        # download pretrained weights\n        wget -nc -P data/ https://videotag.bj.bcebos.com/PaddleVideo-release2.1/PPTSM/ppTSM_k400_uniform.pdparams --no-check-certificate\n        # export inference model\n        ${python} tools/export_model.py -c configs/recognition/pptsm/pptsm_k400_frames_uniform.yaml -p data/ppTSM_k400_uniform.pdparams -o ./inference/ppTSM\n    elif [ ${model_name} = \"PP-TSN\" ]; then\n        # download pretrained weights\n        wget -nc -P data/ https://videotag.bj.bcebos.com/PaddleVideo-release2.2/ppTSN_k400.pdparams --no-check-certificate\n        # export inference model\n        ${python} tools/export_model.py -c configs/recognition/pptsn/pptsn_k400_videos.yaml -p data/ppTSN_k400.pdparams -o ./inference/ppTSN"
        },
        {
            "comment": "This code checks if the model_name is either \"PP-TSM\" or \"PP-TSN\". If it matches, it prepares lite infer data and downloads the corresponding inference model for serving. If not, it displays a message indicating that the model is not added into TIPC now.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":520-551",
            "content": "    else\n        echo \"Not added into TIPC now.\"\n    fi\nfi\nif [ ${MODE} = \"serving_infer_python\" ];then\n    if [[ ${model_name} == \"PP-TSM\" ]];then\n        # prepare lite infer data for serving\n        pushd ./data\n        mkdir python_serving_infer_video_dir\n        cp ./example.avi python_serving_infer_video_dir/\n        popd\n        # prepare inference model\n        mkdir ./inference\n        pushd ./inference\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/ppTSM.zip --no-check-certificate\n        unzip ppTSM.zip\n        popd\n    elif [[ ${model_name} == \"PP-TSN\" ]];then\n        # prepare lite infer data for serving\n        pushd ./data\n        mkdir python_serving_infer_video_dir\n        cp ./example.avi python_serving_infer_video_dir/\n        popd\n        # prepare inference model\n        mkdir ./inference\n        pushd ./inference\n        wget -nc https://videotag.bj.bcebos.com/PaddleVideo-release2.3/ppTSN.zip --no-check-certificate\n        unzip ppTSN.zip\n        popd\n    else\n        echo \"Not added into TIPC now.\""
        },
        {
            "comment": "This code snippet checks the current mode and performs specific actions accordingly. If the mode is \"paddle2onnx_infer\", it installs paddle2onnx and onnxruntime with a specified Python interpreter. For the \"PP-TSM\" model, it displays a message indicating that it's not added to TIPC. For the \"PP-TSN\" model, it downloads and unzips the inference model from a specific URL. If the mode is not recognized, it indicates that the corresponding action is not available in TIPC.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/prepare.sh\":552-576",
            "content": "    fi\nfi\nif [ ${MODE} = \"paddle2onnx_infer\" ];then\n    # install paddle2onnx\n    python_name_list=$(func_parser_value \"${lines[2]}\")\n    IFS='|'\n    array=(${python_name_list})\n    python_name=${array[0]}\n    ${python_name} -m pip install paddle2onnx\n    ${python_name} -m pip install onnxruntime==1.9.0\n    if [ ${model_name} = \"PP-TSM\" ]; then\n        echo \"Not added into TIPC now.\"\n    elif [ ${model_name} = \"PP-TSN\" ]; then\n        mkdir -p ./inference\n        wget -P ./inference/ https://videotag.bj.bcebos.com/PaddleVideo-release2.3/ppTSN.zip\n        # unzip inference model\n        pushd ./inference\n        unzip ppTSN.zip\n        popd\n    else\n        echo \"Not added into TIPC now.\"\n    fi\nfi"
        }
    ]
}