{
    "summary": "Decoder neural network layer uses backbone features, 2D convolution, batch normalization, and ReLU activation for class prediction. The `build_decoder` function constructs a decoder network with specified number of classes, backbone architecture, and Batch Normalization implementation.",
    "details": [
        {
            "comment": "Decoder is a neural network layer that takes in features from backbone and outputs predicted classes. It initializes convolution layers with different input planes based on the specified backbone. It includes batch normalization, ReLU activation, and sequential convolutions for feature extraction.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/decoder.py\":0-31",
            "content": "import math\nimport paddle\nimport paddle.nn as nn\nimport paddle.nn.functional as F\nfrom utils.api import kaiming_normal_\nclass Decoder(nn.Layer):\n    def __init__(self, num_classes, backbone, BatchNorm):\n        super(Decoder, self).__init__()\n        if backbone == 'resnet' or backbone == 'drn' or backbone == 'resnet_edge':\n            low_level_inplanes = 256\n        elif backbone == 'xception':\n            low_level_inplanes = 128\n        elif backbone == 'mobilenet':\n            low_level_inplanes = 24\n        else:\n            raise NotImplementedError\n        self.conv1 = nn.Conv2D(low_level_inplanes, 48, 1, bias_attr=False)\n        self.bn1 = BatchNorm(48)\n        self.relu = nn.ReLU(True)\n        self.last_conv = nn.Sequential(\n            nn.Conv2D(304,\n                      256,\n                      kernel_size=3,\n                      stride=1,\n                      padding=1,\n                      bias_attr=False), BatchNorm(256), nn.ReLU(True),\n            nn.Sequential(),\n            nn.Conv2D(256,\n                      256,"
        },
        {
            "comment": "Decoder network with 2D convolution, batch normalization, and ReLU activation. Initializes weight using Kaiming Normal distribution.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/decoder.py\":32-61",
            "content": "                      kernel_size=3,\n                      stride=1,\n                      padding=1,\n                      bias_attr=False), BatchNorm(256), nn.ReLU(True),\n            nn.Sequential())\n        self._init_weight()\n    def forward(self, x, low_level_feat):\n        low_level_feat = self.conv1(low_level_feat)\n        low_level_feat = self.bn1(low_level_feat)\n        low_level_feat = self.relu(low_level_feat)\n        x = F.interpolate(x,\n                          size=low_level_feat.shape[2:],\n                          mode='bilinear',\n                          align_corners=True)\n        x = paddle.concat((x, low_level_feat), axis=1)\n        x = self.last_conv(x)\n        return x\n    def _init_weight(self):\n        for m in self.sublayers():\n            if isinstance(m, nn.Conv2D):\n                kaiming_normal_(m.weight)\n            elif isinstance(m, nn.BatchNorm2D):\n                from utils.api import fill_\n                fill_(m.weight, 1)\n                from utils.api import zero_\n                zero_(m.bias)"
        },
        {
            "comment": "The function `build_decoder` takes parameters `num_classes`, `backbone`, and `BatchNorm` and returns an instance of the `Decoder` class. The purpose is to construct a decoder network for the specified number of classes, using the chosen backbone architecture and Batch Normalization implementation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/Ma-Net/networks/decoder.py\":64-65",
            "content": "def build_decoder(num_classes, backbone, BatchNorm):\n    return Decoder(num_classes, backbone, BatchNorm)"
        }
    ]
}