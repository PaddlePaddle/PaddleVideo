{
    "summary": "The code defines two functions, get_class2id_map and get_arguments. It reads ground truth text files, splits them by class labels, saves as .npy files, defines boundary frames for new actions, and saves these as separate .npy files. Assumes input files preprocessed and split by lines.",
    "details": [
        {
            "comment": "This code defines two functions: get_class2id_map and get_arguments. The get_class2id_map function takes a dataset name (50salads, gtea, or breakfast) and the path to the dataset directory, and returns a dictionary mapping class names to their respective IDs by reading the \"mapping.txt\" file in the specified dataset directory. The get_arguments function parses all arguments from the command line interface for converting ground truth txt files to numpy arrays.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/prepare_asrf_data.py\":0-41",
            "content": "import argparse\nimport glob\nimport os\nimport sys\nfrom typing import Dict\nimport numpy as np\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\ndataset_names = [\"50salads\", \"breakfast\", \"gtea\"]\ndef get_class2id_map(dataset: str,\n                     dataset_dir: str = \"./dataset\") -> Dict[str, int]:\n    \"\"\"\n    Args:\n        dataset: 50salads, gtea, breakfast\n        dataset_dir: the path to the datset directory\n    \"\"\"\n    assert (dataset in dataset_names\n            ), \"You have to choose 50salads, gtea or breakfast as dataset.\"\n    with open(os.path.join(dataset_dir, \"{}/mapping.txt\".format(dataset)),\n              \"r\") as f:\n        actions = f.read().split(\"\\n\")[:-1]\n    class2id_map = dict()\n    for a in actions:\n        class2id_map[a.split()[1]] = int(a.split()[0])\n    return class2id_map\ndef get_arguments() -> argparse.Namespace:\n    \"\"\"\n    parse all the arguments from command line inteface\n    return a list of parsed arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"convert ground truth txt files to numpy array\")"
        },
        {
            "comment": "This code sets up the dataset directory path and creates directories for saving ground truth numpy arrays. It also creates a class to index mapping using get_class2id_map function, and retrieves all groundTruth text files' paths in the specified dataset directory.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/prepare_asrf_data.py\":42-73",
            "content": "    parser.add_argument(\n        \"--dataset_dir\",\n        type=str,\n        default=\"./dataset\",\n        help=\"path to a dataset directory (default: ./dataset)\",\n    )\n    return parser.parse_args()\ndef main() -> None:\n    args = get_arguments()\n    datasets = [\"50salads\", \"gtea\", \"breakfast\", \"baseball\"]\n    for dataset in datasets:\n        # make directory for saving ground truth numpy arrays\n        cls_save_dir = os.path.join(args.dataset_dir, dataset, \"gt_arr\")\n        if not os.path.exists(cls_save_dir):\n            os.mkdir(cls_save_dir)\n        # make directory for saving ground truth numpy arrays\n        boundary_save_dir = os.path.join(args.dataset_dir, dataset,\n                                         \"gt_boundary_arr\")\n        if not os.path.exists(boundary_save_dir):\n            os.mkdir(boundary_save_dir)\n        # class to index mapping\n        class2id_map = get_class2id_map(dataset, dataset_dir=args.dataset_dir)\n        gt_dir = os.path.join(args.dataset_dir, dataset, \"groundTruth\")\n        gt_paths = glob.glob(os.path.join(gt_dir, \"*.txt\"))"
        },
        {
            "comment": "This code is reading ground truth text files, splitting them into arrays based on class labels, and saving these arrays as .npy files. It also defines boundary frames for new actions and saves these as separate .npy files. The code assumes that the input files are already processed and split by lines.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/prepare_asrf_data.py\":75-105",
            "content": "        for gt_path in gt_paths:\n            # the name of ground truth text file\n            gt_name = os.path.relpath(gt_path, gt_dir)\n            with open(gt_path, \"r\") as f:\n                gt = f.read().split(\"\\n\")[:-1]\n            gt_array = np.zeros(len(gt))\n            for i in range(len(gt)):\n                gt_array[i] = class2id_map[gt[i]]\n            # save array\n            np.save(os.path.join(cls_save_dir, gt_name[:-4] + \".npy\"), gt_array)\n            # the name of ground truth text file\n            gt_name = os.path.relpath(gt_path, gt_dir)\n            with open(gt_path, \"r\") as f:\n                gt = f.read().split(\"\\n\")[:-1]\n            # define the frame where new action starts as boundary frame\n            boundary = np.zeros(len(gt))\n            last = gt[0]\n            boundary[0] = 1\n            for i in range(1, len(gt)):\n                if last != gt[i]:\n                    boundary[i] = 1\n                    last = gt[i]\n            # save array\n            np.save(os.path.join(boundary_save_dir, gt_name[:-4] + \".npy\"),"
        },
        {
            "comment": "This code snippet defines a function named \"main\" and checks if the script is being run directly. If it is, the \"main\" function is called to execute the desired task. The code prints \"Done\" after completing the specified operation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/50salads/prepare_asrf_data.py\":106-112",
            "content": "                    boundary)\n    print(\"Done\")\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}