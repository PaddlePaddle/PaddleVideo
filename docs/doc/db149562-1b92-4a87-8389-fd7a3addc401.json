{
    "summary": "The code defines a `DrawFrame` class, which is a QWidget for drawing paths and responding to mouse events. It is used in conjunction with other classes such as `DemoUI`. The 'export' function converts painter's polygon to fill polygon and is triggered by the 'start_btn'. The code initializes the application and starts the event loop.",
    "details": [
        {
            "comment": "This code defines a class called DrawFrame, which is a QWidget that can be drawn on. It overrides the paintEvent method to draw paths using a QPainter, and responds to mouse events for line drawing. The class takes a painter object in its constructor, suggesting it could be used in conjunction with other classes or methods.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/gui/demo.py\":0-35",
            "content": "# Author: Acer Zhang\n# Datetime: 2022/1/6 \n# Copyright belongs to the author.\n# Please indicate the source for reprinting.\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QFrame, QWidget\nfrom PyQt5.QtGui import QPainter, QPixmap, QPen, QColor, QPainterPath\nfrom PyQt5.QtCore import Qt, QPoint\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom QEIVideo.ui.demo import Ui_MainWindow as DemoUIRoot\nclass DrawFrame(QWidget):\n    def __init__(self, painter, *args, **kwargs):\n        super(DrawFrame, self).__init__(*args, **kwargs)\n        self.painter = painter\n    def paintEvent(self, event):\n        painter = QPainter(self)\n        pen = QPen(QColor(\"orange\"))\n        pen.setWidth(5)\n        pen.setCapStyle(Qt.RoundCap)\n        pen.setJoinStyle(Qt.RoundJoin)\n        painter.setPen(pen)\n        painter.drawPath(self.painter)\n    def mousePressEvent(self, event):\n        self.painter.moveTo(event.pos())\n        self.update()\n    def mouseMoveEvent(self, event):\n        self.painter.lineTo(event.pos())\n        self.update()"
        },
        {
            "comment": "This code initializes a `DemoUI` class with a `DrawFrame` object that draws video frames. The `export` function converts the painter's polygon to a fill polygon and is triggered by the 'start_btn'. The code also sets up the application, creates an instance of the `DemoUI` class, and starts the event loop.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/QEIVideo/gui/demo.py\":38-61",
            "content": "class DemoUI(QMainWindow, DemoUIRoot):\n    def __init__(self):\n        super(DemoUI, self).__init__()\n        self.setupUi(self)\n        self.painter = QPainterPath()\n        self.draw_frame = DrawFrame(self.painter, self.video_frame)\n        self.draw_frame.setGeometry(QtCore.QRect(0, 10, 751, 301))\n        self.draw_frame.setObjectName(\"draw_frame\")\n        self.draw_frame.raise_()\n        self.draw_frame.setAttribute(QtCore.Qt.WA_TranslucentBackground)\n        self.start_btn.clicked.connect(self.export)\n    def export(self):\n        a = self.painter.toFillPolygon()\n        pass\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    gui_class = DemoUI()\n    gui_class.show()\n    sys.exit(app.exec_())"
        }
    ]
}