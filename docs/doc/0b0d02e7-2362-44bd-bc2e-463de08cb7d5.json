{
    "summary": "The MoViNetRecognizerFrame class, extending BaseRecognizer, has forward_net and train_step methods for training steps. Three functions - forward_net, test_step, and infer_step are defined for model's testing or inference process.",
    "details": [
        {
            "comment": "The code is defining a class named \"MoViNetRecognizerFrame\" which extends the BaseRecognizer class. It has two methods, forward_net and train_step. The forward_net method defines how the model will run from input to output by first cleaning activation buffers in the backbone and then passing the inputs through it to get outputs. Finally, the head is applied on these outputs to get class scores. The train_step method defines a training step for this model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/recognizers/recognizer_movinet_frame.py\":0-32",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nimport paddle\nfrom paddlevideo.utils import get_logger\nfrom .base import BaseRecognizer\nfrom ...registry import RECOGNIZERS\nlogger = get_logger(\"paddlevideo\")\n@RECOGNIZERS.register()\nclass MoViNetRecognizerFrame(BaseRecognizer):\n    def forward_net(self, imgs):\n        \"\"\"Define how the model is going to run, from input to output.\n        \"\"\"\n        self.backbone.clean_activation_buffers()\n        outputs = self.backbone(imgs)\n        cls_score = self.head(outputs)\n        return cls_score\n    def train_step(self, data_batch):"
        },
        {
            "comment": "Training step: Implements a training step for the model, taking data_batch as input. Extracts images and labels, transposes data, applies forward pass in the network, calculates loss metrics, and computes top-1 and top-5 accuracy scores. Returns output with 'loss', 'top1', and 'top5' keys.\nValidating step: Implements a validating step for the model, similar to training step but used to validate the model on unseen data. Computes top-1 and top-5 accuracy scores along with loss metrics.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/recognizers/recognizer_movinet_frame.py\":33-56",
            "content": "        \"\"\"Training step.\n        \"\"\"\n        imgs = data_batch[0]\n        labels = data_batch[1]  #.astype(\"int64\")\n        data = paddle.transpose(imgs, perm=[0, 2, 1, 3, 4])\n        # call forward\n        cls_score = self.forward_net(data)\n        loss_metrics = self.head.loss_func(cls_score, labels)\n        top1 = paddle.metric.accuracy(input=cls_score, label=labels, k=1)\n        top5 = paddle.metric.accuracy(input=cls_score, label=labels, k=5)\n        output = {'loss': loss_metrics, 'top1': top1, 'top5': top5}\n        return output\n    def val_step(self, data_batch):\n        \"\"\"Validating setp.\n        \"\"\"\n        imgs = data_batch[0]\n        labels = data_batch[1]  #.astype(\"int64\")\n        data = paddle.transpose(imgs, perm=[0, 2, 1, 3, 4])\n        # call forward\n        cls_score = self.forward_net(data)\n        loss_metrics = self.head.loss_func(cls_score, labels)\n        top1 = paddle.metric.accuracy(input=cls_score, label=labels, k=1)\n        top5 = paddle.metric.accuracy(input=cls_score, label=labels, k=5)"
        },
        {
            "comment": "This code defines three functions: `forward_net`, `test_step`, and `infer_step`. The `forward_net` function is the core of the model, responsible for forward propagation. The `test_step` and `infer_step` functions both take in a data batch, transpose the images, call the `forward_net` function to get class scores, and return these scores. These steps are likely part of a deep learning model's testing or inference process.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/recognizers/recognizer_movinet_frame.py\":57-77",
            "content": "        output = {'loss': loss_metrics, 'top1': top1, 'top5': top5}\n        return output\n    def test_step(self, data_batch):\n        \"\"\"Test step.\n        \"\"\"\n        imgs = data_batch[0]\n        data = paddle.transpose(imgs, perm=[0, 2, 1, 3, 4])\n        # call forward\n        cls_score = self.forward_net(data)\n        return cls_score\n    def infer_step(self, data_batch):\n        \"\"\"Infer step.\n        \"\"\"\n        imgs = data_batch[0]\n        # call forward\n        data = paddle.transpose(imgs, perm=[0, 2, 1, 3, 4])\n        cls_score = self.forward_net(data)\n        return cls_score"
        }
    ]
}