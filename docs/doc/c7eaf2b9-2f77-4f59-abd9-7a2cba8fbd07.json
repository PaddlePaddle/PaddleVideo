{
    "summary": "The ResNet3dSlowOnly class creates a Slowfast pathway in the ResNet3d architecture, reduces channel number, and is registered under BACKBONES. The make_res_layer function builds residual layers with specified spatial_strides, temporal_strides, and dilations for 3D Resnet layers.",
    "details": [
        {
            "comment": "This code defines a ResNet3dSlowOnly class that extends ResNet3d for creating a Slowfast pathway. It reduces the channel number of the fast pathway by a specified 'channel_ratio'. This model is registered under BACKBONES and accepts the same arguments as ResNet3d.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":0-29",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport warnings\nimport paddle\nimport paddle.nn as nn\nfrom .resnet3d import ResNet3d, ConvBNLayer\nfrom ..registry import BACKBONES\n@BACKBONES.register()\nclass ResNet3dSlowOnly(ResNet3d):\n    \"\"\"A pathway of Slowfast based on ResNet3d.\n    Args:\n        *args (arguments): Arguments same as :class:``ResNet3d``.\n        channel_ratio (int): Reduce the channel number of fast pathway\n            by ``channel_ratio``, corresponding to ``beta`` in the paper."
        },
        {
            "comment": "Function `__init__` initializes the ResNet3d object by setting initial values for inplanes and lateral_connections based on provided args and kwargs. The function make_res_layer builds a residual layer for Slowfast, taking in various parameters including block type, input planes, output planes, number of blocks, and more.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":30-59",
            "content": "            Default: 8.\n        **kwargs (keyword arguments): Keywords arguments for ResNet3d.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.inplanes = self.base_channels\n        self.lateral_connections = []\n        for i in range(len(self.stage_blocks)):\n            planes = self.base_channels * 2**i\n            self.inplanes = planes * self.block.expansion\n    def make_res_layer(self,\n                       block,\n                       inplanes,\n                       planes,\n                       blocks,\n                       spatial_stride=1,\n                       temporal_stride=1,\n                       dilation=1,\n                       inflate=1,\n                       inflate_style='3x1x1',\n                       non_local=0,\n                       non_local_cfg=dict(),\n                       conv_cfg=None,\n                       norm_cfg=None,\n                       act_cfg=None,\n                       with_cp=False):\n        \"\"\"Build residual layer for Slowfast."
        },
        {
            "comment": "This function is defining a Residual module with specified parameters including block type, input and output planes, number of residual blocks, spatial and temporal strides, dilation rate, whether to inflate or apply non-local operations for each block.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":61-78",
            "content": "        Args:\n            block (nn.Module): Residual module to be built.\n            inplanes (int): Number of channels for the input\n                feature in each block.\n            planes (int): Number of channels for the output\n                feature in each block.\n            blocks (int): Number of residual blocks.\n            spatial_stride (int | Sequence[int]): Spatial strides\n                in residual and conv layers. Default: 1.\n            temporal_stride (int | Sequence[int]): Temporal strides in\n                residual and conv layers. Default: 1.\n            dilation (int): Spacing between kernel elements. Default: 1.\n            inflate (int | Sequence[int]): Determine whether to inflate\n                for each block. Default: 1.\n            inflate_style (str): ``3x1x1`` or ``3x3x3``. which determines\n                the kernel sizes and padding strides for conv1 and\n                conv2 in each block. Default: ``3x1x1``.\n            non_local (int | Sequence[int]): Determine whether to apply"
        },
        {
            "comment": "This function takes in a configuration for building residual layers, including parameters like blocks (number of residual layers to create), inflate (inflation times for the conv layers), non_local (whether to use non-local modules), conv_cfg, norm_cfg, act_cfg, and with_cp (use checkpoint). It asserts that the lengths of inflate and non_local match the number of blocks specified. The function returns a residual layer for the given configuration.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":79-97",
            "content": "                non-local module in the corresponding block of each stages.\n                Default: 0.\n            non_local_cfg (dict): Config for non-local module.\n                Default: ``dict()``.\n            conv_cfg (dict | None): Config for conv layers. Default: None.\n            norm_cfg (dict | None): Config for norm layers. Default: None.\n            act_cfg (dict | None): Config for activate layers. Default: None.\n            with_cp (bool): Use checkpoint or not. Using checkpoint will save\n                some memory while slowing down the training speed.\n                Default: False.\n        Returns:\n            nn.Module: A residual layer for the given config.\n        \"\"\"\n        inflate = inflate if not isinstance(inflate,\n                                            int) else (inflate, ) * blocks\n        non_local = non_local if not isinstance(non_local,\n                                                int) else (non_local, ) * blocks\n        assert len(inflate) == blocks and len(non_local) == blocks"
        },
        {
            "comment": "This code is creating a downsample layer and appending a block to the layers list. The downsample is created based on whether the current input planes match the expected value or not. If it doesn't match, a convolutional layer with stride is used for downsampling. The block is added to the layers list with specified parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":99-128",
            "content": "        lateral_inplanes = 0\n        if (spatial_stride != 1\n                or (inplanes + lateral_inplanes) != planes * block.expansion):\n            downsample = ConvBNLayer(\n                in_channels=inplanes + lateral_inplanes,\n                out_channels=planes * block.expansion,\n                kernel_size=1,\n                stride=(temporal_stride, spatial_stride, spatial_stride),\n                bias=False,\n                act=None)\n        else:\n            downsample = None\n        layers = []\n        layers.append(\n            block(\n                inplanes + lateral_inplanes,\n                planes,\n                spatial_stride,\n                temporal_stride,\n                dilation,\n                downsample,\n                inflate=(inflate[0] == 1),\n                inflate_style=inflate_style,\n                non_local=(non_local[0] == 1),\n                non_local_cfg=non_local_cfg,\n                conv_cfg=conv_cfg,\n                norm_cfg=norm_cfg,\n                act_cfg=act_cfg,\n                with_cp=with_cp))"
        },
        {
            "comment": "This code defines a function to create layers for a Resnet3D backbone model in PaddleVideo. It takes in parameters such as planes, blocks, dilation, inflate, inflate_style, non_local, non_local_cfg, conv_cfg, norm_cfg, act_cfg, and with_cp. The function creates layers by appending instances of a block class to a list, and returns them as a sequential model for training or inference. Additionally, there is another function that inflates a 2D conv module to a 3D one, mainly adjusting the inplanes due to lateral connections for fitting the shapes of lateral connection counterparts.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":129-156",
            "content": "        inplanes = planes * block.expansion\n        for i in range(1, blocks):\n            layers.append(\n                block(\n                    inplanes,\n                    planes,\n                    1,\n                    1,\n                    dilation,\n                    inflate=(inflate[i] == 1),\n                    inflate_style=inflate_style,\n                    non_local=(non_local[i] == 1),\n                    non_local_cfg=non_local_cfg,\n                    conv_cfg=conv_cfg,\n                    norm_cfg=norm_cfg,\n                    act_cfg=act_cfg,\n                    with_cp=with_cp))\n        return nn.Sequential(*layers)\n    def _inflate_conv_params(self, conv3d, state_dict_2d, module_name_2d,\n                             inflated_param_names):\n        \"\"\"Inflate a conv module from 2d to 3d.\n        The differences of conv modules betweene 2d and 3d in Pathway\n        mainly lie in the inplanes due to lateral connections. To fit the\n        shapes of the lateral connection counterpart, it will expand"
        },
        {
            "comment": "This function loads the 2D model's state dictionary into a 3D Conv module, concatenating conv2d parameters and adding zero paddings to match the new shape. The weight shape of the 2D model is retrieved, and if the number of input channels in the 3D model is different from the 2D model, it will raise a warning or return without loading the parameters due to incompatible shapes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":157-179",
            "content": "        parameters by concatting conv2d parameters and extra zero paddings.\n        Args:\n            conv3d (nn.Module): The destination conv3d module.\n            state_dict_2d (OrderedDict): The state dict of pretrained 2d model.\n            module_name_2d (str): The name of corresponding conv module in the\n                2d model.\n            inflated_param_names (list[str]): List of parameters that have been\n                inflated.\n        \"\"\"\n        weight_2d_name = module_name_2d + '.weight'\n        conv2d_weight = state_dict_2d[weight_2d_name]\n        old_shape = conv2d_weight.shape\n        new_shape = conv3d.weight.data.shape\n        kernel_t = new_shape[2]\n        if new_shape[1] != old_shape[1]:\n            if new_shape[1] < old_shape[1]:\n                warnings.warn(f'The parameter of {module_name_2d} is not'\n                              'loaded due to incompatible shapes. ')\n                return\n            # Inplanes may be different due to lateral connections\n            new_channels = new_shape[1] - old_shape[1]"
        },
        {
            "comment": "The code inflates a 2D convolutional layer into a 3D convolutional layer by padding the weights and copying the bias. It does this for all layers specified in the ResNet3dSlowOnly architecture, with specified parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":180-209",
            "content": "            pad_shape = old_shape\n            pad_shape = pad_shape[:1] + (new_channels, ) + pad_shape[2:]\n            # Expand parameters by concat extra channels\n            conv2d_weight = paddle.concat(\n                (conv2d_weight, paddle.zeros(pad_shape)), axis=1)\n        new_weight = conv2d_weight.data.unsqueeze(2).expand_as(\n            conv3d.weight) / kernel_t\n        conv3d.weight.data.copy_(new_weight)\n        inflated_param_names.append(weight_2d_name)\n        if getattr(conv3d, 'bias') is not None:\n            bias_2d_name = module_name_2d + '.bias'\n            conv3d.bias.data.copy_(state_dict_2d[bias_2d_name])\n            inflated_param_names.append(bias_2d_name)\nif __name__ == '__main__':\n    net = ResNet3dSlowOnly(\n        depth=50,\n        in_channels=17,\n        base_channels=32,\n        conv1_kernel=(1, 7, 7),\n        num_stages=3,\n        out_indices=[2],\n        stage_blocks=[3, 4, 6],\n        conv1_stride_s=1,\n        pool1_stride_s=1,\n        inflate=[0, 1, 1],\n        with_pool2=False,"
        },
        {
            "comment": "This code sets the spatial_strides, temporal_strides, and dilations for a 3D Resnet layer, with spatial strides of [2, 2, 2], temporal strides of [1, 1, 2], and dilations of [1, 1, 1].",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d_slowonly.py\":210-213",
            "content": "        spatial_strides=[2, 2, 2],\n        temporal_strides=[1, 1, 2],\n        dilations=[1, 1, 1])\n    pass"
        }
    ]
}