{
    "summary": "The code introduces a simplified 3D ResNet model in PaddleVideo, allowing for configurable parameters and options for non-local blocks and dilation values. The model is initialized with inflated 2D params, constructs layers, and can utilize pretrained weights.",
    "details": [
        {
            "comment": "The code is defining a function that creates a ConvBNLayer, which is a combination of convolution, normalization, and activation layers. It simplifies the usage of these layers in a convolutional neural network model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":0-36",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport warnings\nimport collections\nfrom itertools import repeat\nimport paddle\nfrom paddle import nn\ndef _ntuple(n):\n    def parse(x):\n        if isinstance(x, collections.abc.Iterable):\n            return tuple(x)\n        return tuple(repeat(x, n))\n    return parse\n_triple = _ntuple(3)\nclass ConvBNLayer(nn.Layer):\n    \"\"\"A conv block that bundles conv/norm/activation layers.\n        This block simplifies the usage of convolution layers, which are commonly"
        },
        {
            "comment": "This code defines a Conv2D layer with additional features including automatic bias setting, spectral norm support, and more padding modes. It is used in building convolutional layers, normalization layers, and activation layers for ResNet3D backbones in PaddleVideo.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":37-55",
            "content": "        used with a norm layer (e.g., BatchNorm) and activation layer (e.g., ReLU).\n        It is based upon three build methods: `build_conv_layer()`,\n        `build_norm_layer()` and `build_activation_layer()`.\n        Besides, we add some additional features in this module.\n        1. Automatically set `bias` of the conv layer.\n        2. Spectral norm is supported.\n        3. More padding modes are supported. Before PyTorch 1.5, nn.Conv2d only\n        supports zero and circular padding, and we add \"reflect\" padding mode.\n        Args:\n            in_channels (int): Number of channels in the input feature map.\n                Same as that in ``nn._ConvNd``.\n            out_channels (int): Number of channels produced by the convolution.\n                Same as that in ``nn._ConvNd``.\n            kernel_size (int | tuple[int]): Size of the convolving kernel.\n                Same as that in ``nn._ConvNd``.\n            stride (int | tuple[int]): Stride of the convolution.\n                Same as that in ``nn._ConvNd``."
        },
        {
            "comment": "This code defines a ConvBNLayer class, which is a 3D convolutional layer followed by batch normalization. It takes parameters such as in_channels, out_channels, kernel_size, padding, stride, dilation, groups, act (activation function), and bias. The constructor initializes the Conv3D layer and BatchNorm3D with the specified parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":56-88",
            "content": "            padding (int | tuple[int]): Zero-padding added to both sides of\n                the input. Same as that in ``nn._ConvNd``.\n            dilation (int | tuple[int]): Spacing between kernel elements.\n                Same as that in ``nn._ConvNd``.\n            groups (int): Number of blocked connections from input channels to\n                output channels. Same as that in ``nn._ConvNd``.\n        \"\"\"\n    def __init__(\n            self,\n            in_channels,\n            out_channels,\n            kernel_size,\n            padding=0,\n            stride=1,\n            dilation=1,\n            groups=1,\n            act=None,\n            bias=None,\n    ):\n        super(ConvBNLayer, self).__init__()\n        self._conv = nn.Conv3D(\n            in_channels=in_channels,\n            out_channels=out_channels,\n            kernel_size=kernel_size,\n            stride=stride,\n            padding=padding,\n            dilation=dilation,\n            groups=groups,\n            bias_attr=bias)\n        self._batch_norm = nn.BatchNorm3D(out_channels, momentum=0.1)"
        },
        {
            "comment": "The code defines a Bottleneck3d class, which represents a bottleneck block for ResNet3D. It takes in input channels (inplanes), output channels (planes), spatial and temporal stride, dilation rate, downsample layer, inflate flag, and inflate style as arguments. The class has an act variable to store the activation function and defines a forward method that performs convolutions, batch normalization, and activation if necessary.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":89-114",
            "content": "        self.act = act\n        if act is not None:\n            self._act_op = nn.ReLU()\n    def forward(self, inputs):\n        y = self._conv(inputs)\n        y = self._batch_norm(y)\n        if self.act is not None:\n            y = self._act_op(y)\n        return y\nclass Bottleneck3d(nn.Layer):\n    \"\"\"Bottleneck 3d block for ResNet3D.\n    Args:\n        inplanes (int): Number of channels for the input in first conv3d layer.\n        planes (int): Number of channels produced by some norm/conv3d layers.\n        spatial_stride (int): Spatial stride in the conv3d layer. Default: 1.\n        temporal_stride (int): Temporal stride in the conv3d layer. Default: 1.\n        dilation (int): Spacing between kernel elements. Default: 1.\n        downsample (nn.Module | None): Downsample layer. Default: None.\n        inflate (bool): Whether to inflate kernel. Default: True.\n        inflate_style (str): ``3x1x1`` or ``3x3x3``. which determines the\n            kernel sizes and padding strides for conv1 and conv2 in each block."
        },
        {
            "comment": "The code defines a ResNet3D block with various configurations including the number of input and output planes, spatial and temporal stride, dilation rate, downsampling method, inflation settings, and whether to apply non-local modules or not. The default configuration includes convolution, norm, and activation layers, as well as an option for using checkpoint to save memory at the cost of training speed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":115-139",
            "content": "            Default: '3x1x1'.\n        non_local (bool): Determine whether to apply non-local module in this\n            block. Default: False.\n        non_local_cfg (dict): Config for non-local module. Default: ``dict()``.\n        conv_cfg (dict): Config dict for convolution layer.\n            Default: ``dict(type='Conv3d')``.\n        norm_cfg (dict): Config for norm layers. required keys are ``type``,\n            Default: ``dict(type='BN3d')``.\n        act_cfg (dict): Config dict for activation layer.\n            Default: ``dict(type='ReLU')``.\n        with_cp (bool): Use checkpoint or not. Using checkpoint will save some\n            memory while slowing down the training speed. Default: False.\n    \"\"\"\n    expansion = 4\n    def __init__(self,\n                 inplanes,\n                 planes,\n                 spatial_stride=1,\n                 temporal_stride=1,\n                 dilation=1,\n                 downsample=None,\n                 inflate=True,\n                 inflate_style='3x1x1',\n                 non_local=False,"
        },
        {
            "comment": "This code initializes an instance of a 3D ResNet backbone model with specified parameters, including planes, spatial and temporal strides, dilation, inflate style, norm and conv configurations, whether to use non-local blocks, and more. It sets various attributes based on the input and instantiates a Conv3d layer for the first block.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":140-170",
            "content": "                 non_local_cfg=dict(),\n                 conv_cfg=dict(type='Conv3d'),\n                 norm_cfg=dict(type='BN3d'),\n                 act_cfg=dict(type='ReLU'),\n                 with_cp=False):\n        super().__init__()\n        assert inflate_style in ['3x1x1', '3x3x3']\n        self.inplanes = inplanes\n        self.planes = planes\n        self.spatial_stride = spatial_stride\n        self.temporal_stride = temporal_stride\n        self.dilation = dilation\n        self.inflate = inflate\n        self.inflate_style = inflate_style\n        self.norm_cfg = norm_cfg\n        self.conv_cfg = conv_cfg\n        self.act_cfg = act_cfg\n        self.with_cp = with_cp\n        self.non_local = non_local\n        self.non_local_cfg = non_local_cfg\n        self.conv1_stride_s = 1\n        self.conv2_stride_s = spatial_stride\n        self.conv1_stride_t = 1\n        self.conv2_stride_t = temporal_stride\n        if self.inflate:\n            if inflate_style == '3x1x1':\n                conv1_kernel_size = (3, 1, 1)\n                conv1_padding = (1, 0, 0)"
        },
        {
            "comment": "Code is setting up convolutional layers for a ResNet3D model. It creates ConvBNLayer instances with different kernel sizes and padding based on the dilation value. These layers are used for temporal, spatial, and spatial dimensions depending on the dilation value provided.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":171-197",
            "content": "                conv2_kernel_size = (1, 3, 3)\n                conv2_padding = (0, dilation, dilation)\n            else:\n                conv1_kernel_size = (1, 1, 1)\n                conv1_padding = (0, 0, 0)\n                conv2_kernel_size = (3, 3, 3)\n                conv2_padding = (1, dilation, dilation)\n        else:\n            conv1_kernel_size = (1, 1, 1)\n            conv1_padding = (0, 0, 0)\n            conv2_kernel_size = (1, 3, 3)\n            conv2_padding = (0, dilation, dilation)\n        self.conv1 = ConvBNLayer(\n            in_channels=inplanes,\n            out_channels=planes,\n            kernel_size=conv1_kernel_size,\n            stride=(self.conv1_stride_t, self.conv1_stride_s,\n                    self.conv1_stride_s),\n            padding=conv1_padding,\n            bias=False,\n            act='relu')\n        self.conv2 = ConvBNLayer(\n            in_channels=planes,\n            out_channels=planes,\n            kernel_size=conv2_kernel_size,\n            stride=(self.conv2_stride_t, self.conv2_stride_s,"
        },
        {
            "comment": "This code defines a ResNet3D block with ConvBNLayer, downsample layer, and ReLU activation. The forward method applies the layers sequentially, optionally performs downsampling, and adds the identity connection before returning the output. Non-local blocks can be applied if specified.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":198-238",
            "content": "                    self.conv2_stride_s),\n            padding=conv2_padding,\n            dilation=(1, dilation, dilation),\n            bias=False,\n            act='relu')\n        self.conv3 = ConvBNLayer(\n            in_channels=planes,\n            out_channels=planes * self.expansion,\n            kernel_size=1,\n            bias=False,\n            act=None,\n        )\n        self.downsample = downsample\n        self.relu = nn.ReLU()\n    def forward(self, x):\n        \"\"\"Defines the computation performed at every call.\"\"\"\n        def _inner_forward(x):\n            \"\"\"Forward wrapper for utilizing checkpoint.\"\"\"\n            identity = x\n            out = self.conv1(x)\n            out = self.conv2(out)\n            out = self.conv3(out)\n            if self.downsample is not None:\n                identity = self.downsample(x)\n            out = out + identity\n            return out\n        out = _inner_forward(x)\n        out = self.relu(out)\n        if self.non_local:\n            out = self.non_local_block(out)\n        return out"
        },
        {
            "comment": "The code defines a ResNet 3D backbone, with options for depth (18, 34, 50, 101, or 152), pretrained model name, number of stages for each res layer, loading of pretrained 2D model, input channel features, output feature indices, number of stages, and spatial and temporal strides.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":241-262",
            "content": "class ResNet3d(nn.Layer):\n    \"\"\"ResNet 3d backbone.\n    Args:\n        depth (int): Depth of resnet, from {18, 34, 50, 101, 152}.\n        pretrained (str | None): Name of pretrained model.\n        stage_blocks (tuple | None): Set number of stages for each res layer.\n            Default: None.\n        pretrained2d (bool): Whether to load pretrained 2D model.\n            Default: True.\n        in_channels (int): Channel num of input features. Default: 3.\n        base_channels (int): Channel num of stem output features. Default: 64.\n        out_indices (Sequence[int]): Indices of output feature. Default: (3, ).\n        num_stages (int): Resnet stages. Default: 4.\n        spatial_strides (Sequence[int]):\n            Spatial strides of residual blocks of each stage.\n            Default: ``(1, 2, 2, 2)``.\n        temporal_strides (Sequence[int]):\n            Temporal strides of residual blocks of each stage.\n            Default: ``(1, 1, 1, 1)``.\n        dilations (Sequence[int]): Dilation of each stage.\n            Default: ``(1, 1, 1, 1)``."
        },
        {
            "comment": "This code defines the parameters for ResNet3D backbone model including kernel sizes, stride values, and inflation dimensions. It also sets the default configuration for convolutional layers and normalization layers. The inflation style determines the kernel sizes for conv1 and conv2 in each block based on the given string input.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":263-281",
            "content": "        conv1_kernel (Sequence[int]): Kernel size of the first conv layer.\n            Default: ``(3, 7, 7)``.\n        conv1_stride_s (int): Spatial stride of the first conv layer.\n            Default: 2.\n        conv1_stride_t (int): Temporal stride of the first conv layer.\n            Default: 1.\n        pool1_stride_s (int): Spatial stride of the first pooling layer.\n            Default: 2.\n        pool1_stride_t (int): Temporal stride of the first pooling layer.\n            Default: 1.\n        with_pool2 (bool): Whether to use pool2. Default: True.\n        inflate (Sequence[int]): Inflate Dims of each block.\n            Default: (1, 1, 1, 1).\n        inflate_style (str): ``3x1x1`` or ``3x3x3``. which determines the\n            kernel sizes and padding strides for conv1 and conv2 in each block.\n            Default: '3x1x1'.\n        conv_cfg (dict): Config for conv layers. required keys are ``type``\n            Default: ``dict(type='Conv3d')``.\n        norm_cfg (dict): Config for norm layers. required keys are ``type`` and"
        },
        {
            "comment": "This code defines the parameters and architecture settings for ResNet3D model in PaddleVideo. It includes options such as backbone type, stages, activation layer, normalization mode, checkpoint usage, non-local module application, and residual block initialization.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":282-301",
            "content": "            ``requires_grad``.\n            Default: ``dict(type='BN3d', requires_grad=True)``.\n        act_cfg (dict): Config dict for activation layer.\n            Default: ``dict(type='ReLU', inplace=True)``.\n        norm_eval (bool): Whether to set BN layers to eval mode, namely, freeze\n            running stats (mean and var). Default: False.\n        with_cp (bool): Use checkpoint or not. Using checkpoint will save some\n            memory while slowing down the training speed. Default: False.\n        non_local (Sequence[int]): Determine whether to apply non-local module\n            in the corresponding block of each stages. Default: (0, 0, 0, 0).\n        non_local_cfg (dict): Config for non-local module. Default: ``dict()``.\n        zero_init_residual (bool):\n            Whether to use zero initialization for residual block,\n            Default: True.\n        kwargs (dict, optional): Key arguments for \"make_res_layer\".\n    \"\"\"\n    arch_settings = {\n        50: (Bottleneck3d, (3, 4, 6, 3)),\n        101: (Bottleneck3d, (3, 4, 23, 3)),"
        },
        {
            "comment": "This code defines a ResNet3D backbone model with customizable parameters such as depth, stage blocks, and more. It uses Bottleneck3d layers and allows for pre-trained 2D weights usage. The model is designed for processing 4D data (spatial and temporal dimensions).",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":302-330",
            "content": "        152: (Bottleneck3d, (3, 8, 36, 3))\n    }\n    def __init__(self,\n                 depth,\n                 stage_blocks=None,\n                 pretrained2d=True,\n                 in_channels=3,\n                 num_stages=4,\n                 base_channels=64,\n                 out_indices=(3, ),\n                 spatial_strides=(1, 2, 2, 2),\n                 temporal_strides=(1, 1, 1, 1),\n                 dilations=(1, 1, 1, 1),\n                 conv1_kernel=(3, 7, 7),\n                 conv1_stride_s=2,\n                 conv1_stride_t=1,\n                 pool1_stride_s=2,\n                 pool1_stride_t=1,\n                 with_pool1=True,\n                 with_pool2=True,\n                 inflate=(1, 1, 1, 1),\n                 inflate_style='3x1x1',\n                 conv_cfg=dict(type='Conv3d'),\n                 norm_cfg=dict(type='BN3d', requires_grad=True),\n                 act_cfg=dict(type='ReLU', inplace=True),\n                 norm_eval=False,\n                 with_cp=False,\n                 non_local=(0, 0, 0, 0),"
        },
        {
            "comment": "This function is initializing a ResNet3D model with specified depth, input channels, base channels, number of stages, stage blocks, output indices, spatial and temporal strides, dilations, and convolution kernel parameters. It raises an error if the provided depth does not match any of the known configurations or if the output indices exceed the number of stages. If the stage_blocks are specified, it also checks that their length matches the number of stages. The class inherits from a superclass.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":331-356",
            "content": "                 non_local_cfg=dict(),\n                 zero_init_residual=True,\n                 **kwargs):\n        super().__init__()\n        if depth not in self.arch_settings:\n            raise KeyError(f'invalid depth {depth} for resnet')\n        self.depth = depth\n        self.pretrained2d = pretrained2d\n        self.in_channels = in_channels\n        self.base_channels = base_channels\n        self.num_stages = num_stages\n        assert 1 <= num_stages <= 4\n        self.stage_blocks = stage_blocks\n        self.out_indices = out_indices\n        assert max(out_indices) < num_stages\n        self.spatial_strides = spatial_strides\n        self.temporal_strides = temporal_strides\n        self.dilations = dilations\n        assert len(spatial_strides) == len(temporal_strides) == len(\n            dilations) == num_stages\n        if self.stage_blocks is not None:\n            assert len(self.stage_blocks) == num_stages\n        self.conv1_kernel = conv1_kernel\n        self.conv1_stride_s = conv1_stride_s\n        self.conv1_stride_t = conv1_stride_t"
        },
        {
            "comment": "This code sets various attributes for a ResNet3D model. It initializes strides, determines if pooling layers are used in certain stages, inflates stages based on input, and configures convolutional, normalization, and activation settings. It also defines the block architecture and stage blocks according to the provided depth. Finally, it creates stem and residual layers based on the configuration.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":357-386",
            "content": "        self.pool1_stride_s = pool1_stride_s\n        self.pool1_stride_t = pool1_stride_t\n        self.with_pool1 = with_pool1\n        self.with_pool2 = with_pool2\n        self.stage_inflations = _ntuple(num_stages)(inflate)\n        self.non_local_stages = _ntuple(num_stages)(non_local)\n        self.inflate_style = inflate_style\n        self.conv_cfg = conv_cfg\n        self.norm_cfg = norm_cfg\n        self.act_cfg = act_cfg\n        self.norm_eval = norm_eval\n        self.with_cp = with_cp\n        self.zero_init_residual = zero_init_residual\n        self.block, stage_blocks = self.arch_settings[depth]\n        if self.stage_blocks is None:\n            self.stage_blocks = stage_blocks[:num_stages]\n        self.inplanes = self.base_channels\n        self.non_local_cfg = non_local_cfg\n        self._make_stem_layer()\n        self.res_layers = []\n        for i, num_blocks in enumerate(self.stage_blocks):\n            spatial_stride = spatial_strides[i]\n            temporal_stride = temporal_strides[i]\n            dilation = dilations[i]"
        },
        {
            "comment": "This code defines a function that adds ResNet3D layers with specified block, input and output planes, number of blocks, spatial and temporal strides, dilation, norm/conv cfg, non-local stages, inflations, style, and with_cp. It updates inplanes and feat_dim accordingly.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":387-411",
            "content": "            planes = self.base_channels * 2**i\n            res_layer = self.make_res_layer(\n                self.block,\n                self.inplanes,\n                planes,\n                num_blocks,\n                spatial_stride=spatial_stride,\n                temporal_stride=temporal_stride,\n                dilation=dilation,\n                norm_cfg=self.norm_cfg,\n                conv_cfg=self.conv_cfg,\n                act_cfg=self.act_cfg,\n                non_local=self.non_local_stages[i],\n                non_local_cfg=self.non_local_cfg,\n                inflate=self.stage_inflations[i],\n                inflate_style=self.inflate_style,\n                with_cp=with_cp,\n                **kwargs)\n            self.inplanes = planes * self.block.expansion\n            layer_name = f'layer{i + 1}'\n            self.add_sublayer(layer_name, res_layer)\n            self.res_layers.append(layer_name)\n        self.feat_dim = self.block.expansion * self.base_channels * 2**(\n            len(self.stage_blocks) - 1)"
        },
        {
            "comment": "The function \"make_res_layer\" builds a residual layer for ResNet3D. It takes parameters such as block, inplanes, planes, blocks, spatial_stride, temporal_stride, and other optional settings like non_local, norm_cfg, act_cfg, conv_cfg, with_cp to create the residual module. The function constructs the layer based on the input arguments and returns it.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":413-439",
            "content": "    @staticmethod\n    def make_res_layer(block,\n                       inplanes,\n                       planes,\n                       blocks,\n                       spatial_stride=1,\n                       temporal_stride=1,\n                       dilation=1,\n                       inflate=1,\n                       inflate_style='3x1x1',\n                       non_local=0,\n                       non_local_cfg=dict(),\n                       norm_cfg=None,\n                       act_cfg=None,\n                       conv_cfg=None,\n                       with_cp=False,\n                       **kwargs):\n        \"\"\"Build residual layer for ResNet3D.\n        Args:\n            block (nn.Module): Residual module to be built.\n            inplanes (int): Number of channels for the input feature\n                in each block.\n            planes (int): Number of channels for the output feature\n                in each block.\n            blocks (int): Number of residual blocks.\n            spatial_stride (int | Sequence[int]): Spatial strides in"
        },
        {
            "comment": "This function defines the ResNet3D backbone model, allowing customization through parameters such as residual and conv layers, temporal stride, dilation, inflate, inflate_style, non_local modules, conv_cfg, norm_cfg, and act_cfg. Default values are provided for each parameter.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":440-456",
            "content": "                residual and conv layers. Default: 1.\n            temporal_stride (int | Sequence[int]): Temporal strides in\n                residual and conv layers. Default: 1.\n            dilation (int): Spacing between kernel elements. Default: 1.\n            inflate (int | Sequence[int]): Determine whether to inflate\n                for each block. Default: 1.\n            inflate_style (str): ``3x1x1`` or ``3x3x3``. which determines\n                the kernel sizes and padding strides for conv1 and conv2\n                in each block. Default: '3x1x1'.\n            non_local (int | Sequence[int]): Determine whether to apply\n                non-local module in the corresponding block of each stages.\n                Default: 0.\n            non_local_cfg (dict): Config for non-local module.\n                Default: ``dict()``.\n            conv_cfg (dict | None): Config for norm layers. Default: None.\n            norm_cfg (dict | None): Config for norm layers. Default: None.\n            act_cfg (dict | None): Config for activate layers. Default: None."
        },
        {
            "comment": "This function creates a residual layer based on the given configuration. It uses inflation and non-local blocks for the specified number of blocks, and optionally adds downsampling if there is a change in spatial or in/out planes. The output is a neural network module (nn.Module).",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":457-480",
            "content": "            with_cp (bool | None): Use checkpoint or not. Using checkpoint\n                will save some memory while slowing down the training speed.\n                Default: False.\n        Returns:\n            nn.Module: A residual layer for the given config.\n        \"\"\"\n        inflate = inflate if not isinstance(inflate,\n                                            int) else (inflate, ) * blocks\n        non_local = non_local if not isinstance(non_local,\n                                                int) else (non_local, ) * blocks\n        assert len(inflate) == blocks and len(non_local) == blocks\n        downsample = None\n        if spatial_stride != 1 or inplanes != planes * block.expansion:\n            downsample = ConvBNLayer(\n                in_channels=inplanes,\n                out_channels=planes * block.expansion,\n                kernel_size=1,\n                stride=(temporal_stride, spatial_stride, spatial_stride),\n                bias=False,\n                act=None)\n        layers = []\n        layers.append("
        },
        {
            "comment": "The code defines a ResNet3D architecture with multiple blocks, each with configurable parameters such as spatial and temporal stride, dilation, downsample, inflate style, non-local operation, norm/conv configuration, activation function, and whether to include channel pruning. The inplanes are updated based on the expansion factor of the block.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":481-508",
            "content": "            block(\n                inplanes,\n                planes,\n                spatial_stride=spatial_stride,\n                temporal_stride=temporal_stride,\n                dilation=dilation,\n                downsample=downsample,\n                inflate=(inflate[0] == 1),\n                inflate_style=inflate_style,\n                non_local=(non_local[0] == 1),\n                non_local_cfg=non_local_cfg,\n                norm_cfg=norm_cfg,\n                conv_cfg=conv_cfg,\n                act_cfg=act_cfg,\n                with_cp=with_cp,\n                **kwargs))\n        inplanes = planes * block.expansion\n        for i in range(1, blocks):\n            layers.append(\n                block(\n                    inplanes,\n                    planes,\n                    spatial_stride=1,\n                    temporal_stride=1,\n                    dilation=dilation,\n                    inflate=(inflate[i] == 1),\n                    inflate_style=inflate_style,\n                    non_local=(non_local[i] == 1),"
        },
        {
            "comment": "This code defines a function to inflate a 3D convolutional neural network module from a pre-trained 2D model. It takes the destination conv3d module, state dict of the 2D model, name of the corresponding conv module in the 2D model, and list of inflated parameters as inputs. The function extracts the weight from the 2D model's state dict and reshapes it to fit the 3D convolution.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":509-536",
            "content": "                    non_local_cfg=non_local_cfg,\n                    norm_cfg=norm_cfg,\n                    conv_cfg=conv_cfg,\n                    act_cfg=act_cfg,\n                    with_cp=with_cp,\n                    **kwargs))\n        return nn.Sequential(*layers)\n    @staticmethod\n    def _inflate_conv_params(conv3d, state_dict_2d, module_name_2d,\n                             inflated_param_names):\n        \"\"\"Inflate a conv module from 2d to 3d.\n        Args:\n            conv3d (nn.Module): The destination conv3d module.\n            state_dict_2d (OrderedDict): The state dict of pretrained 2d model.\n            module_name_2d (str): The name of corresponding conv module in the\n                2d model.\n            inflated_param_names (list[str]): List of parameters that have been\n                inflated.\n        \"\"\"\n        weight_2d_name = module_name_2d + '.weight'\n        conv2d_weight = state_dict_2d[weight_2d_name]\n        kernel_t = conv3d.weight.data.shape[2]\n        new_weight = conv2d_weight.data.unsqueeze(2).expand_as("
        },
        {
            "comment": "This code inflates 2D convolutional and Batch Normalization (BN) parameters to 3D for a ResNet3D backbone. It copies the weights and biases, if present, from the 2D state dictionary to their corresponding 3D modules and updates the list of inflated parameter names.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":537-560",
            "content": "            conv3d.weight) / kernel_t\n        conv3d.weight.data.copy_(new_weight)\n        inflated_param_names.append(weight_2d_name)\n        if getattr(conv3d, 'bias') is not None:\n            bias_2d_name = module_name_2d + '.bias'\n            conv3d.bias.data.copy_(state_dict_2d[bias_2d_name])\n            inflated_param_names.append(bias_2d_name)\n    @staticmethod\n    def _inflate_bn_params(bn3d, state_dict_2d, module_name_2d,\n                           inflated_param_names):\n        \"\"\"Inflate a norm module from 2d to 3d.\n        Args:\n            bn3d (nn.Module): The destination bn3d module.\n            state_dict_2d (OrderedDict): The state dict of pretrained 2d model.\n            module_name_2d (str): The name of corresponding bn module in the\n                2d model.\n            inflated_param_names (list[str]): List of parameters that have been\n                inflated.\n        \"\"\"\n        for param_name, param in bn3d.named_parameters():\n            param_2d_name = f'{module_name_2d}.{param_name}'"
        },
        {
            "comment": "This code snippet is from the PaddleVideo library, specifically the ResNet3D backbone. It is loading and inflating parameters from a state dictionary, ensuring compatibility between 2D and 3D parameter shapes. The function _make_stem_layer constructs a stem layer consisting of a convolution, normalization, activation, and pooling module.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":561-585",
            "content": "            param_2d = state_dict_2d[param_2d_name]\n            if param.data.shape != param_2d.shape:\n                warnings.warn(f'The parameter of {module_name_2d} is not'\n                              'loaded due to incompatible shapes. ')\n                return\n            param.data.copy_(param_2d)\n            inflated_param_names.append(param_2d_name)\n        for param_name, param in bn3d.named_buffers():\n            param_2d_name = f'{module_name_2d}.{param_name}'\n            # some buffers like num_batches_tracked may not exist in old\n            # checkpoints\n            if param_2d_name in state_dict_2d:\n                param_2d = state_dict_2d[param_2d_name]\n                param.data.copy_(param_2d)\n                inflated_param_names.append(param_2d_name)\n    def _make_stem_layer(self):\n        \"\"\"Construct the stem layers consists of a conv+norm+act module and a\n        pooling layer.\"\"\"\n        self.conv1 = ConvBNLayer(\n            in_channels=self.in_channels,\n            out_channels=self.base_channels,"
        },
        {
            "comment": "This code is initializing a ResNet3D model with convolutional and pooling layers. The convolution layer has specified kernel size, stride, padding, and uses ReLU activation function. The max pooling layer has varying sizes for temporal, spatial dimensions. This model also includes optional pool1 and can be initialized with pretrained weights.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":586-619",
            "content": "            kernel_size=self.conv1_kernel,\n            stride=(self.conv1_stride_t, self.conv1_stride_s,\n                    self.conv1_stride_s),\n            padding=tuple([(k - 1) // 2 for k in _triple(self.conv1_kernel)]),\n            bias=False,\n            act=\"relu\")\n        self.maxpool = nn.MaxPool3D(\n            kernel_size=(1, 3, 3),\n            stride=(self.pool1_stride_t, self.pool1_stride_s,\n                    self.pool1_stride_s),\n            padding=(0, 1, 1))\n        self.pool2 = nn.MaxPool3D(kernel_size=(2, 1, 1), stride=(2, 1, 1))\n    @staticmethod\n    def _init_weights(self, pretrained=None):\n        pass\n    def init_weights(self, pretrained=None):\n        self._init_weights(self, pretrained)\n    def forward(self, x):\n        \"\"\"Defines the computation performed at every call.\n        Args:\n            x (torch.Tensor): The input data.\n        Returns:\n            torch.Tensor: The feature of the input\n            samples extracted by the backbone.\n        \"\"\"\n        x = self.conv1(x)\n        if self.with_pool1:"
        },
        {
            "comment": "This code defines a ResNet-3D backbone model with residual blocks, max pooling layers, and optionally a second pooling layer. The train function sets the model to training mode and evaluates batch normalization layers if self.norm_eval is True.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/resnet3d.py\":620-640",
            "content": "            x = self.maxpool(x)\n        outs = []\n        for i, layer_name in enumerate(self.res_layers):\n            res_layer = getattr(self, layer_name)\n            x = res_layer(x)\n            if i == 0 and self.with_pool2:\n                x = self.pool2(x)\n            if i in self.out_indices:\n                outs.append(x)\n        if len(outs) == 1:\n            return outs[0]\n        return tuple(outs)\n    def train(self, mode=True):\n        \"\"\"Set the optimization status when training.\"\"\"\n        super().train()\n        if mode and self.norm_eval:\n            for m in self.modules():\n                if isinstance(m, paddle.nn._BatchNormBase):\n                    m.eval()"
        }
    ]
}