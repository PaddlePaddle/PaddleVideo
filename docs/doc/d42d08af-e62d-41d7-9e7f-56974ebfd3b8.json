{
    "summary": "The code introduces a FrozenBatchNorm2d class for static batch normalization and DeepLab class as a neural network backbone, allowing freezing of BatchNorm layers. The code also provides methods to get parameters with different learning rates and creates an instance of the model, evaluates it, generates input data, and outputs its shape.",
    "details": [
        {
            "comment": "This code defines a FrozenBatchNorm2d class and imports necessary modules. The class is used to create a batch normalization layer where the parameters are frozen, meaning they will not be updated during training.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py\":0-25",
            "content": "import paddle\nimport paddle.nn as nn\nfrom ..registry import BACKBONES\nfrom EIVideo.paddlevideo.modeling.backbones.aspp_manet import build_aspp\nfrom EIVideo.paddlevideo.modeling.backbones.decoder_manet import build_decoder\nfrom EIVideo.paddlevideo.modeling.backbones.resnet_manet import build_backbone\nclass FrozenBatchNorm2d(nn.Layer):\n    def __init__(self, n):\n        super(FrozenBatchNorm2d, self).__init__()\n        self.register_buffer(\"weight\", paddle.ones(n))\n        self.register_buffer(\"bias\", paddle.zeros(n))\n        self.register_buffer(\"running_mean\", paddle.zeros(n))\n        self.register_buffer(\"running_var\", paddle.ones(n))\n    def forward(self, x):\n        if x.dtype == paddle.float16:\n            self.weight = self.weight.half()\n            self.bias = self.bias.half()\n            self.running_mean = self.running_mean.half()\n            self.running_var = self.running_var.half()\n        scale = self.weight * self.running_var.rsqrt()\n        bias = self.bias - self.running_mean * scale\n        scale = scale.reshape(1, -1, 1, 1)"
        },
        {
            "comment": "The code defines a DeepLab class as a neural network backbone, which uses other modules (backbone, ASPP, and decoder) for feature extraction and classification. It takes input and returns output after passing through these modules. The freeze_bn method can be called to freeze the BatchNorm layers if needed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py\":26-60",
            "content": "        bias = bias.reshape(1, -1, 1, 1)\n        return x * scale + bias\n@BACKBONES.register()\nclass DeepLab(nn.Layer):\n    def __init__(self,\n                 backbone='resnet',\n                 output_stride=16,\n                 num_classes=21,\n                 freeze_bn=False,\n                 pretrained=None):\n        super(DeepLab, self).__init__()\n        if backbone == 'drn':\n            output_stride = 8\n        if freeze_bn == True:\n            print(\"Use frozen BN in DeepLab\")\n            BatchNorm = FrozenBatchNorm2d\n        else:\n            BatchNorm = nn.BatchNorm2D\n        self.backbone = build_backbone(output_stride, BatchNorm, pretrained)\n        self.aspp = build_aspp(backbone, output_stride, BatchNorm)\n        self.decoder = build_decoder(num_classes, backbone, BatchNorm)\n    def forward(self, input):\n        x, low_level_feat = self.backbone(input)\n        x = self.aspp(x)\n        x = self.decoder(x, low_level_feat)\n        return x\n    def freeze_bn(self):\n        for m in self.sublayers():\n            if isinstance(m, nn.BatchNorm2D):"
        },
        {
            "comment": "This code defines a DeepLab model with backbone options, sets the model to evaluation mode, and provides two methods for getting parameters with different learning rates. The main part of the code creates an instance of the model, evaluates it, generates random input data, and outputs its shape.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py\":61-89",
            "content": "                m.eval()\n    def get_1x_lr_params(self):\n        modules = [self.backbone]\n        for i in range(len(modules)):\n            for m in modules[i].named_modules():\n                if isinstance(m[1], nn.Conv2D) or isinstance(\n                        m[1], nn.BatchNorm2D):\n                    for p in m[1].parameters():\n                        if p.requires_grad:\n                            yield p\n    def get_10x_lr_params(self):\n        modules = [self.aspp, self.decoder]\n        for i in range(len(modules)):\n            for m in modules[i].named_modules():\n                if isinstance(m[1], nn.Conv2D) or isinstance(\n                        m[1], nn.BatchNorm2D):\n                    for p in m[1].parameters():\n                        if p.requires_grad:\n                            yield p\nif __name__ == \"__main__\":\n    model = DeepLab(backbone='resnet', output_stride=16)\n    model.eval()\n    input = paddle.rand([2, 3, 513, 513])\n    output = model(input)\n    print(output.shape)"
        }
    ]
}