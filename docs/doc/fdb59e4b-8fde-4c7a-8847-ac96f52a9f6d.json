{
    "summary": "This code defines an I3D classification head in PaddleVideo with options for loss, pooling type, dropout ratio and initialization standard deviation. It performs adaptive average pooling, dropout, linear layer, and has a learning rate of 10.0.",
    "details": [
        {
            "comment": "This code snippet imports necessary libraries and defines a class called \"I3DHead\" which is a classification head for I3D models. It takes in arguments like the number of classes to be classified, the input channel size, and configuration for building loss. The code is part of PaddleVideo library and registered with HEADS registry.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/heads/i3d_head.py\":0-30",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport paddle\nimport paddle.nn as nn\nfrom paddle import ParamAttr\nfrom ..registry import HEADS\nfrom ..weight_init import weight_init_\nfrom .base import BaseHead\n@HEADS.register()\nclass I3DHead(BaseHead):\n    \"\"\"Classification head for I3D.\n    Args:\n        num_classes (int): Number of classes to be classified.\n        in_channels (int): Number of channels in input feature.\n        loss_cls (dict): Config for building loss."
        },
        {
            "comment": "Class constructor for a head, with optional parameters for loss configuration, pooling type in spatial dimension, dropout ratio, and standard deviation for initialization. Initializes the base class, sets attributes, and optionally adds a Dropout layer if drop_ratio is non-zero.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/heads/i3d_head.py\":31-58",
            "content": "            Default: dict(name='CrossEntropyLoss')\n        spatial_type (str): Pooling type in spatial dimension. Default: 'avg'.\n        drop_ratio (float): Probability of dropout layer. Default: 0.5.\n        std (float): Std value for Initiation. Default: 0.01.\n        kwargs (dict, optional): Any keyword argument to be used to initialize\n            the head.\n    \"\"\"\n    def __init__(self,\n                 num_classes,\n                 in_channels,\n                 loss_cfg=dict(name='CrossEntropyLoss'),\n                 spatial_type='avg',\n                 drop_ratio=0.5,\n                 std=0.01,\n                 **kwargs):\n        super().__init__(num_classes, in_channels, loss_cfg, **kwargs)\n        self.spatial_type = spatial_type\n        self.drop_ratio = drop_ratio\n        self.stdv = std\n        if self.drop_ratio != 0:\n            self.dropout = nn.Dropout(p=self.drop_ratio)\n        else:\n            self.dropout = None\n        self.fc = nn.Linear(\n            self.in_channels,\n            self.num_classes,"
        },
        {
            "comment": "Function: I3D Head\nPurpose: To process and classify the extracted features from an I3D network\nKey Operations: Adaptive average pooling, dropout, and a linear layer for classification\nLearning Rate: Set to 10.0 for weights and bias parameters",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/heads/i3d_head.py\":59-90",
            "content": "            weight_attr=ParamAttr(learning_rate=10.0),\n            bias_attr=ParamAttr(learning_rate=10.0),\n        )\n        if self.spatial_type == 'avg':\n            # use `nn.AdaptiveAvgPool3d` to adaptively match the in_channels.\n            self.avg_pool = nn.AdaptiveAvgPool3D((1, 1, 1))\n        else:\n            self.avg_pool = None\n    def init_weights(self):\n        \"\"\"Initiate the parameters from scratch.\"\"\"\n        weight_init_(self.fc, 'Normal', 'fc_0.w_0', 'fc_0.b_0', std=self.stdv)\n    def forward(self, x):\n        \"\"\"Defines the computation performed at every call.\n        Args:\n            x (torch.Tensor): The input data.\n        Returns:\n            torch.Tensor: The classification scores for input samples.\n        \"\"\"\n        # [N, in_channels, 4, 7, 7]\n        if self.avg_pool is not None:\n            x = self.avg_pool(x)\n        # [N, in_channels, 1, 1, 1]\n        if self.dropout is not None:\n            x = self.dropout(x)\n        # [N, in_channels, 1, 1, 1]\n        N = paddle.shape(x)[0]\n        x = x.reshape([N, -1])"
        },
        {
            "comment": "This code snippet represents the output layer of a classification head in PaddleVideo. It takes input 'x' and passes it through 'self.fc', which is presumably a fully connected (FC) layer, producing 'cls_score'. The result is then returned as the final classification score for each sample. The shape of the output is [N, num_classes], where N is the batch size.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/heads/i3d_head.py\":91-94",
            "content": "        # [N, in_channels]\n        cls_score = self.fc(x)\n        # [N, num_classes]\n        return cls_score"
        }
    ]
}