{
    "summary": "The ConvBNLayer class introduces PaddlePaddle's MobileNetV2 backbone model for image/video processing with pretrained weights and inverted residual units. It initializes and returns three models (PPTSM_MobileNetV2_x0_75, PPTSM_MobileNetV2_x1_5, PPTSM_MobileNetV2_x2_0).",
    "details": [
        {
            "comment": "This code is part of the PaddlePaddle deep learning framework, specifically for the MobileNetV2 backbone model. It imports necessary libraries and defines functions for the architecture, weight initialization, and pre-trained model downloading. The commented sections provide licensing information and download URLs for pretrained models.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":0-29",
            "content": "# copyright (c) 2020 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport numpy as np\nimport paddle\nfrom paddle import ParamAttr\nimport paddle.nn as nn\nimport paddle.nn.functional as F\nfrom paddle.nn import Conv2D, BatchNorm, Linear, Dropout\nfrom paddle.nn import AdaptiveAvgPool2D, MaxPool2D, AvgPool2D\nfrom ..registry import BACKBONES\nfrom ..weight_init import weight_init_\nfrom ...utils import load_ckpt\n# Download URL of pretrained model\n# {\n# \"MobileNetV2\":\n# \"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/MobileNetV2_ssld_pretrained.pdparams\","
        },
        {
            "comment": "This code defines the ConvBNLayer class, which inherits from nn.Layer and contains a convolutional layer followed by a batch normalization layer. The constructor takes several parameters such as number of channels, filter size, etc., to define the specifics of the convolutional layer. The URLs provided indicate that pretrained models are available for MobileNetV2 with various scaling factors.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":31-57",
            "content": "# \"MobileNetV2_x0_25\":\n# \"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/MobileNetV2_x0_25_pretrained.pdparams\",\n# \"MobileNetV2_x0_5\":\n# \"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/MobileNetV2_x0_5_pretrained.pdparams\",\n# \"MobileNetV2_x0_75\":\n# \"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/MobileNetV2_x0_75_pretrained.pdparams\",\n# \"MobileNetV2_x1_5\":\n# \"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/MobileNetV2_x1_5_pretrained.pdparams\",\n# \"MobileNetV2_x2_0\":\n# \"https://paddle-imagenet-models-name.bj.bcebos.com/dygraph/MobileNetV2_x2_0_pretrained.pdparams\"\n# }\nclass ConvBNLayer(nn.Layer):\n    def __init__(self,\n                 num_channels,\n                 filter_size,\n                 num_filters,\n                 stride,\n                 padding,\n                 channels=None,\n                 num_groups=1,\n                 name=None,\n                 use_cudnn=True):\n        super(ConvBNLayer, self).__init__()\n        self._conv = Conv2D(in_channels=num_channels,"
        },
        {
            "comment": "The code defines a class for an inverted residual unit with batch normalization. The unit takes input, performs convolution, applies batch normalization, and optionally applies activation if specified.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":58-84",
            "content": "                            out_channels=num_filters,\n                            kernel_size=filter_size,\n                            stride=stride,\n                            padding=padding,\n                            groups=num_groups,\n                            weight_attr=ParamAttr(name=name + \"_weights\"),\n                            bias_attr=False)\n        self._batch_norm = BatchNorm(\n            num_filters,\n            param_attr=ParamAttr(name=name + \"_bn_scale\"),\n            bias_attr=ParamAttr(name=name + \"_bn_offset\"),\n            moving_mean_name=name + \"_bn_mean\",\n            moving_variance_name=name + \"_bn_variance\")\n    def forward(self, inputs, if_act=True):\n        y = self._conv(inputs)\n        y = self._batch_norm(y)\n        if if_act:\n            y = F.relu6(y)\n        return y\nclass InvertedResidualUnit(nn.Layer):\n    def __init__(self, num_channels, num_in_filter, num_filters, stride,\n                 filter_size, padding, expansion_factor, name, num_seg):\n        super(InvertedResidualUnit, self).__init__()"
        },
        {
            "comment": "This code initializes and assigns class attributes for a backbone model. It defines two convolutional layers, one for expansion (num_channels to num_expfilter) and another for bottleneck (num_expfilter to num_expfilter), both followed by BN operations. The layers are named with the prefix \"name\" for future reference or identification.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":85-102",
            "content": "        self.num_seg = num_seg\n        num_expfilter = int(round(num_in_filter * expansion_factor))\n        self._expand_conv = ConvBNLayer(num_channels=num_channels,\n                                        num_filters=num_expfilter,\n                                        filter_size=1,\n                                        stride=1,\n                                        padding=0,\n                                        num_groups=1,\n                                        name=name + \"_expand\")\n        self._bottleneck_conv = ConvBNLayer(num_channels=num_expfilter,\n                                            num_filters=num_expfilter,\n                                            filter_size=filter_size,\n                                            stride=stride,\n                                            padding=padding,\n                                            num_groups=num_expfilter,\n                                            use_cudnn=False,\n                                            name=name + \"_dwise\")"
        },
        {
            "comment": "This code defines a neural network layer, likely for image or video processing. It contains a series of convolutional layers and activation functions. The \"forward\" function applies temporal shift to the input based on the number of segments and performs convolutions in different stages. The \"InvresiBlocks\" class defines an Inverted Residual block with initial parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":104-131",
            "content": "        self._linear_conv = ConvBNLayer(num_channels=num_expfilter,\n                                        num_filters=num_filters,\n                                        filter_size=1,\n                                        stride=1,\n                                        padding=0,\n                                        num_groups=1,\n                                        name=name + \"_linear\")\n    def forward(self, inputs, ifshortcut):\n        # add temporal shift module\n        y = inputs\n        if ifshortcut:\n            y = F.temporal_shift(y, self.num_seg, 1.0 / self.num_seg)\n        y = self._expand_conv(y, if_act=True)\n        y = self._bottleneck_conv(y, if_act=True)\n        y = self._linear_conv(y, if_act=False)\n        if ifshortcut:\n            y = paddle.add(inputs, y)\n        return y\nclass InvresiBlocks(nn.Layer):\n    def __init__(self, in_c, t, c, n, s, name, num_seg):\n        super(InvresiBlocks, self).__init__()\n        self._first_block = InvertedResidualUnit(num_channels=in_c,\n                                                 num_in_filter=in_c,"
        },
        {
            "comment": "The code defines a function for the PPTSM_MV2 model, creating an InvertedResidualUnit with specified parameters and adding it to a list. The loop iterates from 1 to n-1, building multiple residual units with increasing indexes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":132-150",
            "content": "                                                 num_filters=c,\n                                                 stride=s,\n                                                 filter_size=3,\n                                                 padding=1,\n                                                 expansion_factor=t,\n                                                 name=name + \"_1\",\n                                                 num_seg=num_seg)\n        self._block_list = []\n        for i in range(1, n):\n            block = self.add_sublayer(name + \"_\" + str(i + 1),\n                                      sublayer=InvertedResidualUnit(\n                                          num_channels=c,\n                                          num_in_filter=c,\n                                          num_filters=c,\n                                          stride=1,\n                                          filter_size=3,\n                                          padding=1,\n                                          expansion_factor=t,"
        },
        {
            "comment": "This code defines a PPTSM-MV2 backbone and MobileNet model for image processing. The `__init__` function initializes the model with class number, scaling factor, pretrained weights, prefix name, and number of segments. The `forward` function passes inputs through each block in sequence. The `MobileNet` class defines a convolutional neural network (CNN) architecture with specific parameters for each stage, including the number of filters and stride sizes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":151-186",
            "content": "                                          name=name + \"_\" + str(i + 1),\n                                          num_seg=num_seg))\n            self._block_list.append(block)\n    def forward(self, inputs):\n        y = self._first_block(inputs, ifshortcut=False)\n        for block in self._block_list:\n            y = block(y, ifshortcut=True)\n        return y\nclass MobileNet(nn.Layer):\n    def __init__(self,\n                 class_num=400,\n                 scale=1.0,\n                 pretrained=None,\n                 prefix_name=\"\",\n                 num_seg=8):\n        super(MobileNet, self).__init__()\n        self.scale = scale\n        self.class_num = class_num\n        self.pretrained = pretrained\n        self.num_seg = num_seg\n        bottleneck_params_list = [\n            (1, 16, 1, 1),\n            (6, 24, 2, 2),\n            (6, 32, 3, 2),\n            (6, 64, 4, 2),\n            (6, 96, 3, 1),\n            (6, 160, 3, 2),\n            (6, 320, 1, 1),\n        ]\n        self.conv1 = ConvBNLayer(num_channels=3,\n                                 num_filters=int(32 * scale),"
        },
        {
            "comment": "This code initializes a PPTSM_MV2 backbone model. It adds a convolution layer with specific parameters, and creates a list of block layers using InvresiBlocks with varying settings. The scale value affects the number of input channels in each layer.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":187-206",
            "content": "                                 filter_size=3,\n                                 stride=2,\n                                 padding=1,\n                                 name=prefix_name + \"conv1_1\")\n        self.block_list = []\n        i = 1\n        in_c = int(32 * scale)\n        for layer_setting in bottleneck_params_list:\n            t, c, n, s = layer_setting\n            i += 1\n            block = self.add_sublayer(prefix_name + \"conv\" + str(i),\n                                      sublayer=InvresiBlocks(in_c=in_c,\n                                                             t=t,\n                                                             c=int(c * scale),\n                                                             n=n,\n                                                             s=s,\n                                                             name=prefix_name +\n                                                             \"conv\" + str(i),\n                                                             num_seg=num_seg))"
        },
        {
            "comment": "This code defines a class, appends blocks to block_list, sets output channels based on scale factor, initializes convolution and pooling layers, and defines an initialization function for the weights. It seems to be part of a deep learning model backbone implementation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":207-231",
            "content": "            self.block_list.append(block)\n            in_c = int(c * scale)\n        self.out_c = int(1280 * scale) if scale > 1.0 else 1280\n        self.conv9 = ConvBNLayer(num_channels=in_c,\n                                 num_filters=self.out_c,\n                                 filter_size=1,\n                                 stride=1,\n                                 padding=0,\n                                 name=prefix_name + \"conv9\")\n        self.pool2d_avg = AdaptiveAvgPool2D(1)\n        self.out = Linear(self.out_c,\n                          class_num,\n                          weight_attr=ParamAttr(name=prefix_name +\n                                                \"fc10_weights\"),\n                          bias_attr=ParamAttr(name=prefix_name + \"fc10_offset\"))\n    def init_weights(self):\n        \"\"\"Initiate the parameters.\n        \"\"\"\n        if isinstance(self.pretrained, str) and self.pretrained.strip() != \"\":\n            load_ckpt(self, self.pretrained)\n        elif self.pretrained is None or self.pretrained.strip() == \"\":"
        },
        {
            "comment": "Initializes a PPTSM MobileNetV2 model with optional pretrained weights and customizable scale. Initializes the underlying MobileNet model and applies custom modifications. Iterates through sublayers, applying Kaiming Normal initialization for Conv2D layers and constant initialization for BatchNorm2D layers. Defines the forward pass of the PPTSM MobileNetV2 model. Registers multiple PPTSM MobileNetV2 variants with different scales.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":232-265",
            "content": "            for layer in self.sublayers():\n                if isinstance(layer, nn.Conv2D):\n                    weight_init_(layer, 'KaimingNormal')\n                elif isinstance(layer, nn.BatchNorm2D):\n                    weight_init_(layer, 'Constant', value=1)\n    def forward(self, inputs):\n        y = self.conv1(inputs, if_act=True)\n        for block in self.block_list:\n            y = block(y)\n        y = self.conv9(y, if_act=True)\n        y = self.pool2d_avg(y)\n        y = paddle.reshape(y, [-1, self.num_seg, y.shape[1]])\n        y = paddle.mean(y, axis=1)\n        y = paddle.reshape(y, shape=[-1, self.out_c])\n        y = self.out(y)\n        return y\n@BACKBONES.register()\ndef PPTSM_MobileNetV2(pretrained=None, **kwargs):\n    model = MobileNet(pretrained=pretrained, scale=1.0, **kwargs)\n    return model\ndef PPTSM_MobileNetV2_x0_25(pretrained=None, **kwargs):\n    model = MobileNet(pretrained=pretrained, scale=0.25, **kwargs)\n    return model\ndef PPTSM_MobileNetV2_x0_5(pretrained=None, **kwargs):\n    model = MobileNet(pretrained=pretrained, scale=0.5, **kwargs)"
        },
        {
            "comment": "The code defines three functions, PPTSM_MobileNetV2_x0_75, PPTSM_MobileNetV2_x1_5, and PPTSM_MobileNetV2_x2_0. Each function creates a MobileNet model with different scales (0.75, 1.5, and 2.0) using the MobileNet class. The pretrained option allows for loading pre-trained weights if set to True. The functions return the created models.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/pptsm_mv2.py\":266-281",
            "content": "    return model\ndef PPTSM_MobileNetV2_x0_75(pretrained=None, **kwargs):\n    model = MobileNet(pretrained=pretrained, scale=0.75, **kwargs)\n    return model\ndef PPTSM_MobileNetV2_x1_5(pretrained=None, **kwargs):\n    model = MobileNet(pretrained=pretrained, scale=1.5, **kwargs)\n    return model\ndef PPTSM_MobileNetV2_x2_0(pretrained=None, **kwargs):\n    model = MobileNet(pretrained=pretrained, scale=2.0, **kwargs)\n    return model"
        }
    ]
}