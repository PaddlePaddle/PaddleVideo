{
    "summary": "The Bash script configures a model serving environment, sets up an API server, transfers the model using provided Python code, and handles cleanup tasks. It also adjusts alias names, logs paths, and CUDA visible devices while running video processing pipeline tests.",
    "details": [
        {
            "comment": "This Bash script is parsing a configuration file and extracting various parameters for running model inference. It assigns values to variables such as 'model_name', 'python_list', and others that will be used later in the code. The purpose is to set up an environment for serving the model and potentially run inferences on videos.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/test_serving_infer_python.sh\":0-28",
            "content": "#!/bin/bash\nsource test_tipc/common_func.sh\nFILENAME=$1\ndataline=$(awk 'NR==1, NR==18{print}'  $FILENAME)\nMODE=$2\n# parser params\nIFS=$'\\n'\nlines=(${dataline})\n# parser serving\nmodel_name=$(func_parser_value \"${lines[1]}\")\npython_list=$(func_parser_value \"${lines[2]}\")\ntrans_model_py=$(func_parser_value \"${lines[3]}\")\ninfer_model_dir_key=$(func_parser_key \"${lines[4]}\")\ninfer_model_dir_value=$(func_parser_value \"${lines[4]}\")\nmodel_filename_key=$(func_parser_key \"${lines[5]}\")\nmodel_filename_value=$(func_parser_value \"${lines[5]}\")\nparams_filename_key=$(func_parser_key \"${lines[6]}\")\nparams_filename_value=$(func_parser_value \"${lines[6]}\")\nserving_server_key=$(func_parser_key \"${lines[7]}\")\nserving_server_value=$(func_parser_value \"${lines[7]}\")\nserving_client_key=$(func_parser_key \"${lines[8]}\")\nserving_client_value=$(func_parser_value \"${lines[8]}\")\nserving_dir_value=$(func_parser_value \"${lines[9]}\")\nweb_service_py=$(func_parser_value \"${lines[10]}\")\npipeline_py=$(func_parser_value \"${lines[11]}\")\nvideo_dir_key=$(func_parser_key \"${lines[12]}\")"
        },
        {
            "comment": "The code defines a function `func_serving` that takes Python executable path, script, model directory, and sets various parameters for serving. It then executes a command to transfer the model to the specified server or client using a provided Python script. The output is logged in the `trans_log` file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/test_serving_infer_python.sh\":29-53",
            "content": "video_dir_value=$(func_parser_value \"${lines[12]}\")\nLOG_PATH=\"./test_tipc/output/log/${model_name}/${MODE}\"\nmkdir -p ${LOG_PATH}\nstatus_log=\"${LOG_PATH}/results_serving.log\"\nfunction func_serving(){\n    IFS='|'\n    _python=$1\n    _script=$2\n    _model_dir=$3\n    # python serving code\n    set_dirname=$(func_set_params \"${infer_model_dir_key}\" \"${infer_model_dir_value}\")\n    set_model_filename=$(func_set_params \"${model_filename_key}\" \"${model_filename_value}\")\n    set_params_filename=$(func_set_params \"${params_filename_key}\" \"${params_filename_value}\")\n    set_serving_server=$(func_set_params \"${serving_server_key}\" \"${serving_server_value}\")\n    set_serving_client=$(func_set_params \"${serving_client_key}\" \"${serving_client_value}\")\n    python_list=(${python_list})\n    python=${python_list[0]}\n    trans_log=\"${LOG_PATH}/python_trans_model.log\"\n    trans_model_cmd=\"${python} ${trans_model_py} ${set_dirname} ${set_model_filename} ${set_params_filename} ${set_serving_server} ${set_serving_client} > ${trans_log} 2>&1 \""
        },
        {
            "comment": "This code modifies alias names in configuration files, sets log paths and starts a web service using Python. It also checks the status of the service, sleeps for 30 seconds, and saves logs into a specific path. The code is executed within a specific directory and sets environment variables before running the commands.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/test_serving_infer_python.sh\":55-76",
            "content": "    eval ${trans_model_cmd}\n    # modify the alias name of fetch_var to \"outputs\"\n    server_fetch_var_line_cmd=\"sed -i '/fetch_var/,/is_lod_tensor/s/alias_name: .*/alias_name: \\\"outputs\\\"/' $serving_server_value/serving_server_conf.prototxt\"\n    eval ${server_fetch_var_line_cmd}\n    client_fetch_var_line_cmd=\"sed -i '/fetch_var/,/is_lod_tensor/s/alias_name: .*/alias_name: \\\"outputs\\\"/' $serving_client_value/serving_client_conf.prototxt\"\n    eval ${client_fetch_var_line_cmd}\n    cd ${serving_dir_value}\n    echo 'PWD= '$PWD\n    unset https_proxy\n    unset http_proxy\n    server_log_path=\"${LOG_PATH}/python_server_gpu.log\"\n    web_service_cmd=\"${python} ${web_service_py} > ${server_log_path} 2>&1 &\"\n    eval $web_service_cmd\n    last_status=${PIPESTATUS[0]}\n    status_check $last_status \"${web_service_cmd}\" \"${status_log}\" \"${model_name}\"\n    sleep 30s # not too short is ok\n    _save_log_path=\"../../${LOG_PATH}/python_server_infer_gpu_batchsize_1.log\"\n    set_video_dir=$(func_set_params \"${video_dir_key}\" \"${video_dir_value}\")"
        },
        {
            "comment": "This code is setting up the environment and running a test for a video processing pipeline. It sets the CUDA visible devices, runs the test using specified command, and performs clean-up by killing related processes after the test.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/test_tipc/test_serving_infer_python.sh\":77-104",
            "content": "    pipeline_cmd=\"${python} ${pipeline_py} ${set_video_dir} > ${_save_log_path} 2>&1 \"\n    eval $pipeline_cmd\n    last_status=${PIPESTATUS[0]}\n    eval \"cat ${_save_log_path}\"\n    cd ../../\n    status_check $last_status \"${pipeline_cmd}\" \"${status_log}\" \"${model_name}\"\n    ps ux | grep -E 'web_service|pipeline' | awk '{print $2}' | xargs kill -s 9\n}\n# set cuda device\nGPUID=$3\nif [ ${#GPUID} -le 0 ];then\n    env=\" \"\nelse\n    env=\"export CUDA_VISIBLE_DEVICES=${GPUID}\"\nfi\nset CUDA_VISIBLE_DEVICES\neval $env\necho \"################### run test ###################\"\nexport Count=0\nIFS=\"|\"\nfunc_serving \"${web_service_cmd}\""
        }
    ]
}