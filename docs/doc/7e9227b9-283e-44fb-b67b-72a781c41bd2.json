{
    "summary": "The AVA dataset preparation includes downloading and cutting videos, extracting frames, and organizing into PaddleVideo's rawframes, videos, and annotation folders. The code provides a function to count video frames for processing and analysis purposes.",
    "details": [
        {
            "comment": "This document introduces the AVA dataset preparation process, including video data download, annotation preparation, cutting video files, extracting RGB frames, and pulling proposal files. Ensure the directory is at `$PaddleVideo/data/ava/script`. Users can download the dataset from its official site or through a provided script. Video files are also available for download via Baidu cloud disk.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/dataset/AVA.md\":0-22",
            "content": "[\u7b80\u4f53\u4e2d\u6587](../../zh-CN/dataset/k400.md) | English\n# AVA Data Preparation\nThis document mainly introduces the preparation process of AVA dataset.\nIt mainly includes five parts: Video Data Download, Prepare Annotations, Cut video files,\nExtract the RGB frames, Pulling Proposal Files,et al.\nBefore we start, please make sure that the directory is located at `$PaddleVideo/data/ava/script`.\n---\n## 1. Video data Download\nFor basic dataset information, you can refer to the official website [AVA](https://research.google.com/ava/index.html).\nFor the dataset download, you can refer to the [AVA Download](https://github.com/cvdfoundation/ava-dataset) \uff0c\nwhich introduce the way to download the dataset. We also provide the shell script for downloading the video files\n```shell\nbash download_videos.sh\n```\nFurthermore,considering the difficulty in downloading,\nwe upload the video files to Baidu cloud disk in the form of zip packages, and users can download it by themselves according to their needs.\n[Link]() <sup>coming soon</sup>."
        },
        {
            "comment": "This code outlines the steps to prepare a dataset for AVA, a video action recognition task. It involves downloading and extracting annotations, cutting videos to specific time ranges, extracting RGB frames with ffmpeg, and fetching pre-computed proposal lists. The final step shows the expected folder structure of the prepared dataset.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/dataset/AVA.md\":25-77",
            "content": "**Note: the video files should be placed in `data/ava/videos`**\n---\n## 2.Prepare Annotations\nNext, you can run the following script to prepare annotations.\n```shell\nbash download_annotations.sh\n```\nThis command will download `ava_v2.1.zip` for AVA `v2.1` annotation. If you need the AVA `v2.2` annotation, you can try the following script.\n```shell\nVERSION=2.2 bash download_annotations.sh\n```\n**Note: In fact,we will also provide the annotation zip files in Baidu cloud disk**\n---\n## 3. cut video files\nCut each video from its 15th to 30th minute and make them at 30 fps.\n```shell\nbash cut_videos.sh\n```\n---\n## 4. Extract RGB Frames\nyou can use the ffmpeg to extract RGB frames by the following script.\n```shell\nbash extract_rgb_frames.sh\n```\n---\n## 5.Pulling Proposal Files\nThe scripts are adapted from FAIR's [Long-Term Feature Banks](https://github.com/facebookresearch/video-long-term-feature-banks).\nRun the follow scripts to fetch pre-computed proposal list.\n```shell\nbash fetch_ava_proposals.sh\n```\n---\n## 6.Folder Structure\nAfter the whole data pipeline for AVA preparation."
        },
        {
            "comment": "The code represents the folder structure for AVA dataset in PaddleVideo, including rawframes (RGB), videos, and annotation files.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/dataset/AVA.md\":78-111",
            "content": "you can get the rawframes (RGB), videos and annotation files for AVA.\nIn the context of the whole project (for AVA only), the folder structure will look like:\n```\nPaddleVideo\n\u251c\u2500\u2500 configs\n\u251c\u2500\u2500 paddlevideo\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 tools\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 ava\n\u2502   \u2502   \u251c\u2500\u2500 annotations\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_dense_proposals_train.FAIR.recall_93.9.pkl\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_dense_proposals_val.FAIR.recall_93.9.pkl\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_dense_proposals_test.FAIR.recall_93.9.pkl\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_train_v2.1.csv\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_val_v2.1.csv\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_train_excluded_timestamps_v2.1.csv\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_val_excluded_timestamps_v2.1.csv\n\u2502   \u2502   |   \u251c\u2500\u2500 ava_action_list_v2.1_for_activitynet_2018.pbtxt\n\u2502   \u2502   \u251c\u2500\u2500 videos\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 053oq2xB3oU.mkv\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 0f39OWEqJ24.mp4\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 videos_15min\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 053oq2xB3oU.mkv\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 0f39OWEqJ24.mp4\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 rawframes\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 053oq2xB3oU\n|   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img_00001.jpg\n|   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img_00002.jpg\n|   \u2502   \u2502   \u2502   \u251c\u2500\u2500 ..."
        },
        {
            "comment": "The code snippet defines a function that calculates the total number of frames in a given video. This can be useful for processing or analyzing videos, as it provides the necessary information about the duration of the video and how many frames to expect.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/dataset/AVA.md\":112-112",
            "content": "```"
        }
    ]
}