{
    "summary": "The `test_with_pyreader` and `train_with_pyreader` functions are used in a framework to execute tests with `pyreader`, evaluate metrics, log intervals, train models, handle options like testing, saving, early stopping, measure processing time, and update metrics. The code snippet defines model saving functions, deletes directories, implements early stopping, initializes pre-trained parameters, and uses AttrDict for getter/setter functionality.",
    "details": [
        {
            "comment": "The code defines a function `test_with_pyreader` which takes several parameters like `exe`, `compiled_test_prog`, etc., and appears to be part of a larger framework. It seems to execute a test with the help of `pyreader` for input data, fetch list for outputs, and metrics for evaluation. The function runs on an interval specified by `log_interval`.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":0-38",
            "content": "\"\"\"\nutils\n\"\"\"\n#  Copyright (c) 2018 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nimport sys\nimport time\nimport traceback\nimport logging\nimport shutil\nimport numpy as np\nimport paddle\nimport paddle.static as static\nimport static as static\nlogger = logging.getLogger(__name__)\ndef test_with_pyreader(exe,\n                       compiled_test_prog,\n                       test_pyreader,\n                       test_fetch_list,\n                       test_metrics,\n                       log_interval=0):"
        },
        {
            "comment": "The code tests a PaddleVideo application, using the \"test_pyreader\" to read data and runs it through a neural network. It accumulates and logs test metrics, handles exceptions and provides a final result with computed metrics.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":39-66",
            "content": "    \"\"\"test_with_pyreader\n    \"\"\"\n    if not test_pyreader:\n        logger.error(\"[TEST] get pyreader failed.\")\n    test_metrics.reset()\n    test_iter = 0\n    label_all = []\n    pred_all = []\n    try:\n        for data in test_pyreader():\n            test_outs = exe.run(compiled_test_prog,\n                                fetch_list=test_fetch_list,\n                                feed=data)\n            loss = np.array(test_outs[0])\n            pred = np.array(test_outs[1])\n            label = np.array(test_outs[-1])\n            pred_all.extend(pred)\n            label_all.extend(label)\n            test_metrics.accumulate(loss, pred, label)\n            test_iter += 1\n        test_metrics.finalize_and_log_out(\"[TEST] Finish\")\n    except Exception as e:\n        logger.warn(\n            \"[TEST] fail to execute test or calculate metrics: {}\".format(e))\n        traceback.print_exc()\n    metrics_dict, test_loss = test_metrics.get_computed_metrics()\n    metrics_dict['label_all'] = label_all\n    metrics_dict['pred_all'] = pred_all"
        },
        {
            "comment": "The function `train_with_pyreader` trains a model for the specified number of epochs and returns the test loss and metrics dictionary. It also includes options for testing and saving the model, as well as early stopping based on a defined threshold. The code initializes variables and enters a loop over the number of epochs, resetting training metrics and checking if early stopping should occur before each iteration.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":67-95",
            "content": "    return test_loss, metrics_dict\ndef train_with_pyreader(exe, train_prog, compiled_train_prog, train_pyreader,\n                        train_fetch_list, train_metrics, epochs=10,\n                        log_interval=0, valid_interval=0,\n                        save_dir='./', save_model_name='model',\n                        test_exe=None, test_pyreader=None,\n                        test_fetch_list=None, test_metrics=None):\n    \"\"\"train_with_pyreader\n    \"\"\"\n    if not train_pyreader:\n        logger.error(\"[TRAIN] get pyreader failed.\")\n    EARLY_STOP_NUM = 20\n    early_stop = EARLY_STOP_NUM\n    global_iter = 0\n    train_iter = 0\n    iter_all = 0\n    best_test_acc1 = 0\n    for epoch in range(epochs):\n        lr = static.global_scope().find_var(\"learning_rate\").get_tensor()\n        logger.info(\n            \"------- learning rate {}, learning rate counter  -----\".format(\n                np.array(lr)))\n        if early_stop < 0:\n            logger.info('Earyly Stop !!!')\n            break\n        train_metrics.reset()"
        },
        {
            "comment": "This code is part of a training loop for a machine learning model. It keeps track of the current iteration, measures the time taken for processing each data batch, and updates loss, prediction, and label metrics. If logging interval is met, it finalizes and logs the metrics for the current epoch's iteration.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":96-118",
            "content": "        global_iter += train_iter\n        epoch_periods = []\n        for data in train_pyreader():\n            try:\n                cur_time = time.time()\n                train_outs = exe.run(compiled_train_prog,\n                                     fetch_list=train_fetch_list,\n                                     feed=data)\n                iter_all += 1\n                period = time.time() - cur_time\n                epoch_periods.append(period)\n                loss = np.array(train_outs[0])\n                pred = np.array(train_outs[1])\n                label = np.array(train_outs[-1])\n                train_metrics.accumulate(loss, pred, label)\n                if log_interval > 0 and (train_iter % log_interval == 0):\n                    # eval here\n                    train_metrics.finalize_and_log_out(\n                                info='[TRAIN] Epoch {} iter {} everage: '.format(epoch, train_iter))\n                train_iter += 1\n            except Exception as e:\n                logger.info(\n                    \"[TRAIN] Epoch {}, iter {} data training failed: {}\"."
        },
        {
            "comment": "The code finishes an epoch of training, logs the average time taken, and finalizes training metrics. If testing is enabled and a valid interval is set, it performs testing after each valid interval iteration and saves models with the best test accuracy.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":119-140",
            "content": "                    format(epoch, train_iter, str(e)))\n        if len(epoch_periods) < 1:\n            logger.info(\n                'No iteration was executed, please check the data reader')\n            sys.exit(1)\n        logger.info(\n            '[TRAIN] Epoch {} training finished, average time: {}'.format(\n                epoch, np.mean(epoch_periods)))\n        train_metrics.finalize_and_log_out( \\\n            info='[TRAIN] Finished ... Epoch {} all iters average: '.format(epoch))\n        # save models of min loss in best acc epochs\n        if test_exe and valid_interval > 0 and (epoch +\n                                                1) % valid_interval == 0:\n            # metrics_dict,loss = train_metrics.calculator.get_computed_metrics()\n            loss, metrics_dict_test = test_with_pyreader(\n                exe, test_exe, test_pyreader, test_fetch_list, test_metrics,\n                log_interval)\n            test_acc1 = metrics_dict_test['avg_acc1']\n            if test_acc1 > best_test_acc1:\n                best_test_acc1 = test_acc1"
        },
        {
            "comment": "This code snippet defines functions for saving the model at specific epochs and after training has stopped. It checks if a directory with the model name exists, deletes it if necessary, and then saves the model using either fluid.io or static methods. The save_model function takes in execution context, program, save directory, model name, and optional postfix for the file name. The save_model_persist function is similar but uses the save_model method to save the model. The code also includes a check to stop training if the early stopping condition is met.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":141-168",
            "content": "                save_model(exe, train_prog, save_dir, save_model_name,\n                           \"_epoch{}_acc{}\".format(epoch, best_test_acc1))\n                early_stop = EARLY_STOP_NUM\n            else:\n                early_stop -= 1\ndef save_model(exe, program, save_dir, model_name, postfix=None):\n    \"\"\"save_model\n    \"\"\"\n    model_path = os.path.join(save_dir, model_name + postfix)\n    if os.path.isdir(model_path):\n        shutil.rmtree(model_path)\n    # fluid.io.save_persistables(exe, model_path, main_program=program)\n    save_vars = [x for x in program.list_vars() \\\n                                 if isinstance(x, paddle.framework.Parameter)]\n    static.save_vars(exe,\n                       dirname=model_path,\n                       main_program=program,\n                       vars=save_vars,\n                       filename=\"param\")\ndef save_model_persist(exe, program, save_dir, model_name, postfix=None):\n    \"\"\"save_model\"\"\"\n    model_path = os.path.join(save_dir, model_name + postfix)\n    if os.path.isdir(model_path):"
        },
        {
            "comment": "This function initializes the pre-trained parameters for a model. It first checks if the pretraining_params_path exists, and then loads any existing variables in the main program using static.load_vars(). If var is not a Parameter instance, it will return False. Finally, it logs that the pretraining parameters were loaded from the given path.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":169-200",
            "content": "        shutil.rmtree(model_path)\n    paddle.fluid.io.save_persistables(exe,\n                               save_dir,\n                               main_program=program,\n                               filename=model_path)\ndef init_pretraining_params(exe,\n                            pretraining_params_path,\n                            main_program,\n                            use_fp16=False):\n    \"\"\"\n    init pretrain_params\n    \"\"\"\n    assert os.path.exists(pretraining_params_path\n                          ), \"[%s] cann't be found.\" % pretraining_params_path\n    def existed_params(var):\n        \"\"\"\n        Load existed params\n        \"\"\"\n        if not isinstance(var, paddle.framework.Parameter):\n            return False\n        flag = os.path.exists(os.path.join(pretraining_params_path, var.name))\n        return flag\n    static.load_vars(exe,\n                       pretraining_params_path,\n                       main_program=main_program,\n                       predicate=existed_params)\n    logger.info(\n        \"Load pretraining parameters from {}.\".format(pretraining_params_path))"
        },
        {
            "comment": "The code defines a subclass of Python's dictionary, named AttrDict. It overrides the `__getattr__` and `__setattr__` methods to provide getter and setter functionality for dictionary keys as attributes, similar to regular class attributes.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/MultimodalVideoTag/scenario_lib/utils.py\":203-217",
            "content": "class AttrDict(dict):\n    \"\"\"AttrDict\n    \"\"\"\n    def __getattr__(self, key):\n        \"\"\"getter\n        \"\"\"\n        return self[key]\n    def __setattr__(self, key, value):\n        \"\"\"setter\n        \"\"\"\n        if key in self.__dict__:\n            self.__dict__[key] = value\n        else:\n            self[key] = value"
        }
    ]
}