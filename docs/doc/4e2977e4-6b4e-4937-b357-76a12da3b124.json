{
    "summary": "This function processes skeleton data, extracts body information, updates a dictionary with the data and returns the skeleton name, body data, and frame count. It handles missing frames and calculates motion using NTU RGB-D dataset data. Additionally, it combines and processes raw skeleton data from multiple files, updating progress, filters out missing frames, logs events, and saves the filtered data into pickle files.",
    "details": [
        {
            "comment": "This function gets raw bodies data from a skeleton sequence by loading the file and checking its existence. It returns a dictionary with three key-value pairs: name (skeleton filename), data (raw data of each body), and num_frames (number of valid frames).",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/ntu-rgb-d/get_raw_skes_data.py\":0-27",
            "content": "# ref: https://github.com/Uason-Chen/CTR-GCN/blob/main/data/ntu/get_raw_skes_data.py\nimport os.path as osp\nimport os\nimport numpy as np\nimport pickle\nimport logging\ndef get_raw_bodies_data(skes_path, ske_name, frames_drop_skes,\n                        frames_drop_logger):\n    \"\"\"\n    Get raw bodies data from a skeleton sequence.\n    Each body's data is a dict that contains the following keys:\n      - joints: raw 3D joints positions. Shape: (num_frames x 25, 3)\n      - colors: raw 2D color locations. Shape: (num_frames, 25, 2)\n      - interval: a list which stores the frame indices of this body.\n      - motion: motion amount (only for the sequence with 2 or more bodyIDs).\n    Return:\n      a dict for a skeleton sequence with 3 key-value pairs:\n        - name: the skeleton filename.\n        - data: a dict which stores raw data of each body.\n        - num_frames: the number of valid frames.\n    \"\"\"\n    ske_file = osp.join(skes_path, ske_name + '.skeleton')\n    assert osp.exists(ske_file), 'Error: Skeleton file %s not found' % ske_file"
        },
        {
            "comment": "Reading and processing .skeleton file data into a list, storing number of frames, ignoring frames with no bodies, extracting body IDs, and counting the number of joints for each body.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/ntu-rgb-d/get_raw_skes_data.py\":28-57",
            "content": "    # Read all data from .skeleton file into a list (in string format)\n    print('Reading data from %s' % ske_file[-29:])\n    with open(ske_file, 'r') as fr:\n        str_data = fr.readlines()\n    num_frames = int(str_data[0].strip('\\r\\n'))\n    frames_drop = []\n    bodies_data = dict()\n    valid_frames = -1  # 0-based index\n    current_line = 1\n    for f in range(num_frames):\n        num_bodies = int(str_data[current_line].strip('\\r\\n'))\n        current_line += 1\n        if num_bodies == 0:  # no data in this frame, drop it\n            frames_drop.append(f)  # 0-based index\n            continue\n        valid_frames += 1\n        joints = np.zeros((num_bodies, 25, 3), dtype=np.float32)\n        colors = np.zeros((num_bodies, 25, 2), dtype=np.float32)\n        for b in range(num_bodies):\n            bodyID = str_data[current_line].strip('\\r\\n').split()[0]\n            current_line += 1\n            num_joints = int(str_data[current_line].strip('\\r\\n'))  # 25 joints\n            current_line += 1\n            for j in range(num_joints):"
        },
        {
            "comment": "This code reads data from a file, extracts joint and color information for each body, and updates or adds body data to a dictionary based on the body ID. The joint and color arrays are created using numpy functions, and the joints array is stacked along the frame order if the body's data already exists in the dictionary.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/ntu-rgb-d/get_raw_skes_data.py\":58-75",
            "content": "                temp_str = str_data[current_line].strip('\\r\\n').split()\n                joints[b, j, :] = np.array(temp_str[:3], dtype=np.float32)\n                colors[b, j, :] = np.array(temp_str[5:7], dtype=np.float32)\n                current_line += 1\n            if bodyID not in bodies_data:  # Add a new body's data\n                body_data = dict()\n                body_data['joints'] = joints[b]  # ndarray: (25, 3)\n                body_data['colors'] = colors[b,\n                                             np.newaxis]  # ndarray: (1, 25, 2)\n                body_data['interval'] = [valid_frames\n                                         ]  # the index of the first frame\n            else:  # Update an already existed body's data\n                body_data = bodies_data[bodyID]\n                # Stack each body's data of each frame along the frame order\n                body_data['joints'] = np.vstack(\n                    (body_data['joints'], joints[b]))\n                body_data['colors'] = np.vstack("
        },
        {
            "comment": "This code retrieves raw data for a specific subject's skeleton (ske_name) from the NTU RGB-D dataset. It handles missing frames, calculates motion based on body data with multiple bodyIDs and returns the skeleton name, body data and updated frame count.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/ntu-rgb-d/get_raw_skes_data.py\":76-99",
            "content": "                    (body_data['colors'], colors[b, np.newaxis]))\n                pre_frame_idx = body_data['interval'][-1]\n                body_data['interval'].append(pre_frame_idx +\n                                             1)  # add a new frame index\n            bodies_data[bodyID] = body_data  # Update bodies_data\n    num_frames_drop = len(frames_drop)\n    assert num_frames_drop < num_frames, \\\n        'Error: All frames data (%d) of %s is missing or lost' % (num_frames, ske_name)\n    if num_frames_drop > 0:\n        frames_drop_skes[ske_name] = np.array(frames_drop, dtype=np.int)\n        frames_drop_logger.info('{}: {} frames missed: {}\\n'.format(\n            ske_name, num_frames_drop, frames_drop))\n    # Calculate motion (only for the sequence with 2 or more bodyIDs)\n    if len(bodies_data) > 1:\n        for body_data in bodies_data.values():\n            body_data['motion'] = np.sum(np.var(body_data['joints'], axis=0))\n    return {\n        'name': ske_name,\n        'data': bodies_data,\n        'num_frames': num_frames - num_frames_drop"
        },
        {
            "comment": "This function retrieves raw skeleton data from multiple files, processes it, and saves the combined data in a file. It keeps track of the number of frames for each file and prints progress updates every 1000 files processed.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/ntu-rgb-d/get_raw_skes_data.py\":100-129",
            "content": "    }\ndef get_raw_skes_data():\n    skes_name = np.loadtxt(skes_name_file, dtype=str)\n    num_files = skes_name.size\n    print('Found %d available skeleton files.' % num_files)\n    raw_skes_data = []\n    frames_cnt = np.zeros(num_files, dtype=np.int)\n    for (idx, ske_name) in enumerate(skes_name):\n        bodies_data = get_raw_bodies_data(skes_path, ske_name, frames_drop_skes,\n                                          frames_drop_logger)\n        raw_skes_data.append(bodies_data)\n        frames_cnt[idx] = bodies_data['num_frames']\n        if (idx + 1) % 1000 == 0:\n            print('Processed: %.2f%% (%d / %d)' % \\\n                  (100.0 * (idx + 1) / num_files, idx + 1, num_files))\n    with open(save_data_pkl, 'wb') as fw:\n        pickle.dump(raw_skes_data, fw, pickle.HIGHEST_PROTOCOL)\n    np.savetxt(osp.join(save_path, 'raw_data', 'frames_cnt.txt'),\n               frames_cnt,\n               fmt='%d')\n    print('Saved raw bodies data into %s' % save_data_pkl)\n    print('Total frames: %d' % np.sum(frames_cnt))"
        },
        {
            "comment": "This code reads data from the NTU-RGB+D dataset, filters out frames with missing skeleton data, and saves it into two pickle files. The data is read from a specific path, and if the raw_data directory does not exist, it creates one. A logger for frames drop events is also set up and logs to a file. Finally, the code dumps the filtered frames data into another pickle file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/data/ntu-rgb-d/get_raw_skes_data.py\":131-156",
            "content": "    with open(frames_drop_pkl, 'wb') as fw:\n        pickle.dump(frames_drop_skes, fw, pickle.HIGHEST_PROTOCOL)\nif __name__ == '__main__':\n    save_path = './'\n    skes_path = '../ntu-rgb-d/nturgb+d_skeletons/'\n    stat_path = osp.join(save_path, 'statistics')\n    if not osp.exists('./raw_data'):\n        os.makedirs('./raw_data')\n    skes_name_file = osp.join(stat_path, 'skes_available_name.txt')\n    save_data_pkl = osp.join(save_path, 'raw_data', 'raw_skes_data.pkl')\n    frames_drop_pkl = osp.join(save_path, 'raw_data', 'frames_drop_skes.pkl')\n    frames_drop_logger = logging.getLogger('frames_drop')\n    frames_drop_logger.setLevel(logging.INFO)\n    frames_drop_logger.addHandler(\n        logging.FileHandler(osp.join(save_path, 'raw_data', 'frames_drop.log')))\n    frames_drop_skes = dict()\n    get_raw_skes_data()\n    with open(frames_drop_pkl, 'wb') as fw:\n        pickle.dump(frames_drop_skes, fw, pickle.HIGHEST_PROTOCOL)"
        }
    ]
}