{
    "summary": "This code includes necessary headers for OpenCV and PaddlePaddle integration, defines operations like pre-processing, post-processing, and utility functions. The class creates a VideoRecognizer object with initialization variables, initializing the model and operation objects for inference steps.",
    "details": [
        {
            "comment": "This code is licensing information and includes necessary headers for OpenCV and PaddlePaddle API integration. It defines various operations such as pre-processing, post-processing, utility functions, and possibly some video recording functionality using the PaddlePaddle library.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/cpp_infer/include/video_rec.h\":0-33",
            "content": "// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n#pragma once\n#include \"opencv2/core.hpp\"\n#include \"opencv2/imgcodecs.hpp\"\n#include \"opencv2/imgproc.hpp\"\n#include \"paddle_api.h\"\n#include \"paddle_inference_api.h\"\n#include <chrono>\n#include <iomanip>\n#include <iostream>\n#include <ostream>\n#include <vector>\n#include <cstring>\n#include <fstream>\n#include <numeric>\n#include <include/postprocess_op.h>\n#include <include/preprocess_op.h>\n#include <include/utility.h>"
        },
        {
            "comment": "This class is for creating a VideoRecognizer object, which initializes variables such as the model directory, inference model name, use of GPU, number of segments, recording batch number, GPU ID, GPU memory, CPU math library threads, use of MKLDNN, label path, and optionally sets mean and scale values for image preprocessing.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/cpp_infer/include/video_rec.h\":35-56",
            "content": "using namespace paddle_infer;\nnamespace PaddleVideo\n{\n    class VideoRecognizer\n    {\n    public:\n        explicit VideoRecognizer(const std::string &model_dir, const std::string &inference_model_name, const bool &use_gpu, const int &num_seg,\n                                 const int &rec_batch_num, const int &gpu_id,\n                                 const int &gpu_mem, const int &cpu_math_library_num_threads,\n                                 const bool &use_mkldnn, const std::string &label_path,\n                                 const bool &use_tensorrt, const std::string &precision, const std::vector<float> &_mean = {0.406, 0.456, 0.485},\n                                 const std::vector<float> &_scale = {0.225, 0.224, 0.229})\n        {\n            this->inference_model_name = inference_model_name;\n            this->use_gpu_ = use_gpu;\n            this->num_seg = num_seg;\n            this->rec_batch_num = rec_batch_num;\n            this->gpu_id_ = gpu_id;\n            this->gpu_mem_ = gpu_mem;\n            this->cpu_math_library_num_threads_ = cpu_math_library_num_threads;"
        },
        {
            "comment": "This function initializes the video recognition class, sets member variables for model type (use_mkldnn_, use_tensorrt_), precision, mean values, scale values, and loads the label list from a given path. It also calls the LoadModel() function to load the inference model.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/cpp_infer/include/video_rec.h\":57-85",
            "content": "            this->use_mkldnn_ = use_mkldnn;\n            this->use_tensorrt_ = use_tensorrt;\n            this->precision_ = precision;\n            this->mean_ = _mean;\n            this->scale_ = _scale;\n            this->label_list_ = Utility::ReadDict(label_path);\n            LoadModel(model_dir);\n        }\n        // Load Paddle inference model\n        void LoadModel(const std::string &model_dir);\n        void Run(const std::vector<string> &frames_batch_path, const std::vector<std::vector<cv::Mat> > &frames_batch, std::vector<double> *times);\n    private:\n        std::string inference_model_name;\n        std::shared_ptr<Predictor> predictor_;\n        bool use_gpu_ = false;\n        int gpu_id_ = 0;\n        int rec_batch_num = 1;\n        int gpu_mem_ = 4000;\n        int cpu_math_library_num_threads_ = 4;\n        bool use_mkldnn_ = false;\n        int num_seg = 8;\n        std::vector<std::string> label_list_;\n        std::vector<float> mean_ = {0.406, 0.456, 0.485};\n        std::vector<float> scale_ = {0.225, 0.224, 0.229};"
        },
        {
            "comment": "This code initializes various operation objects for pre-processing and post-processing steps in the VideoRecognizer class of PaddleVideo library. It also sets default values for scale, precision, and use_tensorrt.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/deploy/cpp_infer/include/video_rec.h\":86-104",
            "content": "        bool is_scale_ = true;\n        bool use_tensorrt_ = false;\n        std::string precision_ = \"fp32\";\n        // Instantiate pre-process operation object(s)\n        Scale scale_op_;\n        CenterCrop centercrop_op_;\n        TenCrop tencrop_op_;\n        Normalize normalize_op_;\n        Permute permute_op_;\n        // Instantiate post-process operation object(s)\n        Softmax softmax_op_;\n    }; // class VideoRecognizer\n} // namespace PaddleVideo"
        }
    ]
}