{
    "summary": "The code imports libraries and defines an FPN class with three layers, creates a backbone model using convolutional layers and GroupNorm. It also defines a \"CFBI\" class that utilizes DeepLab for feature extraction and FPN to combine multi-scale features, returning extracted features at 4x, 8x, 16x scales along with low-level features using a forward function.",
    "details": [
        {
            "comment": "This code imports necessary libraries and defines a class called FPN, which is an FPN layer in a neural network. It has three layers: toplayer, latlayer1, and latlayer2, each with specific input dimensions and output dimensions. The _make_layer function is used to create these layers.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/cfbi.py\":0-27",
            "content": "# copyright (c) 2021 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport numpy as np\nimport paddle\nimport paddle.nn as nn\nimport paddle.nn.functional as F\nfrom ..registry import BACKBONES\nfrom .deeplab import DeepLab\nclass FPN(nn.Layer):\n    \"\"\"FPN Layer\"\"\"\n    def __init__(self, in_dim_4x, in_dim_8x, in_dim_16x, out_dim):\n        super(FPN, self).__init__()\n        self.toplayer = self._make_layer(in_dim_16x, out_dim)\n        self.latlayer1 = self._make_layer(in_dim_8x, out_dim)"
        },
        {
            "comment": "The code defines a backbone model with two convolutional layers followed by GroupNorm layer. The forward function applies the defined layers to input images of size 4x, 8x, and 16x.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/cfbi.py\":28-53",
            "content": "        self.latlayer2 = self._make_layer(in_dim_4x, out_dim)\n        self.smooth1 = self._make_layer(out_dim,\n                                        out_dim,\n                                        kernel_size=3,\n                                        padding=1)\n        self.smooth2 = self._make_layer(out_dim,\n                                        out_dim,\n                                        kernel_size=3,\n                                        padding=1)\n    def _make_layer(self, in_dim, out_dim, kernel_size=1, padding=0):\n        return nn.Sequential(\n            nn.Conv2D(in_dim,\n                      out_dim,\n                      kernel_size=kernel_size,\n                      stride=1,\n                      padding=padding,\n                      bias_attr=False),\n            nn.GroupNorm(num_groups=32, num_channels=out_dim))\n    def forward(self, x_4x, x_8x, x_16x):\n        \"\"\" forward function\"\"\"\n        x_16x = self.toplayer(x_16x)\n        x_8x = self.latlayer1(x_8x)\n        x_4x = self.latlayer2(x_4x)"
        },
        {
            "comment": "This code defines a class \"CFBI\" which is a backbone model for feature extraction. It utilizes DeepLab as the feature extractor and FPN (Feature Pyramid Network) to combine features from different scales. The input image x is processed through the feature extracter and the output is passed through the fpn to obtain three outputs at 4x, 8x and 16x scales. These outputs are then interpolated and smoothed before being returned after applying ReLU activation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/cfbi.py\":55-83",
            "content": "        x_8x = x_8x + F.interpolate(\n            x_16x, size=x_8x.shape[-2:], mode='bilinear', align_corners=True)\n        x_4x = x_4x + F.interpolate(\n            x_8x, size=x_4x.shape[-2:], mode='bilinear', align_corners=True)\n        x_8x = self.smooth1(x_8x)\n        x_4x = self.smooth2(x_4x)\n        return F.relu(x_4x), F.relu(x_8x), F.relu(x_16x)\n@BACKBONES.register()\nclass CFBI(nn.Layer):\n    \"\"\"CFBI plus backbone\"\"\"\n    def __init__(self,\n                 backbone='resnet',\n                 freeze_bn=True,\n                 model_aspp_outdim=256,\n                 in_dim_8x=512,\n                 model_semantic_embedding_dim=256):  #,epsilon=1e-05):\n        super(CFBI, self).__init__()\n        #self.epsilon = epsilon\n        self.feature_extracter = DeepLab(backbone=backbone, freeze_bn=freeze_bn)\n        self.fpn = FPN(in_dim_4x=model_aspp_outdim,\n                       in_dim_8x=in_dim_8x,\n                       in_dim_16x=model_aspp_outdim,\n                       out_dim=model_semantic_embedding_dim)\n    def forward(self, x):"
        },
        {
            "comment": "This code defines a forward function that takes an input image and uses the feature_extracter and fpn modules to extract features at different scales. It returns the extracted features at 4x, 8x, and 16x scales along with the low-level features.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/backbones/cfbi.py\":84-87",
            "content": "        \"\"\"forward function\"\"\"\n        x, aspp_x, low_level, mid_level = self.feature_extracter(x, True)\n        x_4x, x_8x, x_16x = self.fpn(x, mid_level, aspp_x)\n        return x_4x, x_8x, x_16x, low_level"
        }
    ]
}