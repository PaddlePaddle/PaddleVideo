{
    "summary": "Recognizer3D defines a model framework with forward_net, train/val_step for training and validation in recognition models. It handles image processing based on backbone and calculates loss metrics. The code defines test_step and infer_step methods for testing and inference.",
    "details": [
        {
            "comment": "Recognizer3D is a 3D Recognizer model framework, which defines how the model runs from input to output. It includes forward_net method for model execution and train_step method for training.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/recognizers/recognizer3d.py\":0-32",
            "content": "# Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nfrom ...registry import RECOGNIZERS\nfrom .base import BaseRecognizer\nfrom paddlevideo.utils import get_logger\nlogger = get_logger(\"paddlevideo\")\n@RECOGNIZERS.register()\nclass Recognizer3D(BaseRecognizer):\n    \"\"\"3D Recognizer model framework.\n    \"\"\"\n    def forward_net(self, imgs):\n        \"\"\"Define how the model is going to run, from input to output.\n        \"\"\"\n        feature = self.backbone(imgs)\n        cls_score = self.head(feature)\n        return cls_score\n    def train_step(self, data_batch):\n        \"\"\"Training step."
        },
        {
            "comment": "The code is defining two methods, `train_step` and `val_step`, which are used for training and validation steps respectively in a recognition model. If the backbone of the model is 'ResNet3dSlowOnly', it reshapes the images to have a specific dimension before processing. For other backbones, it separates the images and labels from the data batch accordingly. Both methods then forward the images through the `forward_net` and calculate loss metrics with or without validation mode depending on the step type. The final output is the loss metrics.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/recognizers/recognizer3d.py\":33-63",
            "content": "        \"\"\"\n        if self.backbone.__class__.__name__ == 'ResNet3dSlowOnly':\n            imgs = data_batch[0]\n            labels = data_batch[1:]\n            if imgs.dim() == 6:\n                imgs = imgs.reshape([-1] + imgs.shape[2:])\n        else:\n            imgs = data_batch[0:2]\n            labels = data_batch[2:]\n        # call forward\n        cls_score = self.forward_net(imgs)\n        loss_metrics = self.head.loss(cls_score, labels)\n        return loss_metrics\n    def val_step(self, data_batch):\n        \"\"\"Validating setp.\n        \"\"\"\n        if self.backbone.__class__.__name__ == 'ResNet3dSlowOnly':\n            imgs = data_batch[0]\n            labels = data_batch[1:]\n            if imgs.dim() == 6:\n                imgs = imgs.reshape([-1] + imgs.shape[2:])\n        else:\n            imgs = data_batch[0:2]\n            labels = data_batch[2:]\n        # call forward\n        cls_score = self.forward_net(imgs)\n        loss_metrics = self.head.loss(cls_score, labels, valid_mode=True)\n        return loss_metrics"
        },
        {
            "comment": "The code defines two methods: `test_step` and `infer_step`. In the `test_step`, if the backbone is a 'ResNet3dSlowOnly', it reshapes the input images, then calls the forward pass to get class scores. Otherwise, it takes the first two elements of the data batch for inference. The `infer_step` follows similar logic but without the condition on backbone type. Both methods return the class scores.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/modeling/framework/recognizers/recognizer3d.py\":65-92",
            "content": "    def test_step(self, data_batch):\n        \"\"\"Test step.\n        \"\"\"\n        if self.backbone.__class__.__name__ == 'ResNet3dSlowOnly':\n            imgs = data_batch[0]\n            if imgs.dim() == 6:\n                imgs = imgs.reshape([-1] + imgs.shape[2:])\n        else:\n            imgs = data_batch[0:2]\n        # call forward\n        cls_score = self.forward_net(imgs)\n        return cls_score\n    def infer_step(self, data_batch):\n        \"\"\"Infer step.\n        \"\"\"\n        if self.backbone.__class__.__name__ == 'ResNet3dSlowOnly':\n            imgs = data_batch[0]\n            # call forward\n            imgs = imgs.reshape([-1] + imgs.shape[2:])\n            cls_score = self.forward_net(imgs)\n        else:\n            imgs = data_batch[0:2]\n            # call forward\n            cls_score = self.forward_net(imgs)\n        return cls_score"
        }
    ]
}