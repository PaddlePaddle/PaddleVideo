{
    "summary": "PaddleVideo Quick Start guide covers installation, usage details, and action recognition model for classifying video files. Highlights top-5 classes with high confidence using an example command, also suggesting alternative OpenCV installation method.",
    "details": [
        {
            "comment": "Code is an English version of the Quick Start guide for PaddleVideo. It provides information on how to install the necessary packages, use PaddleVideo by command line and Python code, describes arguments, and answers frequently asked questions. The code also includes instructions for installing PaddlePaddle with or without a GPU, as well as the option to install the PaddleVideo Whl Package from pypi.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/quick_start.md\":0-35",
            "content": "English | [\u7b80\u4f53\u4e2d\u6587](../zh-CN/quick_start.md)\n# PaddleVide Quick Start\n- [1. Installation](#1)\n  - [1.1 Install PaddlePaddle](#11)\n  - [1.2 Install PaddleVideo Whl Package](#12)\n- [2. Easy-to-Use](#2)\n  - [2.1 Use by Command Line](#21)\n  - [2.2 Use by Python Code](#22)\n- [3. Arguments description](#3)\n- [4.QA](#4)\n## 1. Installation\n<a name=\"11\"></a>\n### 1.1 Install PaddlePaddle\n- If you have CUDA 9 or CUDA 10 installed on your machine, please run the following command to install\n  ```bash\n  python3.7 -m pip install paddlepaddle-gpu -i https://mirror.baidu.com/pypi/simple\n  ```\n- If you have no available GPU on your machine, please run the following command to install the CPU version\n  ```bash\n  python3.7 -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple\n  ```\nFor more software version requirements, please refer to the instructions in [Installation Document](https://www.paddlepaddle.org.cn/install/quick) for operation.\n<a name=\"12\"></a>\n### 1.2 Install PaddleVideo Whl Package\n- option1: use pypi\uff08recommand\uff09"
        },
        {
            "comment": "Install package using pip:\n```bash\npip3.7 install ppvideo==2.3.0\n```\nAlternatively, build and install locally:\n```bash\npython3.7 setup.py bdist_wheel\npython3.7 -m pip install dist/ppvideo-2.3.0-py3-none-any.whl\n```\nCommand to use by command line:\n```bash\nppvideo --model_name='ppTSM_v2' --use_gpu=False --video_file='data/example.avi'\n```\nThis command uses PP-TSM_v2 model on CPU for inference on data/example.avi file, divided into 16 segments and frames combined before feeding into network. Results show top-1 prediction class_id as 5, scores as 1.0, and class name as 'archery'.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/quick_start.md\":37-75",
            "content": "```bash\npip3.7 install ppvideo==2.3.0\n```\n- option2: build and install locally\n```bash\npython3.7 setup.py bdist_wheel\npython3.7 -m pip install dist/ppvideo-2.3.0-py3-none-any.whl\n```\n## 2. Easy-to-Use\n<a name=\"21\"></a>\n### 2.1 Use by Command Line\nRun shell command\uff1a\n```bash\nppvideo --model_name='ppTSM_v2' --use_gpu=False --video_file='data/example.avi'\n```\n- This command use `PP-TSM_v2` model to infer `data/example.avi` file in `CPU`.\n- The length of the example video is about 10s. When inference, the video is first divided into 16 segments according to the time axis, then extract one frame from each segment. Finally all frames are combined and feeded into the network.\nResults\uff1a\n```\nCurrent video file: data/example.avi\n        top-1 classes: [5]\n        top-1 scores: [1.]\n        top-1 label names: ['archery']\n```\nAs you can see, use `PP-TSM_v2` trained on Kinetics-400 to predict `data/example.avi` video\uff0ctop1 prediction class_id is `5`, scores is `1.0`, class name is `archery`.\n<a name=\"22\"></a>\n### 2.2 Use by Python Code"
        },
        {
            "comment": "This code uses the PaddleVideo library with the PP-TSM_v2 model for video inference on a CPU. It predicts the top-1 class, score, and label name of the provided 'data/example.avi' video file. The model is trained on Kinetics-400 dataset. Arguments include model name (PP-TSM or PP-TSM_v2), video file path, GPU usage, and other optional parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/quick_start.md\":77-106",
            "content": "Run python code\uff1a\n```python\nfrom ppvideo import PaddleVideo\nclas = PaddleVideo(model_name='ppTSM_v2', use_gpu=False)\nvideo_file='data/example.avi'\nclas.predict(video_file)\n```\n- This code use `PP-TSM_v2` model to infer `data/example.avi` file in `CPU`.\nResults:\n```\nCurrent video file: data/example.avi\n        top-1 classes: [5]\n        top-1 scores: [1.]\n        top-1 label names: ['archery']\n```\nAs you can see, use `PP-TSM_v2` trained on Kinetics-400 to predict `data/example.avi` video\uff0ctop1 prediction class_id is `5`, scores is `1.0`, class name is `archery`.\n<a name=\"3\"></a>\n## 3. Arguments description\n| name | type | description |\n| :---: | :---: | :--- |\n| model_name | str | optional, model name, `'ppTSM'` or `'ppTSM_v2'`. If None, please specify the path of your inference model by args `model_file` and `params_file`. |\n| video_file | str | required, Video file path, supported format: single video file path, or folder containing multiple videos. |\n| use_gpu | bool | whether to use GPU\uff0cdefault True\u3002 |\n| nu"
        },
        {
            "comment": "The code defines several parameters for the PaddleVideo model including the number of segments, short and target frame sizes, model file paths, batch size, use of float16, TensorRT, MKLDNN, top_k, and label name path. It also provides a command example usage of the model with specified parameters.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/quick_start.md\":106-121",
            "content": "m_seg | int | The number of segments used in the TSM model, which is also the number of frames extracted from the video. 8 for `ppTSM`, 16 for `ppTSM_v2`, default 16. |\n| short_size | int |  short size of frame, default 256.|\n| target_size | int | target size of frame, default 224.|\n| model_file | str | optional\uff0cinference model(`.pdmodel`)path. |\n| params_file | str | optional, inference modle(`.pdiparams`) path. |\n| batch_size | int | Batch size, default 1.|\n| use_fp16 | bool | whether to use float16\uff0cdefault False.|\n| use_tensorrt | bool| whether to use Tensorrt, default False.|\n| gpu_mem | int | use GPU memory, default 8000.|\n| enable_mkldnn | bool | whether to use MKLDNN, default False.|\n| top_k | int | top_k, default 1. |\n| label_name_path | str | This file consists the relation of class_id and class_name. Default use `data/k400/Kinetics-400_label_list.txt` of Kinetics-400. You can replace it with your own label file. |\ncommand example1\uff1a\n```bash\nppvideo --model_name='ppTSM_v2' --num_seg=16 --video_file=\"data/mp4\" --batch_size=2  --top_k=5"
        },
        {
            "comment": "The code displays the top-5 classes, scores, and label names for five different video files. It shows that the classifier consistently identifies the same top-5 classes with high confidence for each video file, indicating a reliable classification performance.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/quick_start.md\":122-141",
            "content": "```\nResults\uff1a\n```txt\nCurrent video file: data/mp4/example3.avi\n        top-5 classes: [  5 345 311 159 327]\n        top-5 scores: [1.0000000e+00 1.0152016e-11 8.2871061e-14 6.7713670e-14 5.0752070e-14]\n        top-5 label names: ['archery', 'sword_fighting', 'skipping_rope', 'hula_hooping', 'spray_painting']\nCurrent video file: data/mp4/example2.avi\n        top-5 classes: [  5 345 311 159 327]\n        top-5 scores: [1.0000000e+00 1.0152016e-11 8.2871061e-14 6.7713670e-14 5.0752070e-14]\n        top-5 label names: ['archery', 'sword_fighting', 'skipping_rope', 'hula_hooping', 'spray_painting']\nCurrent video file: data/mp4/example.avi\n        top-5 classes: [  5 345 311 159 327]\n        top-5 scores: [1.0000000e+00 1.0152016e-11 8.2871061e-14 6.7713670e-14 5.0752070e-14]\n        top-5 label names: ['archery', 'sword_fighting', 'skipping_rope', 'hula_hooping', 'spray_painting']\nCurrent video file: data/mp4/example1.avi\n        top-5 classes: [  5 345 311 159 327]\n        top-5 scores: [1.0000000e+00 1.0152016e-11 8.2871061e-14 6.7713670e-14 5.0752070e-14]"
        },
        {
            "comment": "The code provides a list of top-5 label names for PaddleVideo's action recognition model. The command example demonstrates how to run the model with specific parameters, such as the model name, number of video segments, input video file, and batch size. Additionally, it suggests an alternative installation method for OpenCV-python if the regular installation is slow.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/english_documents/quick_start.md\":142-156",
            "content": "        top-5 label names: ['archery', 'sword_fighting', 'skipping_rope', 'hula_hooping', 'spray_painting']\n```\ncommand example1\uff1a\n```bash\nppvideo --model_name='ppTSM' --num_seg=8 --video_file=\"data/mp4\" --batch_size=2  --top_k=5\n```\n<a name=\"4\"></a>\n## 4. QA\n1. opecv-python Installation maybe slow, you can try:\n```\npython3.7 -m pip install opencv-python==4.2.0.32 -i https://pypi.doubanio.com/simple\n```"
        }
    ]
}