{
    "summary": "The \"BoxList\" class manages bounding boxes, and the _is_valid_boxes function checks if data array of shape [N, 4] representing box coordinates adheres to the correct format. The function returns a boolean indicating whether all ymax are greater than or equal to ymin, all xmax are greater than or equal to xmin, and the data is not empty.",
    "details": [
        {
            "comment": "The code defines a class called \"BoxList\" that represents a collection of bounding boxes as a numpy array. Each box is represented by 4 numbers: y_min, x_min, y_max, and x_max. It assumes all boxes in the list correspond to a single image.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/np_box_list.py\":0-25",
            "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# =============================================================================\n\"\"\"Numpy BoxList classes and functions.\"\"\"\nimport numpy as np\nclass BoxList:\n    \"\"\"Box collection.\n    BoxList represents a list of bounding boxes as numpy array, where each\n    bounding box is represented as a row of 4 numbers,\n    [y_min, x_min, y_max, x_max].  It is assumed that all bounding boxes within\n    a given list correspond to a single image."
        },
        {
            "comment": "This code defines a class for box collections, where users can optionally add additional related fields such as objectness or classification scores. The `__init__` method checks if the input data is a numpy array, has valid dimensions and data type (float), and raises a ValueError if any of these conditions are not met. It then stores the data in a dictionary with key \"boxes\".",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/np_box_list.py\":27-51",
            "content": "    Optionally, users can add additional related fields (such as\n    objectness/classification scores).\n    \"\"\"\n    def __init__(self, data):\n        \"\"\"Constructs box collection.\n        Args:\n            data: a numpy array of shape [N, 4] representing box coordinates\n        Raises:\n            ValueError: if bbox data is not a numpy array\n            ValueError: if invalid dimensions for bbox data\n        \"\"\"\n        if not isinstance(data, np.ndarray):\n            raise ValueError('data must be a numpy array.')\n        if len(data.shape) != 2 or data.shape[1] != 4:\n            raise ValueError('Invalid dimensions for box data.')\n        if data.dtype != np.float32 and data.dtype != np.float64:\n            raise ValueError(\n                'Invalid data type for box data: float is required.')\n        if not self._is_valid_boxes(data):\n            raise ValueError('Invalid box data. data must be a numpy array of '\n                             'N*[y_min, x_min, y_max, x_max]')\n        self.data = {'boxes': data}"
        },
        {
            "comment": "This code defines a class with methods to handle box collections. It provides functionality for counting the number of boxes, retrieving non-box fields, checking if a specific field exists, and adding data to an existing or new field while handling errors related to field existence and data dimensions.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/np_box_list.py\":53-80",
            "content": "    def num_boxes(self):\n        \"\"\"Return number of boxes held in collections.\"\"\"\n        return self.data['boxes'].shape[0]\n    def get_extra_fields(self):\n        \"\"\"Return all non-box fields.\"\"\"\n        return [k for k in self.data if k != 'boxes']\n    def has_field(self, field):\n        return field in self.data\n    def add_field(self, field, field_data):\n        \"\"\"Add data to a specified field.\n        Args:\n            field: a string parameter used to speficy a related field to be\n                accessed.\n            field_data: a numpy array of [N, ...] representing the data\n                associated with the field.\n        Raises:\n            ValueError: if the field is already exist or the dimension of the\n                field data does not matches the number of boxes.\n        \"\"\"\n        if self.has_field(field):\n            raise ValueError('Field ' + field + 'already exists')\n        if len(field_data.shape) < 1 or field_data.shape[0] != self.num_boxes(\n        ):\n            raise ValueError('Invalid dimensions for field data')"
        },
        {
            "comment": "The code defines a class with methods to access box coordinates from a stored dataset. The \"get\" method returns a numpy array of shape [N, 4] representing box corners. The \"get_field\" method is used to access data related to a specific field in the box collection. If an invalid field is provided, it raises a ValueError. The \"get_coordinates\" method returns a list of 4 1-d numpy arrays containing y_min, x_min, y_max, and x_max values for each box.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/np_box_list.py\":81-116",
            "content": "        self.data[field] = field_data\n    def get(self):\n        \"\"\"Convenience function for accesssing box coordinates.\n        Returns:\n            a numpy array of shape [N, 4] representing box corners\n        \"\"\"\n        return self.get_field('boxes')\n    def get_field(self, field):\n        \"\"\"Accesses data associated with the specified field in the box\n        collection.\n        Args:\n            field: a string parameter used to speficy a related field to be\n                accessed.\n        Returns:\n            a numpy 1-d array representing data of an associated field\n        Raises:\n            ValueError: if invalid field\n        \"\"\"\n        if not self.has_field(field):\n            raise ValueError(f'field {field} does not exist')\n        return self.data[field]\n    def get_coordinates(self):\n        \"\"\"Get corner coordinates of boxes.\n        Returns:\n            a list of 4 1-d numpy arrays [y_min, x_min, y_max, x_max]\n        \"\"\"\n        box_coordinates = self.get()\n        y_min = box_coordinates[:, 0]"
        },
        {
            "comment": "This code defines a function `_is_valid_boxes` which checks if the data array of shape [N, 4] representing box coordinates fulfills the format N*[ymin, xmin, ymax, xmax]. It returns a boolean indicating whether all ymax of boxes are equal or greater than ymin and all xmax of boxes are equal or greater than xmin. The function also checks if the data is not empty.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/ava_evaluation/np_box_list.py\":117-137",
            "content": "        x_min = box_coordinates[:, 1]\n        y_max = box_coordinates[:, 2]\n        x_max = box_coordinates[:, 3]\n        return [y_min, x_min, y_max, x_max]\n    def _is_valid_boxes(self, data):\n        \"\"\"Check whether data fullfills the format of N*[ymin, xmin, ymax,\n        xmin].\n        Args:\n            data: a numpy array of shape [N, 4] representing box coordinates\n        Returns:\n            a boolean indicating whether all ymax of boxes are equal or greater\n            than ymin, and all xmax of boxes are equal or greater than xmin.\n        \"\"\"\n        if len(data):\n            for v in data:\n                if v[0] > v[2] or v[1] > v[3]:\n                    return False\n        return True"
        }
    ]
}