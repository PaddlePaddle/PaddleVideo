{
    "summary": "This code uses PaddleVideo library to classify videos, perform feature extraction, and predict bounding box results. It logs information, saves outputs if needed, and writes inference results into a JSON file.",
    "details": [
        {
            "comment": "This code is for Baidu Cloud action and loads the model using the BMN (Behaved Motion Network) model from a given configuration file. It also defines a function to classify videos by predicting their actions and prints the information about the video being processed. The code uses logger for logging the information.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py\":0-49",
            "content": "#!./python27-gcc482/bin/python\n# coding: utf-8\n\"\"\"\nBAIDU CLOUD action\n\"\"\"\nimport os\nimport sys\nimport pickle\nimport json\nimport time\nimport shutil\nimport numpy as np\nsys.path.append(\n    \"/workspace/bianjiang03/App_TableTennis/PaddleVideo/FootballAction/predict/action_detect\"\n)\nimport models.bmn_infer as prop_model\nfrom utils.preprocess import get_images\nfrom utils.config_utils import parse_config, print_configs\nimport utils.config_utils as config_utils\nimport logger\nlogger = logger.Logger()\ndef load_model(cfg_file=\"configs/configs.yaml\"):\n    \"\"\"\n    load_model\n    \"\"\"\n    logger.info(\"load model ... \")\n    global infer_configs\n    infer_configs = parse_config(cfg_file)\n    print_configs(infer_configs, \"Infer\")\n    t0 = time.time()\n    global prop_model\n    prop_model = prop_model.InferModel(infer_configs)\n    t1 = time.time()\n    logger.info(\"step0: load model time: {} min\\n\".format((t1 - t0) * 1.0 / 60))\ndef video_classify(video_name, dataset_dir):\n    \"\"\"\n    extract_feature\n    \"\"\"\n    logger.info('predict ... ')\n    logger.info(video_name)"
        },
        {
            "comment": "This code performs video feature extraction and proposal generation using the PaddleVideo library. It first loads the video features from a pickle file, then predicts bounding box minimum notation (Bmn) results using a pre-trained model. Finally, it returns the Bmn results and saves them in an output directory if it doesn't already exist.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py\":51-83",
            "content": "    # step 1: extract feature\n    feature_path = dataset_dir + video_name\n    video_features = pickle.load(open(feature_path, 'rb'))\n    print('===video_features===', video_name)\n    # step2: get proposal\n    t0 = time.time()\n    bmn_results = prop_model.predict(infer_configs, material=video_features)\n    t1 = time.time()\n    logger.info(np.array(bmn_results).shape)\n    logger.info(\"step2: proposal time: {} min\".format((t1 - t0) * 1.0 / 60))\n    return bmn_results\nif __name__ == '__main__':\n    dataset_dir = '/workspace/bianjiang03/DATA/Features_competition_test_A/'\n    output_dir = '/workspace/bianjiang03/DATA'\n    if not os.path.exists(output_dir + '/Output_for_bmn'):\n        os.mkdir(output_dir + '/Output_for_bmn')\n    results = []\n    load_model()\n    directory = os.fsencode(dataset_dir)\n    for file in os.listdir(directory):\n        filename = os.fsdecode(file)\n        bmn_results = video_classify(filename, dataset_dir)\n        results.append({\n            'video_name': filename.split('.pkl')[0],\n            'num_proposal': len(bmn_results),"
        },
        {
            "comment": "This code segment writes the inference results into a JSON file. It first stores the 'bmn_results' dictionary and then writes it to a file named \"Output_for_bmn/prop.json\". The JSON data is formatted for readability with indentation and using UTF-8 encoding. Once writing is complete, it prints \"Done with the inference!\" indicating successful execution.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py\":84-92",
            "content": "            'bmn_results': bmn_results\n        })\n    with open(output_dir + '/Output_for_bmn/prop.json', 'w',\n              encoding='utf-8') as f:\n        data = json.dumps(results, indent=4, ensure_ascii=False)\n        f.write(data)\n    print('Done with the inference!')"
        }
    ]
}