{
    "summary": "The code adds a YOWOMetric class to the PaddleVideo framework for measuring YOWO metrics in two stages: saving test results and calculating metrics from saved results files. The code also handles batch processing, logging progress, and evaluates mAP metrics.",
    "details": [
        {
            "comment": "This code defines a YOWOMetric class within the PaddleVideo framework. The class measures metrics for YOWO in two stages: first, it saves test results using a trained model, and then calculates metrics from the saved results file.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/yowo_metric.py\":0-29",
            "content": "# copyright (c) 2021 PaddlePaddle Authors. All Rights Reserve.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os.path as osp\nimport os\nfrom paddlevideo.utils import get_logger\nfrom .registry import METRIC\nfrom .base import BaseMetric\nfrom .ucf24_utils import get_mAP\nlogger = get_logger(\"paddlevideo\")\n@METRIC.register\nclass YOWOMetric(BaseMetric):\n    \"\"\"\n    Metrics for YOWO. Two Stages in this metric:\n    (1) Get test results using trained model, results will be saved in YOWOMetric.result_path;\n    (2) Calculate metrics using results file from stage (1)."
        },
        {
            "comment": "The code initializes an instance of a BMN metrics class with specified parameters. It checks if the result path exists and creates it if not, then updates the metric by writing detection results to corresponding files in the result path for each batch.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/yowo_metric.py\":30-61",
            "content": "    \"\"\"\n    def __init__(self,\n                 data_size,\n                 batch_size,\n                 gt_folder,\n                 result_path,\n                 threshold=0.5,\n                 save_path=None,\n                 log_interval=1):\n        \"\"\"\n        Init for BMN metrics.\n        Params:\n            gtfolder:groundtruth folder path for ucf24\n        \"\"\"\n        super().__init__(data_size, batch_size, log_interval)\n        self.result_path = result_path\n        self.gt_folder = gt_folder\n        self.threshold = threshold\n        self.save_path = save_path\n        if not osp.isdir(self.result_path):\n            os.makedirs(self.result_path)\n    def update(self, batch_id, data, outputs):\n        frame_idx = outputs['frame_idx']\n        boxes = outputs[\"boxes\"]\n        for j in range(len(frame_idx)):\n            detection_path = osp.join(self.result_path, frame_idx[j])\n            with open(detection_path, 'w+') as f_detect:\n                for box in boxes[j]:\n                    x1 = round(float(box[0] - box[2] / 2.0) * 320.0)"
        },
        {
            "comment": "This code snippet is part of the PaddleVideo library. It calculates and writes yolo v5 box information into a file, handling batch processing and logging progress with an interval. The accumulate function collects mAP metrics for evaluation.",
            "location": "\"/media/root/Prima/works/PaddleVideo/docs/src/paddlevideo/metrics/yowo_metric.py\":62-81",
            "content": "                    y1 = round(float(box[1] - box[3] / 2.0) * 240.0)\n                    x2 = round(float(box[0] + box[2] / 2.0) * 320.0)\n                    y2 = round(float(box[1] + box[3] / 2.0) * 240.0)\n                    det_conf = float(box[4])\n                    for j in range((len(box) - 5) // 2):\n                        cls_conf = float(box[5 + 2 * j].item())\n                        prob = det_conf * cls_conf\n                        f_detect.write(\n                            str(int(box[6]) + 1) + ' ' + str(prob) + ' ' + str(x1) + ' ' + str(y1) + ' ' + str(\n                                x2) + ' ' + str(y2) + '\\n')\n        if batch_id % self.log_interval == 0:\n            logger.info(\"[TEST] Processing batch {}/{} ...\".format(\n                batch_id,\n                self.data_size // (self.batch_size * self.world_size)))\n    def accumulate(self):\n        metric_list = get_mAP(self.gt_folder, self.result_path, self.threshold, self.save_path)\n        for info in metric_list:\n            logger.info(info)"
        }
    ]
}