{
    "/applications/MultimodalVideoTag/scenario_lib/config.py": "Config Parser and Merger for Multimodal Video Tag",
    "/applications/MultimodalVideoTag/scenario_lib/config.py:1-52": "Config Parser and Merger Function",
    "/applications/MultimodalVideoTag/scenario_lib/config.py:53-71": "Config Updater and Printer",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/__init__.py": "Multimodal Video Tag Datareader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py": "ERNIE Reader for Multimodal Video Tagging",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:1-35": "Ernie Reader: MultimodalVideoTag's Python Component",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:103-131": "Record Creation from Text Tokenization",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:132-151": "Ensuring Correct BERT/ERNIE Sequences",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:152-179": "ERNIE Input Preparation",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:180-207": "ERNIE Batch Record Generation",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:208-235": "Padding Ernie Batch Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:236-257": "ERNIE Task Data Processing",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:258-289": "ERNIE Text Data Generation",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:290-317": "Pad Instances to Max Sequence Length",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:318-334": "Preparing Return List in ERNIE Task Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:37-74": "CSV Reader: BaseReader Class",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/ernie_task_reader.py:75-102": "Initializing and Configuring ERNIE Task Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py": "Multimodal Video Feature Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:1-39": "FeatureReader: Multimodal Video Feature Data Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:114-140": "Multimodal Video Data Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:143-173": "Function for Loading Video Files and Labels",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:174-212": "Label Data Manipulation Functions",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:213-251": "Efficient Data Reader for Multimodal Video Analysis",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:252-274": "Load and Return Dictionary of Words and Indices",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:40-67": "YouTube-8M Data Reader: LSTM, Attention Cluster, NextVlad",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:68-95": "Multimodal Data Reader Algorithm",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/feature_reader.py:96-113": "Multi-Modal Dataset Feature Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/reader_utils.py": "Reader Manager: Custom Exceptions and Singleton Design",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/reader_utils.py:1-30": "Custom Exception for Missing Reader",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/reader_utils.py:31-73": "Video Data Reader Utilities",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/reader_utils.py:74-91": "Reader Manager: Singleton for Registering and Retrieving Readers",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py": "Text Tokenization for Multimodal Video Tagging",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:1-32": "Python Unicode Converter Function",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:134-168": "End-to-End Tokenization with CharTokenizer",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:169-197": "Basic Tokenizer for Text Tokenization",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:198-229": "Chinese Text Tokenization and Processing",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:230-259": "Text Tokenization Functions",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:260-282": "CJK Unicode Checker",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:283-315": "Greedy Wordpiece Tokenizer",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:316-348": "Tokenization and Unknown Word Handling",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:33-61": "Universal Printable Text Encoder",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:349-382": "Tokenizing String Functions",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:383-405": "Detect Punctuation and Chinese Characters",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:406-441": "Chinese Text Tokenizer",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:62-96": "Vocabulary File Handler",
    "/applications/MultimodalVideoTag/scenario_lib/datareader/tokenization.py:97-133": "FullTokenizer: Efficient Tokenization Class",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py": "Multimodal Video Tagging with PaddlePaddle",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py:1-37": "Multimodal Video Tag Evaluation Code",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py:124-145": "Evaluate and Save Multimodal Video Model",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py:146-159": "Save Inference Model with Parameters",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py:38-64": "Paddle Video Eval Argument Parser",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py:65-94": "Evaluate and Save Inference Model",
    "/applications/MultimodalVideoTag/scenario_lib/eval_and_save_model.py:95-123": "Save and Evaluate Model",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py": "Multimodal Video Tagging Inference",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py:1-38": "Paddle Video Inference Script",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py:100-122": "Multimodal Inference Function",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py:124-161": "Video Label Inference Function",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py:162-173": "MultimodalVideoTag Inference Function",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py:39-69": "InferModel Class and Load Inference Model Function",
    "/applications/MultimodalVideoTag/scenario_lib/inference.py:70-98": "Multimodal Video Tagging Initialization",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py": "Multi-modal Video Tagging with ERNIE",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:1-34": "AttentionLstmErnie: Combining Scenario-Classify and ERNIE",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:109-131": "ERNIE Model Initialization and Freeze",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:132-154": "Attention-based LSTM Model for Video Tagging",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:155-172": "Dynamic LSTM for Image Features with Attention",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:173-194": "Multimodal LSTM with Audio and Visual Inputs",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:195-214": "Attention LSTM for Audio Reversal",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:215-235": "Multimodal Video Tagging with LSTM-Attention and ERNIE",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:236-260": "Attention-based Neural Feature Sequence Calculation",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:261-285": "Dropout and Batch Normalization for LSTM",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:286-312": "Attention LSTM Ernie Model with Dropout",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:313-334": "Loss Calculation with Piecewise Decay Optimizer",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:336-365": "Sigmoid Loss Function in Attention LSTM",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:35-59": "Attention LSTM ERNIE Model Initialization",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:366-400": "Attention LSTM ERNIE Model Functions",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:60-85": "AttentionLSTMERNIE Model Config Init",
    "/applications/MultimodalVideoTag/scenario_lib/models/attention_lstm_ernie.py:86-108": "Ernie Model Data Feeding and Feature Extraction",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py": "ERNIE Multimodal Video Tagging Model",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:1-33": "Ernie Model Configuration",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:107-132": "ERNIE Model Initialization and Building",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:133-158": "Multimodal Video Tagging Embedding Combination",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:159-184": "Embedding Layer Initialization and Encoding",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:185-215": "Encoder Layer Initialization",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:216-243": "TextCNN Model for Sequence Feature Extraction",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:244-250": "1D Convolutional Layer Creation",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:34-73": "Ernie Model Configuration Class",
    "/applications/MultimodalVideoTag/scenario_lib/models/ernie.py:76-106": "ERNIE Model Class Definition",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py": "Transformer Encoder for NLP",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:1-32": "Multi-Head Attention Function",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:105-128": "Scaled Dot-Product Attention in Transformer Encoder",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:129-154": "Transformer Encoder Attention Mechanism",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:155-182": "Position-wise Feed-Forward Network in Transformer Encoder",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:183-208": "Transformer Encoder Layer for Multimodal Video Tagging",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:209-236": "Transformer Encoder Layer Implementation",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:237-268": "Transformer Encoder Layer with MH Attention",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:269-308": "Transformer Encoder Model Definition",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:309-338": "Transformer Encoder Function",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:33-57": "Multi-Head Attention Layer Code",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:58-80": "Transformer Encoder Layer Function",
    "/applications/MultimodalVideoTag/scenario_lib/models/transformer_encoder.py:81-104": "Split and Combine Attention Heads in Transformer Encoder",
    "/applications/MultimodalVideoTag/scenario_lib/train.py": "Video Model Training with PaddlePaddle",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:1-34": "Train Model Using AttentionLstmErnie",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:106-136": "Command-Line Arguments for Model Training",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:137-160": "Training Model Setup",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:161-190": "Model Building and Execution Setup",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:191-213": "Data Parallelism with Pre-Trained Weights",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:214-231": "Batch Size Setting in Multimodal Video Tagging",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:232-263": "Train Model with Custom Arguments",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:37-71": "Command-Line Logging for Paddle Video",
    "/applications/MultimodalVideoTag/scenario_lib/train.py:72-105": "Training Options in MultimodalVideoTag",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py": "Multi-Task Framework for Video Tagging",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:1-39": "Testing with PyReader Function",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:120-141": "Epoch Training Metrics and Testing",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:142-169": "Save and Stop Training Model Function",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:170-201": "Load Pretrained Parameters",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:204-218": "AttrDict: Dictionary as Class Attributes",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:40-67": "PaddleVideo Test Suite",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:68-96": "Train Model with PyReader: Epochs, Testing, and Early Stopping",
    "/applications/MultimodalVideoTag/scenario_lib/utils.py:97-119": "ML Training Loop Metrics Tracker",
    "/applications/MultimodalVideoTag/train.sh": "Efficient GPU Training of Attention LSTM Ernie",
    "/applications/PP-Care/Readme.md": "Pre-Trained PP-Care Model for Video Understanding",
    "/applications/PP-Care/Readme.md:1-55": "3DMRI Classification with PaddleVideo",
    "/applications/PP-Care/Readme.md:107-110": "Efficient Video Neural Networks: A Comprehensive Guide",
    "/applications/PP-Care/Readme.md:55-81": "Initializing PP-Care Model for MRI Data",
    "/applications/PP-Care/Readme.md:81-106": "Optimized PP-Care Model Testing with ResNet50",
    "/applications/PPHuman/README.md": "PaddleVideo to PP-Human Model Conversion Script",
    "/applications/PPHuman/README.md:1-21": "Training Behavior Model with PaddleVideo",
    "/applications/PPHuman/README.md:115-143": "Exporting PaddleVideo Model for PP-Human",
    "/applications/PPHuman/README.md:22-42": "Data Preparation for PP-Human",
    "/applications/PPHuman/README.md:44-60": "Keypoint Detection with Pretrained Models",
    "/applications/PPHuman/README.md:62-83": "PPHuman: Human Keypoint Detection in Videos",
    "/applications/PPHuman/README.md:84-114": "PPHuman JSON to Training Data Conversion",
    "/applications/PPHuman/datasets/prepare_dataset.py": "Preparing Datasets for PaddleVideo and PPHuman",
    "/applications/PPHuman/datasets/prepare_dataset.py:1-34": "UR Fall Dataset Conversion for PaddleVideo",
    "/applications/PPHuman/datasets/prepare_dataset.py:35-69": "Consistent Dataset Preparation",
    "/applications/PPHuman/datasets/prepare_dataset.py:70-98": "Prepare Dataset for PaddleVideo's PPHuman",
    "/applications/README.md": "PaddleVideo: Versatile Application Cases",
    "/applications/T2VLAD/README.md": "Introducing T2VLAD: Video Retrieval Model in PaddleVideo",
    "/applications/T2VLAD/README.md:1-60": "T2VLAD: Text Video Retrieval Model Introduction",
    "/applications/T2VLAD/README.md:61-75": "T2VLAD Performance Metrics",
    "/applications/T2VLAD/README_en.md": "T2VLAD: Text-Video Retrieval with PaddleNLP",
    "/applications/T2VLAD/README_en.md:1-31": "Install PaddleNLP Dependency",
    "/applications/T2VLAD/README_en.md:32-59": "Train and Test T2VLAD on MSRVTT Dataset",
    "/applications/T2VLAD/README_en.md:61-69": "Text-Video Retrieval Model Metrics: R@1, R@5, R@10",
    "/applications/T2VLAD/base/__init__.py": "Importing Base Modules",
    "/applications/T2VLAD/base/base_dataset.py": "Video Dataset Base Class",
    "/applications/T2VLAD/base/base_dataset.py:1-36": "Copyright, Libraries, and Type Guarding in Python",
    "/applications/T2VLAD/base/base_dataset.py:102-125": "Dataset Initialization",
    "/applications/T2VLAD/base/base_dataset.py:127-152": "Default Video Retrieval Paths",
    "/applications/T2VLAD/base/base_dataset.py:154-175": "Experts Configuration Initialization",
    "/applications/T2VLAD/base/base_dataset.py:176-197": "Initializing Arrays for Model Evaluation",
    "/applications/T2VLAD/base/base_dataset.py:199-217": "Expert Index Initialization",
    "/applications/T2VLAD/base/base_dataset.py:218-237": "Video Feature Preparation and Test Captioning",
    "/applications/T2VLAD/base/base_dataset.py:238-257": "Token Masking and Encoding in T2VLAD",
    "/applications/T2VLAD/base/base_dataset.py:258-280": "Text Feature Creation and Split Configuration",
    "/applications/T2VLAD/base/base_dataset.py:281-304": "Loading and Initializing Data for PaddleVideo",
    "/applications/T2VLAD/base/base_dataset.py:305-327": "Batch Tensor Initialization",
    "/applications/T2VLAD/base/base_dataset.py:329-350": "Data Preparation for Experts",
    "/applications/T2VLAD/base/base_dataset.py:351-372": "Minibatch Creation for Video and Text Features",
    "/applications/T2VLAD/base/base_dataset.py:37-76": "Base Dataset Class for Video Features",
    "/applications/T2VLAD/base/base_dataset.py:373-397": "Video Dataset Class for Text-to-Video Retrieval",
    "/applications/T2VLAD/base/base_dataset.py:398-413": "Video Frame Feature Segmentation",
    "/applications/T2VLAD/base/base_dataset.py:414-437": "Random Captioning with Tokenization",
    "/applications/T2VLAD/base/base_dataset.py:438-463": "Video Dataset Initialization",
    "/applications/T2VLAD/base/base_dataset.py:464-492": "Defining Retrieval Data and Meta Dictionary",
    "/applications/T2VLAD/base/base_dataset.py:493-516": "Feature Path Generator",
    "/applications/T2VLAD/base/base_dataset.py:517-539": "Assertion Function and Summary Stats in T2VLAD Base Dataset",
    "/applications/T2VLAD/base/base_dataset.py:540-562": "Partition and Analyze Datasets",
    "/applications/T2VLAD/base/base_dataset.py:77-101": "Dataset Class Initialization",
    "/applications/T2VLAD/base/base_model.py": "Base Model Abstract Class",
    "/applications/T2VLAD/base/base_model.py:1-36": "Abstract Base Model for PaddleVideo",
    "/applications/T2VLAD/base/base_model.py:37-37": "Trainable Parameters Counter",
    "/applications/T2VLAD/base/base_trainer.py": "T2VLAD Trainer: Multi-Epoch Management and Checkpoints",
    "/applications/T2VLAD/base/base_trainer.py:1-33": "Base Trainer Class Setup",
    "/applications/T2VLAD/base/base_trainer.py:111-128": "Improved Performance Check",
    "/applications/T2VLAD/base/base_trainer.py:129-151": "Early Stopping and Best Model Saving",
    "/applications/T2VLAD/base/base_trainer.py:153-170": "Flexible Model Saving Conditions",
    "/applications/T2VLAD/base/base_trainer.py:171-186": "Video Prediction Saving and Logging",
    "/applications/T2VLAD/base/base_trainer.py:187-210": "Model Checkpoint Management & Purge",
    "/applications/T2VLAD/base/base_trainer.py:211-238": "Stale Model Pruning",
    "/applications/T2VLAD/base/base_trainer.py:239-258": "AutoSave Best Model During Training",
    "/applications/T2VLAD/base/base_trainer.py:34-60": "Initializing Base Trainer Object",
    "/applications/T2VLAD/base/base_trainer.py:62-89": "Training Trainer Class",
    "/applications/T2VLAD/base/base_trainer.py:90-110": "Metrics Logging and Monitoring Enhancements",
    "/applications/T2VLAD/data/download_features.sh": "Remote Dataset Download & Extraction",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py": "MSRVTT Dataset Loader",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py:1-29": "MSRVTT Dataset Loader",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py:110-126": "Validating Test Sets and Missing Queries",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py:30-46": "Data Split Paths for MSRVTT Dataset",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py:47-71": "MSRVTT Dataset Feature Loading",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py:72-89": "Feature Aggregation for Expert in MSRVTT Dataset",
    "/applications/T2VLAD/data_loader/MSRVTT_dataset.py:90-108": "Checking and Validating Text Features",
    "/applications/T2VLAD/data_loader/data_loaders.py": "Efficient Data Loader with LRU Caching",
    "/applications/T2VLAD/data_loader/data_loaders.py:1-36": "Paddle Dataset Loader Function",
    "/applications/T2VLAD/data_loader/data_loaders.py:102-127": "Flush and Create Dataset Loader",
    "/applications/T2VLAD/data_loader/data_loaders.py:129-145": "Training DataLoader Creator",
    "/applications/T2VLAD/data_loader/data_loaders.py:37-69": "Create Dataset Function",
    "/applications/T2VLAD/data_loader/data_loaders.py:71-101": "Data Loader Constructor",
    "/applications/T2VLAD/logger/__init__.py": "Importing T2VLAD Logger and Parser Functions",
    "/applications/T2VLAD/logger/log_parser.py": "Log Summary: Epoch Performance Stats",
    "/applications/T2VLAD/logger/log_parser.py:1-24": "Log Performance Stats with log_summary",
    "/applications/T2VLAD/logger/log_parser.py:101-104": "Fixed Epoch Logging",
    "/applications/T2VLAD/logger/log_parser.py:26-56": "Log Parser: Identifying Seeds and Metrics in T2VLAD",
    "/applications/T2VLAD/logger/log_parser.py:57-78": "Log Parser: Extracting Scores for Seeds",
    "/applications/T2VLAD/logger/log_parser.py:79-99": "Geometric Mean Seed Selection",
    "/applications/T2VLAD/logger/logger.py": "Configure Logging from JSON File",
    "/applications/T2VLAD/model/loss.py": "Contrastive Loss for T2VLAD",
    "/applications/T2VLAD/model/loss.py:1-28": "Max Margin Ranking Loss for T2VLAD",
    "/applications/T2VLAD/model/loss.py:29-61": "Contrastive Loss for Image-Sentence Pairs",
    "/applications/T2VLAD/model/loss.py:62-85": "Contrastive Learning Cost Calculation",
    "/applications/T2VLAD/model/loss.py:86-102": "Video-Level Loss Calculation in T2VLAD",
    "/applications/T2VLAD/model/metric.py": "Retrieval Metrics and Visualization Tool",
    "/applications/T2VLAD/model/metric.py:1-30": "Retrieval Metrics Computation",
    "/applications/T2VLAD/model/metric.py:100-122": "Average Rank Calculator",
    "/applications/T2VLAD/model/metric.py:124-148": "Retrieval Metric Computation and Validity Checks",
    "/applications/T2VLAD/model/metric.py:150-180": "Closest Caption Retrieval Metrics",
    "/applications/T2VLAD/model/metric.py:181-199": "Optimistic or Averaging Caption Ranking",
    "/applications/T2VLAD/model/metric.py:200-224": "Matrix Rank Checker: Sanity-checking Code",
    "/applications/T2VLAD/model/metric.py:225-243": "Ranking Metrics Computation with Matplotlib and Numpy",
    "/applications/T2VLAD/model/metric.py:31-58": "Retrieval Metrics Calculation",
    "/applications/T2VLAD/model/metric.py:59-75": "Averaging Tie-Breaking in Similarity Matrix",
    "/applications/T2VLAD/model/metric.py:76-98": "Efficient Tied Scores Handling",
    "/applications/T2VLAD/model/model.py": "Enhanced Video Analysis with CENet",
    "/applications/T2VLAD/model/model.py:1-34": "Importing Libraries for T2VLAD Model",
    "/applications/T2VLAD/model/model.py:131-148": "Text Pooling in T2VLAD",
    "/applications/T2VLAD/model/model.py:149-179": "Transformer Layer Implementation",
    "/applications/T2VLAD/model/model.py:180-207": "Attention Functions in T2VLAD Model",
    "/applications/T2VLAD/model/model.py:208-237": "Transformer Class with Multi-Head Attention",
    "/applications/T2VLAD/model/model.py:238-275": "CEModule Class Definition",
    "/applications/T2VLAD/model/model.py:277-297": "MOE Model Initialization",
    "/applications/T2VLAD/model/model.py:298-323": "Model Initialization and Preparation",
    "/applications/T2VLAD/model/model.py:325-350": "Gated Embedding Units for MOE Computation",
    "/applications/T2VLAD/model/model.py:35-66": "Implementing Mish, Kronecker Product, and NaN Removal Functions",
    "/applications/T2VLAD/model/model.py:351-374": "Gated Text Embeddings in Model.py",
    "/applications/T2VLAD/model/model.py:376-397": "Multi-Modal MOE Weights and Feature Extraction",
    "/applications/T2VLAD/model/model.py:398-422": "Cross-View Video Localization via VLAD and MOE",
    "/applications/T2VLAD/model/model.py:423-456": "T2VLAD Model Layers Explained",
    "/applications/T2VLAD/model/model.py:458-485": "Sharded Embedding Similarity Matrix Function",
    "/applications/T2VLAD/model/model.py:486-507": "Video-Text Similarity Calculator",
    "/applications/T2VLAD/model/model.py:508-526": "Tensor Weights Combination and Normalization",
    "/applications/T2VLAD/model/model.py:527-533": "Video-Text Similarity Calculator",
    "/applications/T2VLAD/model/model.py:67-98": "NaN Handling in CENet Model",
    "/applications/T2VLAD/model/model.py:99-130": "Model Initialization and Time Estimation",
    "/applications/T2VLAD/model/net_vlad.py": "NetVLAD in T2VLAD Model Initialization",
    "/applications/T2VLAD/model/net_vlad.py:1-33": "NetVLAD Algorithm: Implementation and Parameters",
    "/applications/T2VLAD/model/net_vlad.py:100-100": "VLAD Feature Extraction in NetVLAD Model",
    "/applications/T2VLAD/model/net_vlad.py:34-44": "Initializing VLAD Model Parameters",
    "/applications/T2VLAD/model/net_vlad.py:46-76": "T2VLAD: Sanity Checks and Forward Pass",
    "/applications/T2VLAD/model/net_vlad.py:77-99": "Batch Normalized VLAD Representation Generation",
    "/applications/T2VLAD/model/text.py": "Text Embedding for Video Descriptions",
    "/applications/T2VLAD/model/text.py:1-37": "Text Embedding Interface",
    "/applications/T2VLAD/model/text.py:103-130": "Text Embedding Class",
    "/applications/T2VLAD/model/text.py:131-146": "OpenAI GPT Embedding Tokenizer",
    "/applications/T2VLAD/model/text.py:38-73": "W2VEmbedding: Text Embedding with Word2Vec",
    "/applications/T2VLAD/model/text.py:74-101": "Initializing Text2Vec Model Class",
    "/applications/T2VLAD/parse_config.py": "ConfigParser: Config Management & Parsing",
    "/applications/T2VLAD/parse_config.py:1-35": "ConfigParser Class Overview",
    "/applications/T2VLAD/parse_config.py:113-134": "Config Parser and Custom Arguments",
    "/applications/T2VLAD/parse_config.py:135-159": "Config File Processing and Class Initialization",
    "/applications/T2VLAD/parse_config.py:160-190": "Overwriting Check and Config Updates",
    "/applications/T2VLAD/parse_config.py:191-232": "Parse Config Class",
    "/applications/T2VLAD/parse_config.py:233-239": "Nested Object Access and Modify Functions",
    "/applications/T2VLAD/parse_config.py:36-62": "Initializing Argument Parser and Config Loading",
    "/applications/T2VLAD/parse_config.py:63-88": "Config-Based Model Saving and Logging",
    "/applications/T2VLAD/parse_config.py:89-112": "Directory Purging and Recreation in parse_config.py",
    "/applications/T2VLAD/test.py": "PaddleVideo: Prediction Compression and Evaluation",
    "/applications/T2VLAD/test.py:1-33": "Compress Predictions in PaddleVideo Library",
    "/applications/T2VLAD/test.py:117-146": "Paddle Model Initialization and Dataset Preparation",
    "/applications/T2VLAD/test.py:147-167": "Video Sub-Sample Processing with T2VLAD",
    "/applications/T2VLAD/test.py:168-190": "Metrics Calculation and Logging",
    "/applications/T2VLAD/test.py:193-206": "Argument Parsing and Configuration Loading",
    "/applications/T2VLAD/test.py:34-51": "Input Shape Validation: Ensuring Compatibility",
    "/applications/T2VLAD/test.py:52-84": "Function for Initializing Paddle.js Model and Data Loader",
    "/applications/T2VLAD/test.py:85-116": "Model Evaluation Initialization",
    "/applications/T2VLAD/train.py": "Video Analysis Model Training Script",
    "/applications/T2VLAD/train.py:1-35": "PaddleVideo: Training Framework Setup",
    "/applications/T2VLAD/train.py:116-133": "Command-line Arguments for Video Analysis Training",
    "/applications/T2VLAD/train.py:135-151": "Command-Line Training Setup",
    "/applications/T2VLAD/train.py:37-67": "Experiment Initialization Function",
    "/applications/T2VLAD/train.py:68-92": "Model Initialization and Training Setup",
    "/applications/T2VLAD/train.py:93-115": "Train Model and Save Best",
    "/applications/T2VLAD/trainer/__init__.py": "Importing Trainer Functions",
    "/applications/T2VLAD/trainer/trainer.py": "Memory-Efficient Video Retrieval Trainer",
    "/applications/T2VLAD/trainer/trainer.py:1-31": "PaddlePaddle Video Retrieval Trainer",
    "/applications/T2VLAD/trainer/trainer.py:119-150": "ML Model Training Loop and Scheduler",
    "/applications/T2VLAD/trainer/trainer.py:151-171": "Model Evaluation Initialization",
    "/applications/T2VLAD/trainer/trainer.py:172-190": "Batch Subsampling for Video ML Model",
    "/applications/T2VLAD/trainer/trainer.py:191-209": "PaddlePaddle-based Similarity Calculation for T2VLAD Training",
    "/applications/T2VLAD/trainer/trainer.py:210-228": "Epoch Metrics Tracking and Visualization",
    "/applications/T2VLAD/trainer/trainer.py:229-249": "Batch-wise Validation Metrics Calculation and Logging",
    "/applications/T2VLAD/trainer/trainer.py:250-267": "Top-K Metric Implementation",
    "/applications/T2VLAD/trainer/trainer.py:268-280": "Nested Predictions and Progress Functions",
    "/applications/T2VLAD/trainer/trainer.py:32-66": "Evaluation Samples Duplication and Yielding",
    "/applications/T2VLAD/trainer/trainer.py:67-89": "Epoch-based Model Trainer Class",
    "/applications/T2VLAD/trainer/trainer.py:91-117": "Batch Training with Model Loss Computation",
    "/applications/T2VLAD/utils/__init__.py": "Import All from Util Module",
    "/applications/T2VLAD/utils/util.py": "Utility Functions for T2VLAD",
    "/applications/T2VLAD/utils/util.py:1-50": "Utility Functions",
    "/applications/T2VLAD/utils/util.py:106-143": "JSON, Hashable Dictionaries & Configuration Utilities",
    "/applications/T2VLAD/utils/util.py:144-165": "Modality Dimensional Organization"
}