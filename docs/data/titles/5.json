{
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:255-276": "Optimizer and Model State Saver",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:278-295": "Model Validation and Saving in Training Process",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:29-61": "GPU-Accelerated Model Training",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:62-89": "Efficient Model Training Setup",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:90-113": "Resume Training with Data Loader and Optimizer",
    "/applications/VideoQualityAssessment/paddlevideo/utils/__init__.py": "PaddleVideo Utilities Module",
    "/applications/VideoQualityAssessment/paddlevideo/utils/build_utils.py": "Python Config Module Builder",
    "/applications/VideoQualityAssessment/paddlevideo/utils/build_utils.py:1-30": "Build Module from Config",
    "/applications/VideoQualityAssessment/paddlevideo/utils/build_utils.py:32-36": "Retrieve and Instantiate Object Classes from Registry",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py": "Config Management in PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py:1-35": "PaddleVideo Config Class & Logger",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py:111-142": "Config Override Function",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py:143-174": "Config Override Function",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py:175-180": "Config Parser and Validator",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py:38-71": "Config Parser Functions",
    "/applications/VideoQualityAssessment/paddlevideo/utils/config.py:72-110": "Config File Utilities",
    "/applications/VideoQualityAssessment/paddlevideo/utils/dist_utils.py": "Distributed Computation Utilities",
    "/applications/VideoQualityAssessment/paddlevideo/utils/dist_utils.py:1-35": "Distributed Computation Utilities",
    "/applications/VideoQualityAssessment/paddlevideo/utils/dist_utils.py:36-36": "Returning Modified Objects",
    "/applications/VideoQualityAssessment/paddlevideo/utils/logger.py": "Distributed Logger for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/utils/logger.py:1-40": "PaddleVideo's Logger Class",
    "/applications/VideoQualityAssessment/paddlevideo/utils/logger.py:104-117": "Setup and Retrieve Logger",
    "/applications/VideoQualityAssessment/paddlevideo/utils/logger.py:41-74": "Initialize PaddleVideo Logger",
    "/applications/VideoQualityAssessment/paddlevideo/utils/logger.py:75-103": "Distributed App Logging Config",
    "/applications/VideoQualityAssessment/paddlevideo/utils/precise_bn.py": "Precise Batch Normalization Update",
    "/applications/VideoQualityAssessment/paddlevideo/utils/precise_bn.py:1-31": "Precise Batch Normalization for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/utils/precise_bn.py:32-55": "Precise BN Stats for Improved Validation",
    "/applications/VideoQualityAssessment/paddlevideo/utils/precise_bn.py:56-82": "Precise Batch Normalization Accumulation",
    "/applications/VideoQualityAssessment/paddlevideo/utils/precise_bn.py:83-84": "Dynamic Batch Normalization Update",
    "/applications/VideoQualityAssessment/paddlevideo/utils/record.py": "Training Metrics Logger",
    "/applications/VideoQualityAssessment/paddlevideo/utils/record.py:1-29": "Building Record List for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/utils/record.py:117-122": "Epoch Logger with Color Coding",
    "/applications/VideoQualityAssessment/paddlevideo/utils/record.py:30-51": "Building Record List for Metric Tracking",
    "/applications/VideoQualityAssessment/paddlevideo/utils/record.py:52-90": "Record List and Average Meter Definition",
    "/applications/VideoQualityAssessment/paddlevideo/utils/record.py:91-115": "Batch and Epoch Metric Logger",
    "/applications/VideoQualityAssessment/paddlevideo/utils/registry.py": "Registry-Based Module Customization",
    "/applications/VideoQualityAssessment/paddlevideo/utils/registry.py:1-35": "Registry for Customizable Modules",
    "/applications/VideoQualityAssessment/paddlevideo/utils/registry.py:37-72": "Registry Class for Building Modules",
    "/applications/VideoQualityAssessment/paddlevideo/utils/registry.py:73-98": "Registry Class and Function Registration",
    "/applications/VideoQualityAssessment/paddlevideo/utils/save_load.py": "Save/Load Weights Utilities",
    "/applications/VideoQualityAssessment/paddlevideo/utils/save_load.py:1-37": "Load Checkpoint for Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/utils/save_load.py:38-63": "Loading Checkpoint Weights in Paddle",
    "/applications/VideoQualityAssessment/paddlevideo/utils/save_load.py:64-87": "Paddle Save, Load, and Create Directory Functions",
    "/applications/VideoQualityAssessment/paddlevideo/version.py": "PaddleVideo Version Info",
    "/applications/VideoQualityAssessment/run.sh": "TSM Model Training in PaddlePaddle",
    "/applications/VideoQualityAssessment/run.sh:1-19": "CUDA-PaddlePaddle Shell Script",
    "/applications/VideoQualityAssessment/run.sh:20-20": "Custom Predict Model with Disabled Benchmarking",
    "/applications/VideoQualityAssessment/save_model.sh": "Export Best Model for Video Quality Assessment",
    "/applications/VideoQualityAssessment/setup.py": "PaddleVideo: Video Analysis Toolkit",
    "/applications/VideoQualityAssessment/setup.py:1-34": "Setting Up PaddleVideo Package",
    "/applications/VideoQualityAssessment/setup.py:35-56": "ppvideo: PaddlePaddle-Based Video Package Setup",
    "/applications/VideoQualityAssessment/setup.py:57-57": "Creating Empty Tuple",
    "/applications/VideoTag/FineTune.md": "Fine-Tuning VideoTag: AttentionLSTM & TSN",
    "/applications/VideoTag/FineTune.md:1-32": "Fine-Tuning VideoTag Models",
    "/applications/VideoTag/FineTune.md:115-152": "PaddleVideo Fine-Tuning Guide",
    "/applications/VideoTag/FineTune.md:153-188": "TSN Model Training, Evaluation and Prediction",
    "/applications/VideoTag/FineTune.md:190-206": "Preparing Data for TSN and AttentionLSTM",
    "/applications/VideoTag/FineTune.md:34-81": "TSN Features Extraction and AttentionLSTM Fine-tuning",
    "/applications/VideoTag/FineTune.md:83-113": "Fine-tuning AttentionLSTM in VideoTag",
    "/applications/VideoTag/README.md": "Large-scale Video Classification with PaddlePaddle",
    "/applications/VideoTag/Run.md": "VideoTag App Installation and Usage",
    "/applications/VideoTag/Run.md:1-54": "Install and Prepare Data for VideoTag",
    "/applications/VideoTag/Run.md:106-109": "Video Classification Dictionary",
    "/applications/VideoTag/Run.md:55-105": "Video Tag Testing Guide",
    "/applications/VideoTag/Test.md": "VideoTag Testing Guide",
    "/applications/VideoTag/eval.py": "PaddlePaddle Evaluation Setup",
    "/applications/VideoTag/eval.py:1-33": "Setting Up PaddlePaddle Application Environment",
    "/applications/VideoTag/eval.py:123-134": "Automating Paddle Test Metrics and GPU Checks",
    "/applications/VideoTag/eval.py:34-64": "Command Line Argument Parser Function",
    "/applications/VideoTag/eval.py:65-95": "Test Model Evaluation Function",
    "/applications/VideoTag/eval.py:96-122": "Batch-by-batch Model Evaluation and Metrics",
    "/applications/VideoTag/metrics/__init__.py": "Import Metrics Function for Video Analysis",
    "/applications/VideoTag/metrics/kinetics/accuracy_metrics.py": "AccuracyMetrics Calculator",
    "/applications/VideoTag/metrics/kinetics/accuracy_metrics.py:1-34": "PaddleVideo MetricsCalculator Class",
    "/applications/VideoTag/metrics/kinetics/accuracy_metrics.py:35-62": "Accuracy Metrics Computation",
    "/applications/VideoTag/metrics/kinetics/accuracy_metrics.py:63-90": "Average Loss and Accuracy Metrics",
    "/applications/VideoTag/metrics/kinetics/accuracy_metrics.py:92-107": "Top-K Accuracy Metric",
    "/applications/VideoTag/metrics/metrics_util.py": "Video Metrics Evaluator Class",
    "/applications/VideoTag/metrics/metrics_util.py:1-33": "Video Metrics Evaluation Utilities",
    "/applications/VideoTag/metrics/metrics_util.py:114-135": "Video Tagging Metrics Calculator",
    "/applications/VideoTag/metrics/metrics_util.py:138-163": "Kinetics400 Metrics Calculator",
    "/applications/VideoTag/metrics/metrics_util.py:164-187": "Evaluate Video Predictions and Losses",
    "/applications/VideoTag/metrics/metrics_util.py:188-210": "Infer Results Printer Function",
    "/applications/VideoTag/metrics/metrics_util.py:212-237": "Metrics Utilities: Save, Calculate, and Log",
    "/applications/VideoTag/metrics/metrics_util.py:238-278": "MetricsZoo Class for Metrics Management",
    "/applications/VideoTag/metrics/metrics_util.py:279-279": "Registering TSN Metric",
    "/applications/VideoTag/metrics/metrics_util.py:34-69": "Youtube8m Metrics Calculation",
    "/applications/VideoTag/metrics/metrics_util.py:70-90": "Accumulating Metrics for Video Tagging",
    "/applications/VideoTag/metrics/metrics_util.py:92-113": "VideoTag: Logging Final Results for Each Video",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py": "Interpolated Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:1-23": "Interpolated Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:109-134": "Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:136-166": "Non-Interpolated Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:168-192": "Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:193-220": "Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:221-256": "Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:25-55": "Interpolated Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:257-274": "Normalized Predictions: Min-Max Scaling",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:57-86": "Average Precision Calculator Class",
    "/applications/VideoTag/metrics/youtube8m/average_precision_calculator.py:87-108": "Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py": "PaddleVideo Metrics for Model Evaluation",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:1-28": "YouTube8M Evaluation Utilities",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:110-135": "Top-K Video Classification Evaluation",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:136-164": "Evaluation Metrics Class",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:165-190": "Batch Metrics Calculation Function",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:191-219": "Epoch Metrics Calculator",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:220-244": "YouTube8m Metrics Evaluator",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:30-59": "Precision-Recall Average Hit at One",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:60-87": "Global Average Precision Calculation",
    "/applications/VideoTag/metrics/youtube8m/eval_util.py:88-109": "Top K Video Predictions Evaluation",
    "/applications/VideoTag/metrics/youtube8m/mean_average_precision_calculator.py": "YouTube-8m Mean Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/mean_average_precision_calculator.py:1-27": "Mean Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/mean_average_precision_calculator.py:112-113": "Mean Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/mean_average_precision_calculator.py:28-58": "Mean Average Precision Calculation in YouTube8M",
    "/applications/VideoTag/metrics/youtube8m/mean_average_precision_calculator.py:59-79": "Mean Average Precision Calculator",
    "/applications/VideoTag/metrics/youtube8m/mean_average_precision_calculator.py:80-111": "Mean Average Precision Calculator",
    "/applications/VideoTag/models/__init__.py": "Model Registry in VideoTag",
    "/applications/VideoTag/models/attention_lstm/__init__.py": "Import Attention LSTM Functions",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py": "Attention LSTM Video Tagging Model",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:1-31": "Attention LSTM Model Definition",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:104-125": "Attention LSTM Model for Video Tagging",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:126-151": "Attention LSTM Model with Learning Rate Decay",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:152-180": "Attention LSTM Model Class Definition",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:33-54": "Attention LSTM Model Configuration",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:55-76": "Initializing Feature and Label Inputs",
    "/applications/VideoTag/models/attention_lstm/attention_lstm.py:77-103": "LSTM Attention Model with Multi-Input Features",
    "/applications/VideoTag/models/attention_lstm/lstm_attention.py": "Bidirectional LSTM Attention Model",
    "/applications/VideoTag/models/attention_lstm/lstm_attention.py:1-31": "LSTM Attention Model Code",
    "/applications/VideoTag/models/attention_lstm/lstm_attention.py:32-58": "Dynamic LSTM for Video Tagging",
    "/applications/VideoTag/models/attention_lstm/lstm_attention.py:60-83": "Dynamic LSTM Model for Sequence Classification",
    "/applications/VideoTag/models/model.py": "Python Module: PaddleVideo's VideoTag Model Handler",
    "/applications/VideoTag/models/model.py:1-36": "VideoTag Model Initialization",
    "/applications/VideoTag/models/model.py:107-139": "Model Utilities: Dataset, Weights, and Pretraining",
    "/applications/VideoTag/models/model.py:140-167": "Weight Handling Functions",
    "/applications/VideoTag/models/model.py:168-192": "ModelZoo: Managing and Retrieving Models",
    "/applications/VideoTag/models/model.py:37-69": "Custom Exceptions and Model Base Class",
    "/applications/VideoTag/models/model.py:70-105": "Subclassing Model Class for Implementation",
    "/applications/VideoTag/models/tsn/__init__.py": "Effortless TSN Import",
    "/applications/VideoTag/models/tsn/tsn.py": "TSN Model Initialization",
    "/applications/VideoTag/models/tsn/tsn.py:1-34": "TSN Model Class",
    "/applications/VideoTag/models/tsn/tsn.py:102-129": "Piecewise Learning Rate Decay Optimizer",
    "/applications/VideoTag/models/tsn/tsn.py:130-159": "Multi-Mode Model with Pre-Trained Weights",
    "/applications/VideoTag/models/tsn/tsn.py:160-165": "Prune Pretrained Parameters",
    "/applications/VideoTag/models/tsn/tsn.py:35-52": "TSN Model Initialization",
    "/applications/VideoTag/models/tsn/tsn.py:53-75": "TSN Model Input Generation",
    "/applications/VideoTag/models/tsn/tsn.py:77-101": "TSN Model Configurable Parameters",
    "/applications/VideoTag/models/tsn/tsn_res_model.py": "TSN ResNet Model in PaddlePaddle",
    "/applications/VideoTag/models/tsn/tsn_res_model.py:1-34": "TSN ResNet Model Definition",
    "/applications/VideoTag/models/tsn/tsn_res_model.py:119-142": "ResNet Model Implementation with PaddlePaddle",
    "/applications/VideoTag/models/tsn/tsn_res_model.py:143-161": "Adaptive Average Pooling and Softmax Output",
    "/applications/VideoTag/models/tsn/tsn_res_model.py:35-63": "Convolutional Layer with Batch Normalization",
    "/applications/VideoTag/models/tsn/tsn_res_model.py:65-86": "Bottleneck Block and Shortcut Functions",
    "/applications/VideoTag/models/tsn/tsn_res_model.py:87-118": "TSN ResNet Model: Conv-Batch Normalization Layers",
    "/applications/VideoTag/models/utils.py": "Comprehensive File Operations Utility",
    "/applications/VideoTag/models/utils.py:1-36": "Decompress and Download Utilities",
    "/applications/VideoTag/models/utils.py:39-47": "AttrDict Class: Access Attributes Easily",
    "/applications/VideoTag/predict.py": "PaddleVideo: Predicting Video Tags with AI",
    "/applications/VideoTag/predict.py:1-37": "Import and Initialization Script",
    "/applications/VideoTag/predict.py:117-141": "Video Tag Prediction Model",
    "/applications/VideoTag/predict.py:143-171": "Average Processing Time Logger",
    "/applications/VideoTag/predict.py:38-64": "Setting Up Logger and Parsing Arguments",
    "/applications/VideoTag/predict.py:65-87": "Video Tag Prediction Python Script",
    "/applications/VideoTag/predict.py:88-115": "Building PaddleVideo Inference Model",
    "/applications/VideoTag/reader/__init__.py": "Alphabetical Reader Registration",
    "/applications/VideoTag/reader/feature_reader.py": "DataReader: LSTM-based YouTube Dataset Processing",
    "/applications/VideoTag/reader/feature_reader.py:1-34": "Youtube-8M Dataset LSTM Feature Reader",
    "/applications/VideoTag/reader/feature_reader.py:35-64": "Feature Reader Initialization",
    "/applications/VideoTag/reader/feature_reader.py:65-80": "One-Hot Video Frame Labeling",
    "/applications/VideoTag/reader/kinetics_reader.py": "Efficient Kinetics Dataset Reader",
    "/applications/VideoTag/reader/kinetics_reader.py:1-41": "PaddleVideo's Kinetics Reader: Frame Data and License",
    "/applications/VideoTag/reader/kinetics_reader.py:122-151": "MP4 Reader Function",
    "/applications/VideoTag/reader/kinetics_reader.py:152-176": "Frames and Labels: Kinetics Reader",
    "/applications/VideoTag/reader/kinetics_reader.py:177-204": "Video Frame Loader and Error Handler",
    "/applications/VideoTag/reader/kinetics_reader.py:205-233": "Video Decoder Selector",
    "/applications/VideoTag/reader/kinetics_reader.py:234-266": "Data Augmentation for Image Processing",
    "/applications/VideoTag/reader/kinetics_reader.py:269-305": "Versatile Image and Video Processing Functions",
    "/applications/VideoTag/reader/kinetics_reader.py:306-340": "Frame Subset Selector",
    "/applications/VideoTag/reader/kinetics_reader.py:341-367": "Video Frame Duration Analyzer",
    "/applications/VideoTag/reader/kinetics_reader.py:42-79": "Kinetics Reader: MP4/PKL Dataset Access",
    "/applications/VideoTag/reader/kinetics_reader.py:80-98": "Kinetics Reader Initialization",
    "/applications/VideoTag/reader/kinetics_reader.py:99-121": "Configure Video Reader: Batch Size, File List, Random Seed",
    "/applications/VideoTag/reader/reader_utils.py": "Reader Zoo Class and Utilities",
    "/applications/VideoTag/reader/reader_utils.py:1-31": "Importing Libraries and Defining Reader Exceptions",
    "/applications/VideoTag/reader/reader_utils.py:32-70": "Video Reader Classes and Registry",
    "/applications/VideoTag/reader/reader_utils.py:71-80": "Register and Retrieve Readers Class",
    "/applications/VideoTag/train.py": "VideoTag: CUDA-Powered Model Training and Saving",
    "/applications/VideoTag/train.py:1-32": "VideoTag: Setting Up and Importing",
    "/applications/VideoTag/train.py:110-134": "Training Model Initialization",
    "/applications/VideoTag/train.py:136-161": "GPU-Aware Program Compilation",
    "/applications/VideoTag/train.py:162-181": "Batch Size and Data Loading Setup",
    "/applications/VideoTag/train.py:182-205": "Video Tagging Model Training with PaddlePaddle",
    "/applications/VideoTag/train.py:206-212": "Directory Check and Training Initiation",
    "/applications/VideoTag/train.py:33-60": "Argparse Configuration and Default Values",
    "/applications/VideoTag/train.py:61-82": "Command Line Arguments for Training Program",
    "/applications/VideoTag/train.py:83-109": "Command Line Argument Parsing",
    "/applications/VideoTag/tsn_extractor.py": "Video Inference and Feature Extraction",
    "/applications/VideoTag/tsn_extractor.py:1-37": "Python Script for PaddlePaddle Model Training",
    "/applications/VideoTag/tsn_extractor.py:120-144": "Model Weights Downloader and Inferencer",
    "/applications/VideoTag/tsn_extractor.py:145-158": "Extract and Log Features for Inference",
    "/applications/VideoTag/tsn_extractor.py:38-66": "Command-Line Arguments for Model Training",
    "/applications/VideoTag/tsn_extractor.py:67-93": "Command Line Arguments and Parsing in TsnExtractor",
    "/applications/VideoTag/tsn_extractor.py:94-118": "Infer Model Initialization",
    "/applications/VideoTag/utils/config_utils.py": "Config Handler for VideoTag",
    "/applications/VideoTag/utils/config_utils.py:1-37": "VideoTag Config Utils",
    "/applications/VideoTag/utils/config_utils.py:38-73": "YAML Config Processing and Merging Utils",
    "/applications/VideoTag/utils/config_utils.py:74-75": "Config Log Separation",
    "/applications/VideoTag/utils/train_utils.py": "Train Utils with PaddlePaddle",
    "/applications/VideoTag/utils/train_utils.py:1-32": "Logging Learning Rate in PaddlePaddle",
    "/applications/VideoTag/utils/train_utils.py:110-135": "Training Progress Tracker",
    "/applications/VideoTag/utils/train_utils.py:136-159": "Model Saving and Testing Procedure",
    "/applications/VideoTag/utils/train_utils.py:161-161": "Incomplete Code Snippet",
    "/applications/VideoTag/utils/train_utils.py:33-57": "Retrieve and Print Learning Rate\n(or)\nLearning Rate Retrieval and Display",
    "/applications/VideoTag/utils/train_utils.py:58-80": "Train Model with Dataloader Function",
    "/applications/VideoTag/utils/train_utils.py:81-109": "Epoch Loop Initialization",
    "/applications/VideoTag/utils/utility.py": "Python Utility: PaddlePaddle Checker",
    "/applications/VideoTag/utils/utility.py:1-37": "Python Utility Script",
    "/applications/VideoTag/utils/utility.py:39-66": "Compatibility and GPU Handling for PaddlePaddle",
    "/applications/VideoTag/utils/utility.py:67-70": "Check Version Installation",
    "/applications/VideoTag/videotag_test.py": "Efficient Video Tagging with PaddlePaddle",
    "/applications/VideoTag/videotag_test.py:1-34": "VideoTag Test Log Config",
    "/applications/VideoTag/videotag_test.py:112-134": "Video Tagging Inference Model",
    "/applications/VideoTag/videotag_test.py:135-154": "Extractor Setup and Timing in PaddleVideo",
    "/applications/VideoTag/videotag_test.py:156-177": "Configure and Prepare Input Data",
    "/applications/VideoTag/videotag_test.py:179-199": "Efficient Model Predictor Setup",
    "/applications/VideoTag/videotag_test.py:201-221": "DataFeeder Initialization and Model Execution",
    "/applications/VideoTag/videotag_test.py:222-238": "Inference Time Logger",
    "/applications/VideoTag/videotag_test.py:35-62": "Command-Line Argument Parser for VideoTag",
    "/applications/VideoTag/videotag_test.py:63-86": "Command-Line Arguments for Video Tagging",
    "/applications/VideoTag/videotag_test.py:87-111": "Video Classification Model with PaddlePaddle",
    "/benchmark/TimeSformer/README.md": "TimeSformer Benchmarking Guide",
    "/benchmark/TimeSformer/run_all.sh": "TimeSformer Benchmarking Script",
    "/benchmark/TimeSformer/run_all.sh:1-20": "TimeSformer Model Benchmark Setup",
    "/benchmark/TimeSformer/run_all.sh:20-47": "TimeSformer Dataset Prep & Benchmark",
    "/benchmark/TimeSformer/run_all.sh:47-57": "Multi-GPU Performance Testing for TimeSformer",
    "/benchmark/TimeSformer/run_benchmark.sh": "TimeSformer Benchmarking",
    "/benchmark/TimeSformer/run_benchmark.sh:1-28": "TimeSformer Benchmark Script",
    "/benchmark/TimeSformer/run_benchmark.sh:29-48": "Run TimeSformer Benchmark",
    "/benchmark/TimeSformer/run_benchmark.sh:49-77": "Run TimeSformer Benchmark",
    "/data/50salads/prepare_asrf_data.py": "Prepare ASRF Data for 50Salads",
    "/data/50salads/prepare_asrf_data.py:1-42": "Dataset Class ID Mapping and Argument Parsing",
    "/data/50salads/prepare_asrf_data.py:107-113": "Checks Direct Execution",
    "/data/50salads/prepare_asrf_data.py:43-74": "Setup Dataset Directory and Index Classes",
    "/data/50salads/prepare_asrf_data.py:76-106": "Preparing ASRF Data for Salad Classification",
    "/data/50salads/transform_segmentation_label.py": "Video Data Labeling Tool",
    "/data/50salads/transform_segmentation_label.py:1-34": "Label Conversion Tool",
    "/data/50salads/transform_segmentation_label.py:120-147": "Segmentation Label Writer",
    "/data/50salads/transform_segmentation_label.py:148-173": "Label File Processing and Conversion",
    "/data/50salads/transform_segmentation_label.py:174-195": "Command Line Arguments Parser for Label Conversion",
    "/data/50salads/transform_segmentation_label.py:35-55": "Action Detection and Labeling in Transform Segmentation",
    "/data/50salads/transform_segmentation_label.py:56-90": "Video Segmentation Label Conversion",
    "/data/50salads/transform_segmentation_label.py:91-119": "Generate Action Labels from Segmentation",
    "/data/ntu-rgb-d/download_dataset.sh": "Download and Extract Skeleton Data",
    "/data/ntu-rgb-d/get_raw_denoised_data.py": "NTU Dataset Data Cleaning & Denoising",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:1-38": "Setting Up Directories and Loggers",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:117-147": "Denoising Bodies by Spread Threshold",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:148-172": "Noisy Frame Filter",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:173-198": "Denoising Body Motion Data",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:200-225": "Denoising Bodies Data by Frame Length and Spread",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:226-252": "Denoising NTU RGB-D Data with Motion Integration",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:253-280": "Extract Joints and Colors from Body Data",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:281-303": "Missing Frame Detection and Update",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:305-329": "Extracting Bodies Data and Points",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:331-358": "Denoising and Extracting Data from NTU RGB-D Dataset",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:359-377": "Extracting Actor Data from NTU-RGB-D",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:378-403": "Extracting and Denoising Skeleton Data",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:39-63": "Organized Logging in NTU RGB-D Data Processing",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:405-419": "Raw Skeleton Data Processing",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:420-445": "Raw Skeleton Sequence Data Processing",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:446-471": "Data Extraction and Analysis Tool",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:64-86": "Denoising Skeleton Frames: Multiple Loggers",
    "/data/ntu-rgb-d/get_raw_denoised_data.py:87-116": "Threshold-Based Body Filtration",
    "/data/ntu-rgb-d/get_raw_skes_data.py": "NTU Skeleton Data Extractor",
    "/data/ntu-rgb-d/get_raw_skes_data.py:1-28": "Extracting Skeleton Data",
    "/data/ntu-rgb-d/get_raw_skes_data.py:101-130": "Combine Raw Skeleton Data Files",
    "/data/ntu-rgb-d/get_raw_skes_data.py:132-157": "NTU Dataset Filter & Save",
    "/data/ntu-rgb-d/get_raw_skes_data.py:29-58": "Joint Counting from .skeleton Files",
    "/data/ntu-rgb-d/get_raw_skes_data.py:59-76": "Extract and Update Body Data",
    "/data/ntu-rgb-d/get_raw_skes_data.py:77-100": "NTU Skeleton Data Retriever",
    "/data/ntu-rgb-d/seq_transformation.py": "NTU-RGB-D Dataset Transformation",
    "/data/ntu-rgb-d/seq_transformation.py:1-34": "Directory Check and Frame Filtering",
    "/data/ntu-rgb-d/seq_transformation.py:119-150": "Sequence Transformation and Encoding Functions",
    "/data/ntu-rgb-d/seq_transformation.py:151-176": "Train-Validation Split Function",
    "/data/ntu-rgb-d/seq_transformation.py:178-204": "Evaluating and Initializing Data Paths",
    "/data/ntu-rgb-d/seq_transformation.py:205-235": "Get Indices for Cross-Subject or View Evaluation",
    "/data/ntu-rgb-d/seq_transformation.py:236-263": "NTU Load and Preprocessing",
    "/data/ntu-rgb-d/seq_transformation.py:264-266": "Split and Process NTU Dataset",
    "/data/ntu-rgb-d/seq_transformation.py:35-63": "Seq Transformation: Filtering and Calculating Origin Points",
    "/data/ntu-rgb-d/seq_transformation.py:64-89": "Sequence Transformation for NTU RGB+D Dataset",
    "/data/ntu-rgb-d/seq_transformation.py:90-118": "Skeleton Alignment and Frame Count Update",
    "/deploy/cpp_infer/external-cmake/auto-log.cmake": "Including Git External Project with CMake",
    "/deploy/cpp_infer/include/postprocess_op.h": "Softmax Inplace Run for PaddleVideo",
    "/deploy/cpp_infer/include/postprocess_op.h:1-39": "Softmax In-Place Transformation",
    "/deploy/cpp_infer/include/postprocess_op.h:40-43": "Postprocess Vector Float Iterators",
    "/deploy/cpp_infer/include/preprocess_op.h": "Image Preprocessing Operations",
    "/deploy/cpp_infer/include/preprocess_op.h:1-39": "Normalize Class in PaddleVideo Library",
    "/deploy/cpp_infer/include/preprocess_op.h:40-74": "Versatile Image Preprocessing for PaddleVideo",
    "/deploy/cpp_infer/include/utility.h": "Utility Functions for PaddleVideo",
    "/deploy/cpp_infer/include/utility.h:1-40": "Utility Class for PaddleVideo",
    "/deploy/cpp_infer/include/utility.h:42-54": "Utility Functions for PaddleVideo",
    "/deploy/cpp_infer/include/video_rec.h": "VideoRecognizer: OpenCV-PaddlePaddle Integration"
}