{
    "/MANIFEST.in": "PaddleVideo Manifest Configuration",
    "/README.md": "Advanced Video Processing with PaddleVideo",
    "/README.md:1-22": "Advanced Video Processing with PaddleVideo",
    "/README.md:25-58": "PaddleVideo: Comprehensive Video Tech Course and Code",
    "/README.md:59-75": "PaddleVideo Documentation Table of Contents",
    "/README_en.md": "PaddleVideo: Deep Learning for Video Processing",
    "/README_en.md:1-20": "PaddleVideo: Industrial and Academic Video Toolset",
    "/README_en.md:20-43": "PaddleVideo: Comprehensive Video AI Platform",
    "/README_en.md:44-65": "PaddleVideo: Video Processing Deep Learning Library",
    "/__init__.py": "Licensed Python Module: PaddleVideo",
    "/applications/AbnormalActionDetection/README.md": "Abnormal Action Detection with PaddleVideo",
    "/applications/AbnormalActionDetection/README.md:1-40": "Abnormal Action Detection with PaddleVideo",
    "/applications/AbnormalActionDetection/README.md:115-153": "Video Action Detection with PaddleVideo",
    "/applications/AbnormalActionDetection/README.md:42-114": "Abnormal Action Detection Pipeline",
    "/applications/Anti-UAV/README.md": "Detect UAVs in Restricted Areas with PaddleDetection",
    "/applications/Anti-UAV/README.md:1-21": "Paddle-Anti-UAV: Detecting Flying UAVs",
    "/applications/Anti-UAV/README.md:23-36": "UAV Detection with PP-YOLO and PaddleDetection",
    "/applications/Anti-UAV/README.md:36-39": "Customize Anti-UAV Demo with PaddleVideo",
    "/applications/Anti-UAV/get_image_label.py": "Object Detection and Labeling Tool",
    "/applications/Anti-UAV/get_image_label.py:1-53": "Initialize Directories and Info",
    "/applications/Anti-UAV/get_image_label.py:102-128": "Labeling Frames by Object Presence",
    "/applications/Anti-UAV/get_image_label.py:129-151": "Bounding Box Image Labelling",
    "/applications/Anti-UAV/get_image_label.py:152-164": "Writing Annotation and Image Data to JSON Files",
    "/applications/Anti-UAV/get_image_label.py:54-77": "Object Detection and Labeling in Images",
    "/applications/Anti-UAV/get_image_label.py:78-101": "Write and Annotate Image Data",
    "/applications/BasketballAction/README.md": "Basketball Action Detection App",
    "/applications/BasketballAction/README.md:1-69": "Basketball Action Detection with PaddlePaddle",
    "/applications/BasketballAction/README.md:100-135": "Prepare, Train, and Convert ppTSM Model",
    "/applications/BasketballAction/README.md:136-163": "BasketballAction: Feature Extraction & BMN Training",
    "/applications/BasketballAction/README.md:165-206": "Preparing and Training BMN Model for Basketball Action Dataset",
    "/applications/BasketballAction/README.md:207-243": "BMN-Based Basketball Action Predictions",
    "/applications/BasketballAction/README.md:244-284": "BasketballAction LSTM Training Data Structure",
    "/applications/BasketballAction/README.md:285-319": "PaddleVideo BasketballAction: LSTM Data Formats",
    "/applications/BasketballAction/README.md:320-365": "LSTM Model Inference and Evaluation",
    "/applications/BasketballAction/README.md:366-389": "Optimized Action Detection with TSM and BMN",
    "/applications/BasketballAction/README.md:389-389": "Author List",
    "/applications/BasketballAction/README.md:70-99": "Basketball Action Dataset Structure",
    "/applications/BasketballAction/predict/action_detect/action.py": "Basketball Action Detector",
    "/applications/BasketballAction/predict/action_detect/action.py:1-44": "Basketball Action Detection with Python",
    "/applications/BasketballAction/predict/action_detect/action.py:105-133": "Video Action Detection and Feature Extraction",
    "/applications/BasketballAction/predict/action_detect/action.py:134-152": "Feature Extraction and Storage",
    "/applications/BasketballAction/predict/action_detect/action.py:153-174": "Video Feature Inference and Storage",
    "/applications/BasketballAction/predict/action_detect/action.py:45-71": "ModelPredict Class Initialization and Configuration",
    "/applications/BasketballAction/predict/action_detect/action.py:72-104": "InferModel for Action Prediction",
    "/applications/BasketballAction/predict/action_detect/logger.py": "Custom Logger for News Stripper",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py": "Audio Feature Extraction and Processing",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py:1-41": "Audio Feature Extraction Functions",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py:117-139": "Audio Feature Extraction and Preprocessing",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py:140-158": "Extract Audio Features for Wav File",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py:44-68": "Mel Spectrogram Matrix Creation",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py:69-93": "Calculate MFCC for Audio Data",
    "/applications/BasketballAction/predict/action_detect/mfcc/feature_extractor.py:94-116": "Mel Spectrogram Feature Extraction",
    "/applications/BasketballAction/predict/action_detect/mfcc/model_config.py": "Model-Based Audio Feature Extraction",
    "/applications/BasketballAction/predict/action_detect/mfcc/model_config.py:1-42": "Audio Feature Extraction Model",
    "/applications/BasketballAction/predict/action_detect/mfcc/model_config.py:43-51": "Audio Feature List Generator",
    "/applications/BasketballAction/predict/action_detect/mfcc/vgg_params.py": "VGGish Parameters for Basketball Action Detection",
    "/applications/BasketballAction/predict/action_detect/mfcc/vgg_params.py:1-29": "Global VGGish Parameters",
    "/applications/BasketballAction/predict/action_detect/mfcc/vgg_params.py:30-37": "Adam Optimizer with Epsilon Value",
    "/applications/BasketballAction/predict/action_detect/models/audio_infer.py": "Audio Inference with InferModel",
    "/applications/BasketballAction/predict/action_detect/models/audio_infer.py:1-37": "Audio Inference Model Initialization",
    "/applications/BasketballAction/predict/action_detect/models/audio_infer.py:39-69": "Audio Inference Model",
    "/applications/BasketballAction/predict/action_detect/models/audio_infer.py:71-80": "Audio Infer: Model Prediction and Time Calculation",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py": "Basketball Action BMN Inferencing",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py:1-37": "BMN Inferencing Class Initialization",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py:112-131": "Average Model Predictions for Action Detection",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py:133-155": "Inference Time for Action Detection",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py:38-63": "Basketball Action Detection Model",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py:64-86": "Action Detection Model",
    "/applications/BasketballAction/predict/action_detect/models/bmn_infer.py:87-111": "Boundary Mask Prediction",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py": "LSTM-based Basketball Action Detection",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py:1-36": "LSTM Inferencing Model in BasketballAction",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py:113-141": "LSTM Model for Action Detection",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py:142-145": "JSON Data Logging and Time Tracking",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py:37-61": "GPU-Optimized LSTM Action Detector",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py:62-90": "LSTM Basketball Action Detection",
    "/applications/BasketballAction/predict/action_detect/models/lstm_infer.py:91-112": "LSTM-Based Action Detection",
    "/applications/BasketballAction/predict/action_detect/models/pptsm_infer.py": "PPTSM Action Detection Infer Model",
    "/applications/BasketballAction/predict/action_detect/models/pptsm_infer.py:1-38": "PPTSM Action Detection Model Inference",
    "/applications/BasketballAction/predict/action_detect/models/pptsm_infer.py:40-69": "PaddleVideo Action Prediction",
    "/applications/BasketballAction/predict/action_detect/models/pptsm_infer.py:70-83": "Python Model Prediction with Timing",
    "/applications/BasketballAction/predict/action_detect/reader/__init__.py": "Alphabetical Action Readers",
    "/applications/BasketballAction/predict/action_detect/reader/audio_reader.py": "Audio Reader for YouTube-8M Dataset",
    "/applications/BasketballAction/predict/action_detect/reader/audio_reader.py:1-37": "AudioReader Class for YouTube-8M Dataset",
    "/applications/BasketballAction/predict/action_detect/reader/audio_reader.py:38-70": "Audio Reader for Multiple Models",
    "/applications/BasketballAction/predict/action_detect/reader/audio_reader.py:71-78": "Audio Batch Manager",
    "/applications/BasketballAction/predict/action_detect/reader/bmninf_reader.py": "BMNINF Reader for Basketball Action Prediction",
    "/applications/BasketballAction/predict/action_detect/reader/bmninf_reader.py:1-49": "BMNINF Reader: Generating Proposals for BMN Models",
    "/applications/BasketballAction/predict/action_detect/reader/bmninf_reader.py:106-141": "BMNINF Reader Functionality",
    "/applications/BasketballAction/predict/action_detect/reader/bmninf_reader.py:142-151": "Video Data Reader Class",
    "/applications/BasketballAction/predict/action_detect/reader/bmninf_reader.py:50-73": "BMNINF Reader Initialization",
    "/applications/BasketballAction/predict/action_detect/reader/bmninf_reader.py:74-105": "BMNInf Reader Class",
    "/applications/BasketballAction/predict/action_detect/reader/feature_reader.py": "FeatureReader: YouTube-8M Dataset Reader and Model Support",
    "/applications/BasketballAction/predict/action_detect/reader/feature_reader.py:1-33": "FeatureReader: Efficient YouTube-8M Data Reader",
    "/applications/BasketballAction/predict/action_detect/reader/feature_reader.py:35-71": "Feature Reader: Data Batches for Basketball",
    "/applications/BasketballAction/predict/action_detect/reader/feature_reader.py:72-86": "Batching Action Features Reader",
    "/applications/BasketballAction/predict/action_detect/reader/reader_utils.py": "Video Reader Utils",
    "/applications/BasketballAction/predict/action_detect/reader/reader_utils.py:1-34": "Customizable Reader Not Found Error Handling",
    "/applications/BasketballAction/predict/action_detect/reader/reader_utils.py:35-83": "Video Data Reader Zoo",
    "/applications/BasketballAction/predict/action_detect/reader/reader_utils.py:84-109": "Singleton Reader Registry",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py": "TSMINF Image Reader",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:1-37": "TSMINF Reader: Efficient JPG Video Dataset Reader",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:122-144": "Fault-Tolerant Image Reader",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:145-172": "Transformative Image Reader: Applied Action Detection",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:173-203": "Image Transformation Function",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:204-239": "Random Crop Size Generator",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:240-262": "Crop Position Calculator",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:263-298": "Random Cropped Image Group",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:300-338": "Image Preprocessing for ML Models",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:339-366": "Image Cropper and Resizer",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:38-66": "Configuring TSN Inference Reader",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:67-97": "BasketballAction Video Reader",
    "/applications/BasketballAction/predict/action_detect/reader/tsminf_reader.py:98-120": "Multithreaded Video Frame to Image Conversion",
    "/applications/BasketballAction/predict/action_detect/utils/config_utils.py": "BasketballAction Config Utils",
    "/applications/BasketballAction/predict/action_detect/utils/config_utils.py:1-46": "PaddleVideo BasketballAction Config Utils",
    "/applications/BasketballAction/predict/action_detect/utils/config_utils.py:47-79": "Config Parser and Printer",
    "/applications/BasketballAction/predict/action_detect/utils/config_utils.py:80-80": "Logger for Code Separation",
    "/applications/BasketballAction/predict/action_detect/utils/preprocess.py": "FFmpeg Functions for Video Processing",
    "/applications/BasketballAction/predict/action_detect/utils/process_result.py": "Action Detection with NMS Filtration",
    "/applications/BasketballAction/predict/action_detect/utils/process_result.py:1-39": "Non-Maximum Suppression Algorithm for Bounding Boxes",
    "/applications/BasketballAction/predict/action_detect/utils/process_result.py:108-129": "Action Detection Processing",
    "/applications/BasketballAction/predict/action_detect/utils/process_result.py:130-144": "NMS Action Result Processor",
    "/applications/BasketballAction/predict/action_detect/utils/process_result.py:40-76": "Non-Maximal Suppression for Bounding Boxes",
    "/applications/BasketballAction/predict/action_detect/utils/process_result.py:77-107": "Video Detection Filtering and Sorting",
    "/applications/BasketballAction/predict/eval.py": "Optimal IOU Threshold for Basketball",
    "/applications/BasketballAction/predict/eval.py:1-36": "Load Ground Truth Annotations (gts)",
    "/applications/BasketballAction/predict/eval.py:121-144": "IoU-based Metric Calculation for Object Detection",
    "/applications/BasketballAction/predict/eval.py:146-161": "Precision and Recall Calculator",
    "/applications/BasketballAction/predict/eval.py:162-189": "Calculate F1 Score from Predictions",
    "/applications/BasketballAction/predict/eval.py:190-218": "Video Action Detection Model Evaluation",
    "/applications/BasketballAction/predict/eval.py:219-237": "Optimal IOU Threshold for Basketball",
    "/applications/BasketballAction/predict/eval.py:37-67": "Evaluating Basketball Action Predictions",
    "/applications/BasketballAction/predict/eval.py:68-93": "Box Sorting and Conversion Function",
    "/applications/BasketballAction/predict/eval.py:94-120": "Box Evaluation Metrics Calculator",
    "/applications/BasketballAction/predict/predict.py": "Basketball Action Prediction",
    "/applications/BasketballAction/predict/predict.py:2-33": "Basketball Action Predictor",
    "/applications/BasketballAction/predict/predict.py:34-35": "Write Indented JSON to File",
    "/applications/EIVideo/EIVideo/README.MD": "CLI Guide for EIVideo Annotation Tool",
    "/applications/EIVideo/EIVideo/__init__.py": "EIVideo __init__.py: Root Paths and Constants",
    "/applications/EIVideo/EIVideo/api.py": "JSON Video Annotation Tool",
    "/applications/EIVideo/EIVideo/api.py:1-39": "Image Handling Functions",
    "/applications/EIVideo/EIVideo/api.py:102-130": "Image Resizing and Processing",
    "/applications/EIVideo/EIVideo/api.py:131-134": "JSON Overlay Dictionary Saving",
    "/applications/EIVideo/EIVideo/api.py:40-67": "PNG to JSON Image Parsing",
    "/applications/EIVideo/EIVideo/api.py:68-101": "Video Processing: Save, Load, and Annotate JSON",
    "/applications/EIVideo/EIVideo/main.py": "PaddleVideo Training with Distributed Support",
    "/applications/EIVideo/EIVideo/main.py:1-29": "PaddleVideo Training Script",
    "/applications/EIVideo/EIVideo/main.py:30-53": "Command Line Arguments for EIVideo",
    "/applications/EIVideo/EIVideo/main.py:54-82": "Command-Line Arguments for Training Control",
    "/applications/EIVideo/EIVideo/main.py:83-116": "Command-line Arguments Parser for Video Testing",
    "/applications/EIVideo/EIVideo/paddlevideo/__init__.py": "PaddleVideo Library Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/__init__.py": "Loading EIVideo Modules",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/builder.py": "Graceful Termination PaddleVideo Dataset Loader",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/builder.py:1-31": "Building Pipeline with PaddleVideo",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/builder.py:107-134": "Mix Collate Function for Stacked Batches",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/builder.py:135-151": "Signal Handler Setup for Process and Group",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/builder.py:32-80": "Dataset Loader Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/builder.py:81-106": "Paddle Dataloader Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/__init__.py": "EIVideo Image Preprocessing Pipeline",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/compose.py": "Flexible Pipeline Transformation with Compose",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/compose.py:1-31": "Compose Class for Pipeline Composition",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/compose.py:32-59": "Compose Class Sequential Transform Composition",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/compose.py:60-76": "Compose Pipeline Class",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py": "Paddle Video Image Preprocessing",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:1-43": "RandomScale\\_manet Pipeline",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:111-134": "Cropped Labels from Image",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:135-163": "Random Region Flipping Transform",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:164-198": "Custom Image Transforms for PaddlePipelines",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:199-220": "Scribble Image to Foreground Mask",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:46-75": "Resize Image Pipeline",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/pipelines/custom_transforms_f.py:76-109": "Custom Image Crop Transform",
    "/applications/EIVideo/EIVideo/paddlevideo/loader/registry.py": "Organizing PaddleVideo Functionalities with Registries",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/__init__.py": "PaddleVideo Metrics Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/base.py": "Abstract Base Metric Class for PaddleVideo's EIVideo",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/build.py": "Apache-Licensed EIVideo Metric Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/registry.py": "Registry-Based Metric Management",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py": "VOS Metric: Video Object Segmentation",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:1-38": "VOS Metric Class Registration",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:115-131": "Video Object Segmentation Metric",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:133-148": "Data Augmentation and Label Averaging",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:149-168": "Frame-wise Flipped Label Generation",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:169-192": "Average Time per Frame Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:193-211": "Frame Rate Metrics and Tensor Manipulation",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:212-224": "Tracking Sequence Numbers",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:225-238": "Range of Indices in Code",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:239-252": "VOS Metric Sequence",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:253-271": "Zip Folder and Image Mask Functions",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:272-279": "Zipping Metrics and Saving Results",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:39-67": "Video Processing Class Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:68-90": "VOS Metric Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/metrics/vos_metric.py:91-114": "Embedding Preparation for EIVideo",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/__init__.py": "PaddleVideo Model Registry",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/__init__.py:1-23": "PaddleVideo Import Script",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/__init__.py:24-27": "PaddleVideo Library Variables and Functions",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/__init__.py": "DeepLab Import Statement",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/aspp_manet.py": "ASPP-MANET Backbone Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/aspp_manet.py:1-32": "ASPP Layer Implementation in ASV Model",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/aspp_manet.py:118-124": "ASPP Model Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/aspp_manet.py:33-62": "ASPP Network Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/aspp_manet.py:63-85": "ASPP Module with Dilation and Pooling",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/aspp_manet.py:86-117": "ASPP-MANET Backbone Class Definition",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/decoder_manet.py": "Manet Decoder Layer with Conv, BatchNorm, ReLU",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/decoder_manet.py:1-30": "Manet Decoder Class",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/decoder_manet.py:31-59": "Manet Decoder Block: Conv-BN-ReLU",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/decoder_manet.py:60-65": "Manet Decoder Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py": "Static BatchNorm2d and DeepLab Backbone",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py:1-26": "Frozen Batch Normalization Layer",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py:27-61": "DeepLab Network Backbone",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/deeplab_manet.py:62-90": "DeepLab Model Creation and Evaluation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py": "ResNet-MANET Model Coding",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:1-31": "Bottleneck ResNet Definition",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:102-127": "ResNet-MANET Model Creation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:128-159": "Create ResNet Residual Block with Downsampling",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:160-191": "ResNet-MANET Backbone Model",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:192-227": "ResNet101 BatchNorm Backbone",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:230-245": "ResNet101 Model JSONizer",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:32-75": "ResNet: Efficient Video Backbone",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/backbones/resnet_manet.py:76-101": "ResNet-MANET Backbone Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/builder.py": "PaddleVideo Model Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/builder.py:1-19": "Model Registration and Building Utilities",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/builder.py:117-125": "Video Analysis Framework Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/builder.py:22-73": "Video Processing Model Components Builder",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/builder.py:74-116": "Model Builder: Configurable PaddleVideo Models",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/__init__.py": "PaddleVideo Framework: BaseSegment & Manet Definitions",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/__init__.py": "Python Segment Framework Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/base.py": "Semi-Video Segmentation Base Class",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/base.py:2-30": "Semi-Video Object Segmentation Base Class",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/base.py:31-59": "Model Initialization and Processing",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/base.py:60-95": "Abstract Step Methods for Video Modeling",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py": "Manet Stage 1 Video Segmentation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:1-26": "MANET Model Imports for Video Tasks",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:110-134": "Manet Stage 1: Initialization and Embeddings",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:136-157": "Manet Stage1: Batch Image Transformation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:158-176": "Reference Frame Embedding Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:177-195": "Save Interactive Scribble Image",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:196-216": "Scribble-Based Mask Generation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:217-234": "Manet Stage 1 Segmentation Model Iteration",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:235-254": "Temp Dictionary Creation for Labels",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:255-274": "Scribble-based Labeling for Video Annotation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:27-61": "Manet Model Definition and Implementation Plan",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:275-292": "Local and Global Map Calculation for Segmentation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:293-310": "Manet Segment Annotation Check",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:311-327": "Mask Creation and Storage in Video Model",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:328-347": "Save and Propagate Frames",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:348-365": "Manet Segmentation Model Function",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:366-383": "Dynamic SegHead Model for Video Prediction",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:384-402": "Image Segmentation Model Predictions",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:403-417": "Auto-Segmentation Framework",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:62-87": "Model Initialization and Evaluation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/framework/segment/manet_stage1.py:88-109": "Model State Check and Segmentation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py": "IntVOS: Nearest Neighbor Attention for Video Segmentation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:1-37": "Pairwise Squared L2 Distance Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:114-134": "Nearest Neighbor Feature Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:135-158": "Split and Apply Chunks",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:159-181": "Nearest Neighbor Features Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:182-201": "Nearest Neighbor Calculator",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:202-224": "Nearest Neighbor Tensor Reshaping",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:225-252": "Squared L2 Distance Calculator",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:253-278": "Nearest Neighbor Features for Video Matching",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:279-298": "Nearest Neighbor Feature Extraction",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:300-325": "Local Distance and Offset Masks Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:326-358": "Feature Extraction and Masking for IntVOS",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:359-390": "Convolutional Neural Network Architecture for Image Processing",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:38-60": "Pairwise Distance Calculation for Nearest Neighbor Attention",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:391-418": "Custom CNN Layer for Image Feature Extraction",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:421-442": "Split Separable Conv2D Layer",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:443-488": "Dynamic Segmentation Architecture",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:489-506": "IntVOS Class Definition",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:507-530": "Dynamic Semantic Segmentation Network Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:531-559": "IntVOS Model Head: Loss Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:560-588": "Split-Apply-Combine: Prop SegHead Function",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:589-622": "IntVOS: Prop Segmentation Head",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:61-83": "Nearest Neighbor Distance Calculator",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:623-646": "IntVOS: Feature Embedding Function",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:647-665": "Nearest Neighbor Features Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:667-687": "Sequence Name Check and Update",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:688-707": "Nearest Neighbor Features for Previous Frame",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:708-724": "Map Dictionaries Check",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:725-741": "InterVOS Frame Processing",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:742-763": "Video Modeling: Local Maps and Interaction Numbers",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:764-787": "Defining Int_seghead Function",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:788-813": "Local Distance Map Calculation in IntVOS",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:814-832": "Update Global Map with Nearest Neighbors",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:833-854": "Updating Global and Local Maps in Video Model",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:84-113": "Nearest Neighbor Features Calculation",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:856-878": "Dynamic Object Scene Embeddings",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/IntVOS.py:879-893": "Segmentation Prediction in IntVOS",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/heads/__init__.py": "Copyright and Imports in PaddleVideo Heads",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/registry.py": "Registry Management in PaddleVideo's EIVideo",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/registry.py:1-27": "Video Component Registry in PaddleVideo's EIVideo",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/registry.py:28-31": "Four Model Registries for Efficient Video Processing",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py": "Customizable PaddlePaddle Weight Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py:1-36": "Weight Initialization Functions",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py:131-157": "Initialize Weights with Normal Distribution",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py:158-158": "Random Weight Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py:37-66": "Truncated Normal Weight Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py:68-98": "Truncated Normal Weight Initialization",
    "/applications/EIVideo/EIVideo/paddlevideo/modeling/weight_init.py:99-130": "Truncated and Kaiming Normal Weight Init",
    "/applications/EIVideo/EIVideo/paddlevideo/tasks/__init__.py": "Importing Test Model Function",
    "/applications/EIVideo/EIVideo/paddlevideo/tasks/test.py": "Multi-Card Model Testing",
    "/applications/EIVideo/EIVideo/paddlevideo/tasks/test.py:1-31": "Model Testing without Gradient"
}