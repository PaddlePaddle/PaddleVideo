{
    "/paddlevideo/modeling/losses/yowo_loss.py:138-155": "YOLOv5 Loss Assignment",
    "/paddlevideo/modeling/losses/yowo_loss.py:156-169": "Prepare Data for Object Detection Training",
    "/paddlevideo/modeling/losses/yowo_loss.py:170-181": "Anchor Width-Height Assignments for YOWO Loss",
    "/paddlevideo/modeling/losses/yowo_loss.py:183-199": "YOLOv3 Loss Calculation in PaddleVideo",
    "/paddlevideo/modeling/losses/yowo_loss.py:199-210": "YOLO Loss Setup",
    "/paddlevideo/modeling/losses/yowo_loss.py:211-237": "GPU Variables Loss Calculation",
    "/paddlevideo/modeling/losses/yowo_loss.py:238-249": "YOWO Loss: Coordinate and Classification",
    "/paddlevideo/modeling/losses/yowo_loss.py:33-55": "Focal Loss with Alpha, Gamma, and Size Average",
    "/paddlevideo/modeling/losses/yowo_loss.py:56-87": "Yowo Loss Function: GPU Optimized and Customizable",
    "/paddlevideo/modeling/losses/yowo_loss.py:88-112": "Region Loss with Focal Loss and Threshold",
    "/paddlevideo/modeling/registry.py": "Efficient Model Registry Organization",
    "/paddlevideo/modeling/registry.py:1-27": "Model Registry Organization",
    "/paddlevideo/modeling/registry.py:28-31": "Model Registries for Paddle Video",
    "/paddlevideo/modeling/samplers/__init__.py": "Importing RandomSampler Class and Licensing Information",
    "/paddlevideo/modeling/samplers/random_sampler.py": "Random Sampler for Bbox Sampling",
    "/paddlevideo/modeling/samplers/random_sampler.py:1-28": "Random Sampling Class Definition",
    "/paddlevideo/modeling/samplers/random_sampler.py:115-139": "Random Sampler: Positive and Negative Sample Selection",
    "/paddlevideo/modeling/samplers/random_sampler.py:140-146": "Zero-Check Random Sampler",
    "/paddlevideo/modeling/samplers/random_sampler.py:29-55": "Initializing Sampler Bounding Boxes",
    "/paddlevideo/modeling/samplers/random_sampler.py:56-92": "RandomSampler: Randomly Sampling Bounding Boxes",
    "/paddlevideo/modeling/samplers/random_sampler.py:93-114": "Random Sampler for Imbalanced Classes",
    "/paddlevideo/modeling/weight_init.py": "Weight Initialization in PaddlePaddle",
    "/paddlevideo/modeling/weight_init.py:1-36": "Weight Initialization for PaddlePaddle Layers",
    "/paddlevideo/modeling/weight_init.py:131-156": "Neural Network Weight Initialization",
    "/paddlevideo/modeling/weight_init.py:157-157": "Initialize Tensor with Values",
    "/paddlevideo/modeling/weight_init.py:37-66": "Truncated Normal Weight Initialization",
    "/paddlevideo/modeling/weight_init.py:68-98": "Truncated Gaussian Tensor Weight Init",
    "/paddlevideo/modeling/weight_init.py:99-130": "Convolutional Layer Weight Initialization",
    "/paddlevideo/solver/__init__.py": "Solver Package Imports",
    "/paddlevideo/solver/custom_lr.py": "Custom Learning Rate Schedulers for PaddleVideo",
    "/paddlevideo/solver/custom_lr.py:1-31": "Custom Warmup-Cosine Decay LR Scheduler",
    "/paddlevideo/solver/custom_lr.py:107-133": "Customizable Piecewise Decay Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:134-158": "Custom Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:159-188": "Warmup Custom Learning Rate Policy",
    "/paddlevideo/solver/custom_lr.py:189-222": "Customizable Warmup Cosine Decay Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:223-249": "Custom Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:251-282": "Custom Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:283-305": "Custom Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:306-332": "Custom Warmup Adjust Decay Scheduler",
    "/paddlevideo/solver/custom_lr.py:32-54": "Cosine Annealing Learning Rate Scheduler",
    "/paddlevideo/solver/custom_lr.py:333-338": "Custom Warmup Learning Rate",
    "/paddlevideo/solver/custom_lr.py:55-80": "Custom Learning Rate Scheduler for PaddleVideo",
    "/paddlevideo/solver/custom_lr.py:81-106": "Custom Learning Rate Scheduler with Warmup and Decay",
    "/paddlevideo/solver/lr.py": "Learning Rate Scheduler Builder",
    "/paddlevideo/solver/lr.py:1-28": "Learning Rate Scheduler Builder",
    "/paddlevideo/solver/lr.py:30-52": "Custom Learning Rate Scheduler",
    "/paddlevideo/solver/optimizer.py": "Python Optimizer Configurations",
    "/paddlevideo/solver/optimizer.py:1-31": "Building PaddleVideo's Optimizer",
    "/paddlevideo/solver/optimizer.py:110-133": "Multi-Precision Learning Rate Scheduler",
    "/paddlevideo/solver/optimizer.py:134-136": "Optimizer Factory Function",
    "/paddlevideo/solver/optimizer.py:32-63": "Optimizer Configuration and Learning Rate Scheduler",
    "/paddlevideo/solver/optimizer.py:64-85": "AMP-Aware Optimizer Function",
    "/paddlevideo/solver/optimizer.py:86-109": "L1-L2 Weight Decay Optimizer Config",
    "/paddlevideo/tasks/__init__.py": "PaddleVideo Tasks Initialization",
    "/paddlevideo/tasks/test.py": "Parallel Testing with PaddlePaddle",
    "/paddlevideo/tasks/test.py:1-32": "Parallel PaddlePaddle Model Testing",
    "/paddlevideo/tasks/test.py:34-61": "Model Initialization and Configuration",
    "/paddlevideo/tasks/test.py:62-90": "Model Evaluation Loop",
    "/paddlevideo/tasks/train.py": "Distributed Training with PaddlePaddle Fleet API",
    "/paddlevideo/tasks/train.py:1-27": "Video Task Training Framework",
    "/paddlevideo/tasks/train.py:125-150": "Training PaddleVideo with Datasets and Optimizers",
    "/paddlevideo/tasks/train.py:151-172": "Training Mode Checker and Handler",
    "/paddlevideo/tasks/train.py:173-204": "Efficient Model Training with Paddle's DataParallel",
    "/paddlevideo/tasks/train.py:206-229": "Efficient AMP Training and Gradient Scaling",
    "/paddlevideo/tasks/train.py:230-253": "Gradient Descent and Backward Pass in Train.py",
    "/paddlevideo/tasks/train.py:254-277": "Gradient Clearing & Optimizer Progress",
    "/paddlevideo/tasks/train.py:278-306": "PaddleVideo Model Training and Evaluation",
    "/paddlevideo/tasks/train.py:28-51": "Training Model with PaddleVideo",
    "/paddlevideo/tasks/train.py:307-330": "Training Model in PaddleVideo",
    "/paddlevideo/tasks/train.py:331-351": "Evaluate Dataset and Log Performance Metrics",
    "/paddlevideo/tasks/train.py:352-373": "Parallel Update: PreciseBN Accuracy Check",
    "/paddlevideo/tasks/train.py:374-395": "Precise Batch Normalization and Validation in Deep Learning",
    "/paddlevideo/tasks/train.py:396-417": "Saving Best Model and Metric Logging",
    "/paddlevideo/tasks/train.py:418-426": "Periodic Model Saving",
    "/paddlevideo/tasks/train.py:52-75": "Gradient Accumulation for Distributed PaddlePaddle Training",
    "/paddlevideo/tasks/train.py:76-96": "Global Batch Size Configuration",
    "/paddlevideo/tasks/train.py:97-124": "Static Model Conversion for Training and Validation",
    "/paddlevideo/tasks/train_dali.py": "Train DALI with PaddleVideo",
    "/paddlevideo/tasks/train_dali.py:1-25": "PaddleVideo: TSN-Dali Dataset Loading and Preparation",
    "/paddlevideo/tasks/train_dali.py:117-141": "Train DALI: Batch Normalization and Saving Progress",
    "/paddlevideo/tasks/train_dali.py:143-143": "Model Training Completion Logged",
    "/paddlevideo/tasks/train_dali.py:26-63": "DALI Initialization and Training for TSN Model",
    "/paddlevideo/tasks/train_dali.py:64-88": "Model Training Pipeline with Resume and Finetuning",
    "/paddlevideo/tasks/train_dali.py:89-116": "Training Model with Backpropagation",
    "/paddlevideo/tasks/train_multigrid.py": "Training Multigrid Models in PaddleVideo",
    "/paddlevideo/tasks/train_multigrid.py:1-27": "Setting Up PaddleVideo Environment",
    "/paddlevideo/tasks/train_multigrid.py:111-146": "Multigrid Training Initialization",
    "/paddlevideo/tasks/train_multigrid.py:148-179": "Multigrid Model Training Setup",
    "/paddlevideo/tasks/train_multigrid.py:181-210": "Multi-grid Training Optimizer Construction",
    "/paddlevideo/tasks/train_multigrid.py:211-235": "Training Multigrid Models",
    "/paddlevideo/tasks/train_multigrid.py:236-262": "Adaptive Learning Rate Optimization",
    "/paddlevideo/tasks/train_multigrid.py:264-288": "Batch-wise Evaluation and Logging",
    "/paddlevideo/tasks/train_multigrid.py:28-50": "Multigrid Data Loader Construction",
    "/paddlevideo/tasks/train_multigrid.py:290-313": "Batch Normalization & Performance Logging",
    "/paddlevideo/tasks/train_multigrid.py:314-335": "Automatic Model Saving and Evaluation in PaddleVideo",
    "/paddlevideo/tasks/train_multigrid.py:51-77": "Adjust Batch Size for Multigrid Training",
    "/paddlevideo/tasks/train_multigrid.py:78-110": "Training PaddleVideo Model with DataLoaders and Parallelization",
    "/paddlevideo/utils/__init__.py": "PaddleVideo Utils: Imports, Build, Save & Load",
    "/paddlevideo/utils/build_utils.py": "Build Utility Function",
    "/paddlevideo/utils/config.py": "Config Management Utilities",
    "/paddlevideo/utils/config.py:1-34": "Config Handling and Setup",
    "/paddlevideo/utils/config.py:110-139": "Recursive Config Override Function",
    "/paddlevideo/utils/config.py:140-170": "Config Utilities: Load, Update and Display",
    "/paddlevideo/utils/config.py:171-174": "Verify and Print Config",
    "/paddlevideo/utils/config.py:35-67": "Config Parsing and Dict Visualization Functions",
    "/paddlevideo/utils/config.py:68-109": "Config Manipulation Functions",
    "/paddlevideo/utils/dist_utils.py": "Distributed Computing Utilities",
    "/paddlevideo/utils/logger.py": "Colorful Logging for PaddleVideo",
    "/paddlevideo/utils/multigrid/__init__.py": "Multigrid Scheduler Imports",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py": "Batch Normalization for PyTorch Multigrid",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py:1-36": "Sub-BatchNorm Helper",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py:109-135": "Batch Normalization Helper Class",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py:136-142": "BatchNorm Multiplication and Normalization",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py:37-64": "Multi-Split Batch Normalization",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py:65-85": "BatchNorm Layer Initialization",
    "/paddlevideo/utils/multigrid/batchnorm_helper.py:86-108": "BatchNorm3D Instantiation and Aggregation",
    "/paddlevideo/utils/multigrid/interval_helper.py": "Multigrid Evaluation Function",
    "/paddlevideo/utils/multigrid/multigrid.py": "Multigrid Schedule Management",
    "/paddlevideo/utils/multigrid/multigrid.py:1-25": "Multigrid Scheduling Class Definition",
    "/paddlevideo/utils/multigrid/multigrid.py:116-141": "Multi-Grid Training Schedule Calculator",
    "/paddlevideo/utils/multigrid/multigrid.py:142-169": "Multigrid Training Schedule in PaddleVideo",
    "/paddlevideo/utils/multigrid/multigrid.py:171-191": "Multigrid Iteration Calculator",
    "/paddlevideo/utils/multigrid/multigrid.py:193-224": "Multigrid Learning Rate Scheduler",
    "/paddlevideo/utils/multigrid/multigrid.py:225-233": "Schedule-Based Shape Iterator",
    "/paddlevideo/utils/multigrid/multigrid.py:26-50": "Multi-Grid Training Schedule Initialization",
    "/paddlevideo/utils/multigrid/multigrid.py:51-74": "Long Cycle Shape Update Function",
    "/paddlevideo/utils/multigrid/multigrid.py:75-94": "Multigrid Configuration and Update Settings",
    "/paddlevideo/utils/multigrid/multigrid.py:95-115": "Multigrid Configuration Checker",
    "/paddlevideo/utils/multigrid/save_load_helper.py": "Ensuring State Dict Consistency in PaddleVideo",
    "/paddlevideo/utils/multigrid/save_load_helper.py:1-31": "Converting Sub-BN to Normal BN Parameters",
    "/paddlevideo/utils/multigrid/save_load_helper.py:104-135": "Compare Optimizer and Model Parameters",
    "/paddlevideo/utils/multigrid/save_load_helper.py:136-163": "Update BN/Sub-BN Key Names",
    "/paddlevideo/utils/multigrid/save_load_helper.py:164-190": "Save and Load Helper Functions",
    "/paddlevideo/utils/multigrid/save_load_helper.py:191-216": "Checkpoint Loader and Shape Comparison",
    "/paddlevideo/utils/multigrid/save_load_helper.py:217-237": "Loading Weights and Optimizer State: SaveLoadHelper",
    "/paddlevideo/utils/multigrid/save_load_helper.py:32-58": "Sub-BN Conversion for Checkpoint Loading",
    "/paddlevideo/utils/multigrid/save_load_helper.py:59-81": "Shape Comparison and Concatenation",
    "/paddlevideo/utils/multigrid/save_load_helper.py:82-103": "Modify Optimizer State Dict Keys",
    "/paddlevideo/utils/multigrid/short_sampler.py": "Efficient Distributed Video Data Loading",
    "/paddlevideo/utils/multigrid/short_sampler.py:1-28": "Distributed ShortSampler for Dynamic Batch Sizing",
    "/paddlevideo/utils/multigrid/short_sampler.py:103-130": "Dynamic Batch Sampler",
    "/paddlevideo/utils/multigrid/short_sampler.py:131-146": "Efficient Video Sampler for PaddleVideo",
    "/paddlevideo/utils/multigrid/short_sampler.py:29-51": "MultiGrid Initializer",
    "/paddlevideo/utils/multigrid/short_sampler.py:52-79": "Multigrid Sampler Initialization",
    "/paddlevideo/utils/multigrid/short_sampler.py:80-102": "Balanced Subsampling with Modulo Handling",
    "/paddlevideo/utils/precise_bn.py": "Precise Batch Normalization Acceleration",
    "/paddlevideo/utils/precise_bn.py:1-34": "Precise Batch Normalization: Accuracy and Efficiency Boost",
    "/paddlevideo/utils/precise_bn.py:35-56": "Precise BN Stats Recomputation",
    "/paddlevideo/utils/precise_bn.py:58-83": "Accurate Batch Normalization Update",
    "/paddlevideo/utils/precise_bn.py:84-94": "Accurate Batch Normalization Update",
    "/paddlevideo/utils/profiler.py": "PaddleVideo Profiler: Performance Analysis and Optimization",
    "/paddlevideo/utils/profiler.py:1-29": "PaddleVideo Profiler Module Init",
    "/paddlevideo/utils/profiler.py:106-128": "Profiler Object Initialization",
    "/paddlevideo/utils/profiler.py:30-53": "Profiler Options Class",
    "/paddlevideo/utils/profiler.py:54-77": "Python Profiler: Option Parser and Batch Range",
    "/paddlevideo/utils/profiler.py:79-105": "Operator-Level Timing Profiler with PaddlePaddle",
    "/paddlevideo/utils/record.py": "Efficient Training Metrics Recording",
    "/paddlevideo/utils/record.py:1-32": "Record Builder and Logger Setup",
    "/paddlevideo/utils/record.py:106-136": "Batch Logging and Metrics Calculation",
    "/paddlevideo/utils/record.py:137-155": "Training Progress Logger",
    "/paddlevideo/utils/record.py:157-168": "Mean Metric String Calculation and Formatting",
    "/paddlevideo/utils/record.py:33-48": "Averaging Metrics in PaddleVideo Record",
    "/paddlevideo/utils/record.py:49-65": "Conditional Metric Addition",
    "/paddlevideo/utils/record.py:67-105": "Record Dictionary with AverageMeter Objects",
    "/paddlevideo/utils/registry.py": "Registry Class for Object Mapping and Registration",
    "/paddlevideo/utils/save_load.py": "Model Save and Load in PaddlePaddle",
    "/paddlevideo/utils/save_load.py:1-30": "Swin Model Transfer in PaddleVideo",
    "/paddlevideo/utils/save_load.py:106-126": "Adjusting Positional Embeddings for Patch Count",
    "/paddlevideo/utils/save_load.py:127-147": "Loading Weights: Model Shape Check and Progress Bar",
    "/paddlevideo/utils/save_load.py:148-172": "ResNet18 Weight Adaptation",
    "/paddlevideo/utils/save_load.py:173-197": "Dynamic Weights Loading with Progress Updates",
    "/paddlevideo/utils/save_load.py:198-226": "Load Pre-trained Model Parameters",
    "/paddlevideo/utils/save_load.py:227-248": "Model Weights and Dictionary Loading",
    "/paddlevideo/utils/save_load.py:249-282": "Save and Load Utilities",
    "/paddlevideo/utils/save_load.py:283-289": "Save and Load Functions with Paddle",
    "/paddlevideo/utils/save_load.py:31-61": "Ensuring Model State Consistency",
    "/paddlevideo/utils/save_load.py:62-82": "Loading Weights for Position Bias",
    "/paddlevideo/utils/save_load.py:83-105": "Model Parameter Transformation for ViT Models",
    "/paddlevideo/version.py": "PaddleVideo Version Info",
    "/run.sh": "PaddlePaddle: Train, Test, Export, Infer",
    "/run.sh:1-18": "Distributed CUDA Training with 8 GPUs",
    "/run.sh:20-36": "PaddlePaddle Video Recognition Training Script",
    "/run.sh:38-54": "Distributed Deep Learning Training with PaddlePaddle",
    "/run.sh:54-74": "Distributed Deep Learning Training and Testing Script",
    "/run.sh:76-89": "PaddleVideo Test and Inference Guide",
    "/setup.py": "PaddleVideo: Python Video Understanding Utility",
    "/setup.py:1-31": "PaddleVideo Setup with Setuptools",
    "/setup.py:32-53": "Setting Up PaddleVideo Package",
    "/setup.py:54-56": "Python 3.7 Setup Metadata Classification",
    "/test_tipc/README.md": "TIPC-Enabled PaddleVideo Tutorial",
    "/test_tipc/README.md:114-126": "Clear and Consistent Naming Conventions for PaddleVideo",
    "/test_tipc/README.md:127-133": "PaddleVideo Testing: Comprehensive Cases and Functionalities",
    "/test_tipc/README.md:2-30": "PaddleVideo TIPC Overview",
    "/test_tipc/README.md:31-55": "Test Tool for PaddleVideo: Supported Models and Configurations",
    "/test_tipc/README.md:56-76": "Directory Structure and Testing Scripts of PaddleVideo test_tipc Project",
    "/test_tipc/README.md:77-112": "Simplified TIPC Testing Process",
    "/test_tipc/benchmark_train.sh": "PaddleVideo Benchmark Training",
    "/test_tipc/benchmark_train.sh:1-42": "PaddlePaddle GPU Benchmark Training Script",
    "/test_tipc/benchmark_train.sh:124-158": "Benchmark/Train Environment Modification",
    "/test_tipc/benchmark_train.sh:159-197": "Benchmark Configuration Code Snippet",
    "/test_tipc/benchmark_train.sh:198-220": "Batch Size and Precision Training: PaddleVideo Benchmark",
    "/test_tipc/benchmark_train.sh:221-234": "Directory Creation and Logging Setup",
    "/test_tipc/benchmark_train.sh:235-253": "Non-Profiled Script Execution",
    "/test_tipc/benchmark_train.sh:255-274": "Python Log File Analysis Script",
    "/test_tipc/benchmark_train.sh:275-288": "Speeding Up TimeSformer Training",
    "/test_tipc/benchmark_train.sh:289-308": "Benchmark Training Script",
    "/test_tipc/benchmark_train.sh:309-318": "Benchmark Training Iteration",
    "/test_tipc/benchmark_train.sh:43-86": "Manipulating Configs for PaddleVideo",
    "/test_tipc/benchmark_train.sh:87-123": "Training Model with Parameters",
    "/test_tipc/common_func.sh": "Common Functions for Parsing and Status Checks",
    "/test_tipc/common_func.sh:1-58": "Parameter Parsing and Status Functions",
    "/test_tipc/common_func.sh:59-66": "Status Logging Function",
    "/test_tipc/compare_results.py": "Log Parser and Comparer",
    "/test_tipc/compare_results.py:1-40": "Command-line Parser and Shell Executor",
    "/test_tipc/compare_results.py:119-146": "Validate Code Predictions with Ground Truth",
    "/test_tipc/compare_results.py:147-170": "Compare and Validate Results",
    "/test_tipc/compare_results.py:171-171": "Filename Formatting for Comparison",
    "/test_tipc/compare_results.py:42-64": "Python/C++ Inference Result Parser",
    "/test_tipc/compare_results.py:65-89": "Parse Log File Function",
    "/test_tipc/compare_results.py:90-118": "Three Functions for Ground Truth Data Processing",
    "/test_tipc/extract_loss.py": "Extract and Calculate Loss Expressions",
    "/test_tipc/extract_loss.py:1-28": "Loss Expression Parser",
    "/test_tipc/extract_loss.py:29-71": "Regular Expression Parsing and Validation Functions",
    "/test_tipc/extract_loss.py:74-102": "Function for Tuples Calculation and Printing",
    "/test_tipc/prepare.sh": "Preparing Video Detection Models in PaddlePaddle",
    "/test_tipc/prepare.sh:1-44": "Prepare Environment for PaddlePaddle Video Object Detection",
    "/test_tipc/prepare.sh:106-127": "Conditional Data Download and Extraction",
    "/test_tipc/prepare.sh:128-149": "Model Weights and Data Preprocessing",
    "/test_tipc/prepare.sh:150-168": "Pretraining with Whole Data",
    "/test_tipc/prepare.sh:169-188": "Download Model Weights and Data",
    "/test_tipc/prepare.sh:189-205": "TSM Data Preparation Script",
    "/test_tipc/prepare.sh:206-223": "Model-Specific Data Preparation Script",
    "/test_tipc/prepare.sh:224-241": "Preparing AttentionLSTM Model Environment",
    "/test_tipc/prepare.sh:242-261": "Preparing Kinetics400 for PaddleVideo",
    "/test_tipc/prepare.sh:262-285": "Handling Model Pretraining Scenarios",
    "/test_tipc/prepare.sh:286-308": "Model-Specific Data Download and Preparation",
    "/test_tipc/prepare.sh:309-329": "Model-Specific Pretrained File Downloads",
    "/test_tipc/prepare.sh:329-345": "Prepare Dataset for AttentionLSTM Model",
    "/test_tipc/prepare.sh:346-370": "Model-Based Actions in TIPC Preparation",
    "/test_tipc/prepare.sh:371-385": "Model-Based Weights Download",
    "/test_tipc/prepare.sh:386-406": "Script Downloads Pre-trained Model Weights",
    "/test_tipc/prepare.sh:407-427": "Model Name Check and Download",
    "/test_tipc/prepare.sh:428-446": "PaddleVideo Model Weights Download",
    "/test_tipc/prepare.sh:447-468": "Model-Specific Data Downloads",
    "/test_tipc/prepare.sh:45-67": "Conditional Download Tasks for Models and Datasets",
    "/test_tipc/prepare.sh:469-497": "Model-Specific Data Preparation",
    "/test_tipc/prepare.sh:498-520": "Prepare Inference Models",
    "/test_tipc/prepare.sh:521-552": "Model Check and Download for TIPC",
    "/test_tipc/prepare.sh:553-577": "Mode-Based Actions in TIPC Script",
    "/test_tipc/prepare.sh:68-87": "Model-Specific Data Download Script",
    "/test_tipc/prepare.sh:88-105": "Preparing Data and Weights for Models",
    "/test_tipc/test_inference_cpp.sh": "PaddleVideo Inference Testing",
    "/test_tipc/test_inference_cpp.sh:1-29": "Bash Script for C++ Inference Parser",
    "/test_tipc/test_inference_cpp.sh:102-112": "Inference CPP Script Execution",
    "/test_tipc/test_inference_cpp.sh:114-146": "Hardware Support and OpenCV Setup",
    "/test_tipc/test_inference_cpp.sh:147-178": "Building PaddleVideo Libraries and Demo",
    "/test_tipc/test_inference_cpp.sh:179-225": "Configuring PaddleVideo and Running Inference Tests",
    "/test_tipc/test_inference_cpp.sh:226-228": "Executing C++ Inference Commands",
    "/test_tipc/test_inference_cpp.sh:30-58": "PaddleVideo C++ Inference Setup",
    "/test_tipc/test_inference_cpp.sh:59-72": "Skipping MKLDNN Quantized Tests",
    "/test_tipc/test_inference_cpp.sh:73-85": "Inference Script Configuration and Execution",
    "/test_tipc/test_inference_cpp.sh:86-101": "TRT Precision Combinations Test",
    "/test_tipc/test_paddle2onnx.sh": "Automating Paddle2ONNX Conversion in test_tipc/test_paddle2onnx.sh",
    "/test_tipc/test_paddle2onnx.sh:1-32": "Paddle2Onnx: Extracting Model Details from Log Files",
    "/test_tipc/test_paddle2onnx.sh:33-58": "Setting Up Paddle2Onnx Inference",
    "/test_tipc/test_paddle2onnx.sh:59-73": "Paddle2Onnx Conversion and Inference Logging",
    "/test_tipc/test_paddle2onnx.sh:74-81": "Test: Export Count, IFS, and Echo Message",
    "/test_tipc/test_ptq_inference_python.sh": "PaddleVideo GPU/CPU Inference Test",
    "/test_tipc/test_ptq_inference_python.sh:1-29": "Python Shell Script for Model Inference",
    "/test_tipc/test_ptq_inference_python.sh:113-129": "Model Export Preparation and Check",
    "/test_tipc/test_ptq_inference_python.sh:130-132": "Python Inference Calling",
    "/test_tipc/test_ptq_inference_python.sh:30-52": "Retrieving Config Values for Trainer and Inference",
    "/test_tipc/test_ptq_inference_python.sh:55-74": "Python-Powered GPU/CPU Inference Logging",
    "/test_tipc/test_ptq_inference_python.sh:74-88": "Looped GPU Inference Testing",
    "/test_tipc/test_ptq_inference_python.sh:89-112": "Hardware-Optimized PaddleVideo Inference",
    "/test_tipc/test_serving_infer_cpp.sh": "Streamline Bash Model Serving with GPU",
    "/test_tipc/test_serving_infer_cpp.sh:1-28": "Custom Bash Script for Configuration and Image Classification",
    "/test_tipc/test_serving_infer_cpp.sh:103-107": "Incrementing \"Count\" in Web Service Test",
    "/test_tipc/test_serving_infer_cpp.sh:29-54": "Initialize Model and Config Files",
    "/test_tipc/test_serving_infer_cpp.sh:55-73": "Setup C++ Server and Client on GPU",
    "/test_tipc/test_serving_infer_cpp.sh:73-100": "PaddlePaddle Serving Server Test",
    "/test_tipc/test_serving_infer_python.sh": "Automating Model Serving with Bash",
    "/test_tipc/test_serving_infer_python.sh:1-29": "Bash Script Configures Model Inference Environment",
    "/test_tipc/test_serving_infer_python.sh:30-54": "Model Serving Code Execution",
    "/test_tipc/test_serving_infer_python.sh:56-77": "Automated Web Service Deployment with Python",
    "/test_tipc/test_serving_infer_python.sh:78-105": "CUDA Test Environment Setup and Cleanup",
    "/test_tipc/test_train_dy2static_python.sh": "Dygraph vs Dy2Static Model Comparison",
    "/test_tipc/test_train_dy2static_python.sh:1-30": "Configure and Initialize Environment",
    "/test_tipc/test_train_dy2static_python.sh:31-57": "Configure, Run and Analyze Dygraph and Dy2Static Models",
    "/test_tipc/test_train_dy2static_python.sh:58-73": "Diff and Log Comparison of Models",
    "/test_tipc/test_train_inference_python.sh": "PaddleVideo Model Optimizer",
    "/test_tipc/test_train_inference_python.sh:1-30": "Parse Training Parameters",
    "/test_tipc/test_train_inference_python.sh:105-125": "Configuration Extraction for Test and Train",
    "/test_tipc/test_train_inference_python.sh:126-157": "Inference Code Configuration & Logging",
    "/test_tipc/test_train_inference_python.sh:158-170": "Iterating Over Precision Values",
    "/test_tipc/test_train_inference_python.sh:171-181": "Automating Test Loop with Python Script",
    "/test_tipc/test_train_inference_python.sh:182-198": "Optimizing Inference Parameters",
    "/test_tipc/test_train_inference_python.sh:200-212": "Inference Parameter Configuration",
    "/test_tipc/test_train_inference_python.sh:214-243": "Inference Model Testing with PaddleVideo",
    "/test_tipc/test_train_inference_python.sh:244-274": "Multi-GPU Inference Loop"
}