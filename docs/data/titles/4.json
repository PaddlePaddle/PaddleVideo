{
    "/applications/T2VLAD/utils/util.py:166-181": "Determining Input-Output Dimensions for Expert Types and Temporal Methods",
    "/applications/T2VLAD/utils/util.py:182-202": "Dimensional Assignment for Experts: Util.py 182-202",
    "/applications/T2VLAD/utils/util.py:203-226": "Configuring Expert Dimensions for T2VLAD",
    "/applications/T2VLAD/utils/util.py:227-258": "Dimensionality Adjustment and Tensor Utilities",
    "/applications/T2VLAD/utils/util.py:260-284": "Normalize and Convert Image Tensors to Numpy Array",
    "/applications/T2VLAD/utils/util.py:285-321": "Utility Functions in util.py",
    "/applications/T2VLAD/utils/util.py:323-327": "Create Directory If Non-Existent",
    "/applications/T2VLAD/utils/util.py:51-76": "Multifunctional Memory, Dictionary, and Expert Categorization",
    "/applications/T2VLAD/utils/util.py:77-103": "Temporal Expert Management and Utilities",
    "/applications/TableTennis/ActionRecognition/README.md": "Table Tennis Action Recognition with VideoSwinTransformer",
    "/applications/TableTennis/ActionRecognition/README.md:1-43": "Table Tennis Action Recognition with VideoSwinTransformer",
    "/applications/TableTennis/ActionRecognition/README.md:44-66": "TableTennis Action Recognition with VideoSwin",
    "/applications/TableTennis/ActionRecognition/README.md:68-98": "Visualizing Predictions in Table Tennis Action Recognition",
    "/applications/TableTennis/datasets/script/submission_format_transfer.py": "JSON Table Tennis Data Formatter",
    "/applications/TableTennis/datasets/script/submission_format_transfer.py:1-49": "JSON Frame Rate Conversion and Formatting",
    "/applications/TableTennis/datasets/script/submission_format_transfer.py:50-64": "Table Tennis Submission Format",
    "/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py": "TableTennis Video Inferencer",
    "/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py:1-50": "BMN Model Loader for Baidu Cloud",
    "/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py:52-84": "Video Feature Extraction and Bmn Prediction",
    "/applications/TableTennis/extractor/extract_bmn_for_tabletennis.py:85-93": "JSON Inference Results Writer",
    "/applications/TableTennis/fix_bad_label.py": "Fix Labels in Table Tennis App",
    "/applications/TableTennis/get_instance_for_bmn.py": "BMN Model Ground Truth Data for Table Tennis",
    "/applications/TableTennis/get_instance_for_bmn.py:1-48": "BMN Model Ground Truth Generation",
    "/applications/TableTennis/get_instance_for_bmn.py:109-134": "Segmenting and Processing Actions List for BMN",
    "/applications/TableTennis/get_instance_for_bmn.py:135-154": "Randomized Video Segment Selection",
    "/applications/TableTennis/get_instance_for_bmn.py:155-182": "Video Data Segmentation and Annotation",
    "/applications/TableTennis/get_instance_for_bmn.py:183-207": "Video Feature Extraction and Parsing",
    "/applications/TableTennis/get_instance_for_bmn.py:208-227": "Table Tennis Dataset Processing and Saving",
    "/applications/TableTennis/get_instance_for_bmn.py:49-74": "Video Action Extraction Algorithm",
    "/applications/TableTennis/get_instance_for_bmn.py:75-108": "Combile GTS Segments",
    "/applications/TableTennis/gts_format_transfer.py": "JSON Format Converter",
    "/applications/TableTennis/predict/action_detect/action.py": "Baidu Cloud Action Detection Script",
    "/applications/TableTennis/predict/action_detect/action.py:1-48": "Python Action Detection with Baidu Cloud",
    "/applications/TableTennis/predict/action_detect/action.py:109-136": "Video Classification and Feature Extraction Model",
    "/applications/TableTennis/predict/action_detect/action.py:137-158": "Extracting Image and Audio Features",
    "/applications/TableTennis/predict/action_detect/action.py:159-185": "Action Detection Model Inference",
    "/applications/TableTennis/predict/action_detect/action.py:186-186": "File Data Writing",
    "/applications/TableTennis/predict/action_detect/action.py:49-76": "ModelPredict Class Initialization and Configuration",
    "/applications/TableTennis/predict/action_detect/action.py:77-108": "Action Detection via Multimodal Feature Extraction",
    "/applications/TableTennis/predict/action_detect/logger.py": "Custom Logger for Action Detection",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py": "Audio Features for Table Tennis Prediction",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:1-39": "Audio Feature Extraction in TableTennis App",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:113-137": "Mel Spectrogram Conversion and Wav Data Processing",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:138-158": "Table Tennis Audio Feature Extraction",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:160-183": "MFCC Extraction with VGG-16",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:40-70": "Audio Feature Extraction with MFCCs",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:71-91": "MFCC Feature Extraction for Speech Processing",
    "/applications/TableTennis/predict/action_detect/mfcc/feature_extractor.py:92-112": "Generate Spectrogram from Audio Data",
    "/applications/TableTennis/predict/action_detect/mfcc/model_config.py": "Audio Feature Extraction Model",
    "/applications/TableTennis/predict/action_detect/mfcc/vgg_params.py": "Global VGGish Parameters for Action Detection",
    "/applications/TableTennis/predict/action_detect/models/audio_infer.py": "Audio Inference with PaddleVideo",
    "/applications/TableTennis/predict/action_detect/models/audio_infer.py:1-37": "Audio Model Inference Initialization",
    "/applications/TableTennis/predict/action_detect/models/audio_infer.py:39-67": "Audio Inference Class with PaddleVideo",
    "/applications/TableTennis/predict/action_detect/models/audio_infer.py:69-78": "Audio Inferencing and Prediction",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py": "GPU-Optimized Action Detection",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py:1-39": "BMN Infer Model Class",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py:113-135": "Running Average Window Predictions",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py:137-164": "BMN Infer Model Prediction",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py:40-65": "Inference Model Setup and Generation",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py:66-87": "Boundary Proposition Generator",
    "/applications/TableTennis/predict/action_detect/models/bmn_infer.py:88-112": "Boundary-Based Prediction Model",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py": "LSTM-Based Table Tennis Action Detection",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py:1-38": "LSTM Action Detection Model Inferencing",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py:113-136": "LSTM-Based Table Tennis Action Detection",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py:138-158": "LSTM Predicts Table Tennis Action",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py:40-62": "LSTM Inferencing Setup",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py:63-92": "Table Tennis Action Detection Model",
    "/applications/TableTennis/predict/action_detect/models/lstm_infer.py:93-111": "LSTM Action Detection Inference",
    "/applications/TableTennis/predict/action_detect/models/pptsm_infer.py": "PPTSM Inference with PaddlePaddle",
    "/applications/TableTennis/predict/action_detect/models/pptsm_infer.py:1-38": "Initialize PPTSM InferModel with PaddlePaddle",
    "/applications/TableTennis/predict/action_detect/models/pptsm_infer.py:40-68": "InferModel Video Frame Inference",
    "/applications/TableTennis/predict/action_detect/models/pptsm_infer.py:69-77": "Efficient Image Inference and Prediction",
    "/applications/TableTennis/predict/action_detect/reader/__init__.py": "Alphabetical Reader Registration",
    "/applications/TableTennis/predict/action_detect/reader/bmninf_reader.py": "BMNINF Reader for Table Tennis",
    "/applications/TableTennis/predict/action_detect/reader/bmninf_reader.py:1-49": "BMNINF Reader for PaddleVideo",
    "/applications/TableTennis/predict/action_detect/reader/bmninf_reader.py:104-133": "CTCN Model Reader for Table Tennis Action Detection",
    "/applications/TableTennis/predict/action_detect/reader/bmninf_reader.py:134-154": "Inference Reader: Iterating and Yielding Batches",
    "/applications/TableTennis/predict/action_detect/reader/bmninf_reader.py:50-72": "BMNINF Reader for Table Tennis",
    "/applications/TableTennis/predict/action_detect/reader/bmninf_reader.py:73-103": "Video Analysis Dataset Creation Code",
    "/applications/TableTennis/predict/action_detect/reader/feature_reader.py": "Table Tennis Action Detection Reader",
    "/applications/TableTennis/predict/action_detect/reader/feature_reader.py:1-34": "YouTube-8M Dataset Feature Reader",
    "/applications/TableTennis/predict/action_detect/reader/feature_reader.py:36-71": "Table Tennis Action Detector Feature Reader",
    "/applications/TableTennis/predict/action_detect/reader/feature_reader.py:72-91": "Feature Extractor: Table Tennis Action Prediction",
    "/applications/TableTennis/predict/action_detect/reader/reader_utils.py": "Handling Errors in TableTennis Reader",
    "/applications/TableTennis/predict/action_detect/reader/reader_utils.py:1-33": "Reader Error Handling in PaddleVideo TableTennis",
    "/applications/TableTennis/predict/action_detect/reader/reader_utils.py:34-81": "Video Reader Classes and Registry",
    "/applications/TableTennis/predict/action_detect/reader/reader_utils.py:82-107": "Singleton Reader Registration Utilities",
    "/applications/TableTennis/predict/action_detect/utils/config_utils.py": "Config Utilities for TableTennis",
    "/applications/TableTennis/predict/action_detect/utils/config_utils.py:1-47": "Config Utils for TableTennis",
    "/applications/TableTennis/predict/action_detect/utils/config_utils.py:48-80": "Config Utils for AttrDict Manipulation",
    "/applications/TableTennis/predict/action_detect/utils/config_utils.py:81-81": "Context Changer Logging",
    "/applications/TableTennis/predict/action_detect/utils/preprocess.py": "Preprocess.py: Video, Audio, Image Toolkit",
    "/applications/TableTennis/predict/action_detect/utils/process_result.py": "One-Dimensional NMS for Video Analysis",
    "/applications/TableTennis/predict/action_detect/utils/process_result.py:1-39": "Video Action Detection Result Calculator",
    "/applications/TableTennis/predict/action_detect/utils/process_result.py:111-136": "Sorting Prop Filter Timestamps for Action Detection",
    "/applications/TableTennis/predict/action_detect/utils/process_result.py:137-155": "Non-Max Suppression Result Function",
    "/applications/TableTennis/predict/action_detect/utils/process_result.py:42-78": "Non-Maximal Suppression for Bounding Boxes",
    "/applications/TableTennis/predict/action_detect/utils/process_result.py:79-110": "Efficient Video Property Processing and Classification",
    "/applications/TableTennis/predict/eval.py": "Optimized Table Tennis Predictions",
    "/applications/TableTennis/predict/eval.py:1-41": "Loading and Processing Ground Truth Data",
    "/applications/TableTennis/predict/eval.py:109-142": "Evaluating Model Performance on Video Frames",
    "/applications/TableTennis/predict/eval.py:145-166": "IoU-based Box Evaluation",
    "/applications/TableTennis/predict/eval.py:167-186": "Precision-Recall Calculator",
    "/applications/TableTennis/predict/eval.py:187-210": "Table Tennis Prediction Model Evaluation",
    "/applications/TableTennis/predict/eval.py:212-239": "Table Tennis Video Analysis Model Evaluator",
    "/applications/TableTennis/predict/eval.py:240-270": "Table Tennis Prediction Evaluation",
    "/applications/TableTennis/predict/eval.py:271-287": "Optimizing IOU and Scores for F1 Evaluation",
    "/applications/TableTennis/predict/eval.py:42-73": "Computer Vision Interval Union: Filter Proposals",
    "/applications/TableTennis/predict/eval.py:74-108": "Converters for Boxes and Labels",
    "/applications/TableTennis/predict/predict.py": "TableTennis Video Prediction",
    "/applications/TableTennis/predict/predict.py:1-35": "Video Prediction Setup: PaddleVideo's TableTennis",
    "/applications/TableTennis/predict/predict.py:36-36": "Saving Data to File",
    "/applications/TableTennis/val_split.py": "JSON Split for Validation and Training Sets",
    "/applications/VideoQualityAssessment/README.md": "PaddlePaddle 2.1 Video Quality Assessment Model",
    "/applications/VideoQualityAssessment/README.md:1-58": "Video Quality Assessment Model with PaddlePaddle",
    "/applications/VideoQualityAssessment/README.md:101-144": "Epoch Analysis and Fine-tuning",
    "/applications/VideoQualityAssessment/README.md:145-179": "PaddleVideo: TSM Regression for Video Quality",
    "/applications/VideoQualityAssessment/README.md:181-189": "Video Quality Assessment with SROCC and PLCC",
    "/applications/VideoQualityAssessment/README.md:59-98": "Multigpu Distributed Training with PaddleVideo",
    "/applications/VideoQualityAssessment/main.py": "Video Quality Assessment Training and Testing with PaddleVideo",
    "/applications/VideoQualityAssessment/main.py:1-30": "Training Models with PaddleVideo",
    "/applications/VideoQualityAssessment/main.py:31-52": "Command-Line Arguments for Video Quality Assessment",
    "/applications/VideoQualityAssessment/main.py:53-88": "Command Line Args for Model Training and Testing",
    "/applications/VideoQualityAssessment/paddlevideo/__init__.py": "PaddleVideo License and Import",
    "/applications/VideoQualityAssessment/paddlevideo/loader/__init__.py": "Video Dataset Loader for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/loader/builder.py": "PaddleVideo Dataset Builder and Loader",
    "/applications/VideoQualityAssessment/paddlevideo/loader/builder.py:1-33": "Video Pipeline Builder in Python",
    "/applications/VideoQualityAssessment/paddlevideo/loader/builder.py:34-74": "Video Quality Assessment Dataset and Dataloader Builder",
    "/applications/VideoQualityAssessment/paddlevideo/loader/builder.py:75-97": "DistributedBatchSampler Creation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/builder.py:99-126": "Create and Manage DataLoaders with Signal Handlers",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/__init__.py": "Python Video Dataset Module",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/base.py": "Video Dataset Loader Class",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/base.py:1-34": "Base Dataset Class for Custom Loaders",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/base.py:36-62": "Video Index Loader Class",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/base.py:63-83": "Dataset Class with Train-Test Methods",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/frame_rec.py": "Frame-Rec Dataset Loader for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/frame_rec.py:1-32": "FrameRecDataset: PaddleVideo's Action Recognition Dataset",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/frame_rec.py:32-62": "Video Index File Loader Class",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/frame_rec.py:63-88": "Frame Dataset Preparer",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/frame_rec.py:89-110": "Retry Loading Frames in Exception Handling",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/video.py": "PaddleVideo Dataset Loader",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/video.py:1-32": "Python Video Dataset Loader",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/video.py:33-58": "Video Dataset Loader Initialization",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/video.py:59-81": "Video Dataset Loader: Robust Read, Pipeline, and Testing",
    "/applications/VideoQualityAssessment/paddlevideo/loader/dataset/video.py:82-95": "Retry-Based Video File Reader",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/__init__.py": "PaddleVideo Pipeline Modules",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/__init__.py:1-40": "PaddleVideo Loader Pipelines",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/__init__.py:41-50": "PaddleVideo Pipeline Modules",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py": "Multi-Scale Image Augmentation in PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:1-35": "Scale Class for Image Resizing",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:131-160": "MultiScaleCrop: Image Resizing and Cropping",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:161-192": "Random Crop Size Sampling",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:193-215": "Crop Position List Generator",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:216-247": "Random Crop and Flip Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:248-281": "Random Flip and Image Pipeline",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:282-310": "PIL Images to Numpy Array Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:311-344": "Dynamic Image Scaling Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:345-370": "Jitter Resize and Random Scale Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:36-61": "Preserve Aspect Ratio Resizing",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:371-403": "MultiCrop Image Resizer",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:404-430": "Random Cropping Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:431-452": "Image Cropping with Random Offsets",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:453-484": "Image Crop and Append Function",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:485-498": "Slower Pathway Frame Selection",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:62-95": "Random Crop Pipeline for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/augmentations.py:97-130": "Center Crop Image Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/compose.py": "Compose Class for Video Pipeline",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/compose.py:1-33": "Compose Class Pipeline",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/compose.py:34-61": "Compose Class Sequentially Combines Transforms",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/compose.py:62-79": "Video Pipeline Composer",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/decode.py": "PaddleVideo: MP4 Decoding and Feature Extraction",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/decode.py:1-42": "PaddleVideo: MP4 Decoding",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/decode.py:114-139": "Initialize Feature Paddings and Masks",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/decode.py:140-165": "Decode, Dequantize, One-Hot Labels",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/decode.py:43-80": "Multi-Decoder for Data Types",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/decode.py:81-113": "Decoding Pipeline for .pkl Files",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/mix.py": "Mixup for Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/mix.py:1-36": "Mixup for Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/mix.py:37-72": "Cutmix: Mixing Images and Labels in Datasets",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/mix.py:74-91": "Random Bounding Box Data Augmentation",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/sample.py": "Custom Sampler for PIL-based Video Frames",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/sample.py:1-32": "Sampler: Efficient Video Frame Sampling",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/sample.py:33-70": "Sample Pipeline Class Definition",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/sample.py:71-96": "Video Frame Index Calculator",
    "/applications/VideoQualityAssessment/paddlevideo/loader/pipelines/sample.py:97-102": "Frame Indexing in Video Loader",
    "/applications/VideoQualityAssessment/paddlevideo/loader/registry.py": "PaddleVideo Registry Management",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/__init__.py": "Video Quality Assessment Metrics Initiation",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/base.py": "BaseMetric: Foundation for Video Quality Metrics",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/base.py:1-36": "Base Metric Class for Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/base.py:37-39": "Base Class Accumulate Method",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/build.py": "PaddleVideo Metric Builder",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py": "Pearson and Spearman Correlation Metric",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py:1-35": "Video Quality Metric Class Definition",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py:36-62": "Pearson and Spearman Correlation Calculator Class",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/quality_metric.py:64-72": "Calculate PLCC and SROCC from Output and Label Pair",
    "/applications/VideoQualityAssessment/paddlevideo/metrics/registry.py": "PaddleVideo Metrics Registry",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/__init__.py": "PaddleVideo Modeling",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/__init__.py:1-24": "Universal Model Registration",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/__init__.py:26-45": "Video Model Building Toolkit",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/__init__.py": "ResNet and ResNetTweaksTSM Imported",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py": "Dynamically Configurable ResNet Backbone",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:1-35": "ConvBNLayer: PaddlePaddle Backbone Customization",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:114-146": "Convolutional Neural Network BasicBlock",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:147-174": "ResNet Forward Function Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:175-210": "ResNet Backbone Creator",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:211-232": "ResNet Model Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:233-252": "Dynamic ResNet Model Architecture",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:253-270": "Backbone Model Weight Initialization",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:271-290": "Forward Pass for Backbone: Conv and Pooling",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:36-58": "ConvBNLayer Class Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:59-89": "ResNet Convolutional Layer Design",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet.py:90-113": "Bottleneck Block Construction in PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py": "TSM-ResNet-C Model",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:1-34": "ConvBNLayer: Convolutional BatchNorm Layer",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:115-140": "Custom ResNet-D Layer with Optional Pooling",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:141-170": "TSM Convolutional Block with Shortcut Connection",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:171-206": "ResNet TSM Backbone with Shortcuts",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:207-235": "ResNetTweaksTSM Instance Initialization",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:236-258": "TSM-ResNet Backbone Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:259-278": "TSM ResNet Model Builder",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:279-297": "ResNet Weights Initialization",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:297-317": "Initializing Backbone for Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:318-328": "ResNet-C Backbone for Video Quality",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:36-60": "ConvBNLayer: Batch Normalization and Activation Layer",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:61-85": "TSM ResNet Backbone Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/backbones/resnet_tweaks_tsm.py:86-114": "Bottleneck Block in ResNet Model",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/builder.py": "Computer Vision Model Builders",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/builder.py:1-36": "Building Computer Vision Model Components",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/builder.py:39-52": "Building Localizer and Model Functions",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/__init__.py": "Importing Recognizers for Video Modeling",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/__init__.py": "Importing Recognizers in Video Framework",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py": "Base Recognizer Class for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py:1-38": "Base Recognizer: Train, Validate, Test Init",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py:39-75": "Base Model Recognizer Initialization",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/base.py:76-97": "Abstract Recognizer Model Base Class",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/recognizer2d.py": "Training Recognizer2D for 2D Models",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/recognizer2d.py:1-29": "PaddleVideo's 2D Recognizer Model Training",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/framework/recognizers/recognizer2d.py:31-52": "Recognizer2D: Validation and Test Methods",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/__init__.py": "PaddleVideo Heads for Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/base.py": "VideoQualityAssessment BaseHead Class",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/base.py:1-36": "PaddleVideo BaseHead Class Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/base.py:121-143": "Label Smooth Loss and Accuracy Functions",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/base.py:37-67": "BaseHead: Initializing PaddleVideo's Head Network",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/base.py:69-96": "VideoQualityAssessment Base Head Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/base.py:97-120": "Label Smoothing Loss Calculator",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py": "TSM Recurrent Head: TSN-Based Classifier for Video QA",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py:1-33": "TSM RecHead: TSN-Based Classifier for TSMs",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py:123-149": "Loss Calculation for TSM-REC Head",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py:150-153": "Squeeze and Label Smooth Loss Calculation",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py:34-62": "Uniform Weights Initialization for FC Layer",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py:63-91": "TSM Recognition Head Definition",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsm_rec_head.py:92-122": "Loss Function for Score Prediction Model",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsn_head.py": "TSN Head: Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsn_head.py:1-31": "TSN Head: PaddlePaddle Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsn_head.py:32-64": "Image Classification Head with GAP and Dropout",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsn_head.py:65-96": "Forward Pass Function for Neural Network Head",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/heads/tsn_head.py:97-97": "Return Calculated Score",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/__init__.py": "PaddleVideo Loss Functions",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/base.py": "Base Loss Function in PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/base.py:1-33": "Base Loss Function in PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/base.py:34-51": "Abstract Loss Function Base Class",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/l1_loss.py": "L1 Loss for Video Quality",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/l1_loss.py:1-33": "L1 Loss for Video Quality",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/l1_loss.py:34-38": "L1 Loss Calculator",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/smooth_l1_loss.py": "Custom SmoothL1 Loss in Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/smooth_l1_loss.py:1-33": "Custom Smooth L1 Loss Function",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/losses/smooth_l1_loss.py:34-39": "Smooth L1 Loss Calculation",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/registry.py": "Model Registry in PaddleVideo's Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/weight_init.py": "Weight Initialization in PaddlePaddle",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/weight_init.py:1-36": "Weight Initialization in PaddlePaddle Layers",
    "/applications/VideoQualityAssessment/paddlevideo/modeling/weight_init.py:37-55": "Neural Network Weight Initialization",
    "/applications/VideoQualityAssessment/paddlevideo/solver/__init__.py": "Video Quality Assessment Optimizer",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py": "Custom Learning Rate Schedulers for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:1-33": "CustomWarmupCosineDecay Scheduler",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:109-134": "Customizable Learning Rate Scheduler",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:135-160": "Custom Learning Rate Scheduler for Optimizers",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:161-196": "Custom Learning Rate Scheduler for PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:197-201": "Custom Learning Rate Scheduler",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:34-55": "Customizable Learning Rate Scheduler",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:56-81": "CustomWarmupCosineDecay: Cosine Decay Learning Rate Optimizer",
    "/applications/VideoQualityAssessment/paddlevideo/solver/custom_lr.py:82-108": "Warmup-Cosine LR Scheduler for Video Quality",
    "/applications/VideoQualityAssessment/paddlevideo/solver/lr.py": "VideoQualityAssessment LR Scheduler",
    "/applications/VideoQualityAssessment/paddlevideo/solver/lr.py:1-33": "Learning Rate Scheduler Builder",
    "/applications/VideoQualityAssessment/paddlevideo/solver/lr.py:35-49": "Learning Rate Configurer",
    "/applications/VideoQualityAssessment/paddlevideo/solver/optimizer.py": "Weight Decay Optimizer Scheduler",
    "/applications/VideoQualityAssessment/paddlevideo/solver/optimizer.py:1-36": "Configurable Optimizer Builder\n\nTitle within 3 to 7 words: Configurable Optimizer Builder",
    "/applications/VideoQualityAssessment/paddlevideo/solver/optimizer.py:37-68": "Adam Optimizer with L2Decay and L1Decay Regularization",
    "/applications/VideoQualityAssessment/paddlevideo/solver/optimizer.py:69-79": "Weight Decay Optimizer Configurator",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/__init__.py": "Training and Testing Functions",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/test.py": "Paddle Video Testing with Multi-Card Datasets",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/test.py:1-35": "Test Model Using Paddle Framework",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/test.py:36-66": "Multi-Card GPU Model Training",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/test.py:67-78": "Batch Size, Metric Building, Iteration & Accumulation",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py": "Efficient Video Quality Assessment Training with PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:1-28": "Video Quality Assessment with PaddleVideo",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:114-147": "Training Model Iteration",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:148-171": "Model Training Step in Video Quality Assessment",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:173-198": "Backward Propagation Optimizer",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:199-229": "Training Video Quality Model: Update Learning Rate",
    "/applications/VideoQualityAssessment/paddlevideo/tasks/train.py:230-254": "Validation Metrics Updater"
}